{"version":3,"file":"442.9cc9ac6ba71c08fe.js","mappings":"6LAEaA,EAAa,SAAAC,IAAAC,OAAAF,EAAAC,GAAA,IAAAE,KAAAC,KAAAJ,GACtB,SAAAA,IAAwG,IAAAK,EAA5FC,EAAWC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAGG,IAAUC,EAAWJ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAGG,IAAUE,EAAkBL,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAGM,IAAqBC,cAAAC,KAAAf,IAClGK,EAAAF,EAAAa,KAAAD,OACKT,YAAcA,EACnBD,EAAKM,YAAcA,EACnBN,EAAKO,mBAAqBA,EAC1BP,EAAKY,QAAU,GACfZ,EAAKa,qBAAsB,EAC3Bb,EAAKa,oBAAsBP,IAAgBD,IAC3CL,EAAKC,YAAca,KAAKC,IAAI,EAAGd,GAC/BD,EAAKM,YAAcQ,KAAKC,IAAI,EAAGT,GAAaN,CAChD,CAACgB,cAAArB,EAAA,EAAAsB,IAAA,OAAAC,MACD,SAAKA,GACD,IAAmBN,EAAkEF,KAAlEE,QAASC,EAAyDH,KAAzDG,oBAAqBN,EAAoCG,KAApCH,mBAAoBD,EAAgBI,KAAhBJ,YAAgBI,KAA7ES,YAEJP,EAAQQ,KAAKF,IACZL,GAAuBD,EAAQQ,KAAKb,EAAmBc,MAAQf,IAEpEI,KAAKY,eAAW,EAChBC,QAAAC,KAAA7B,EAAA8B,WAAA,OAAAf,MAAAC,KAAAD,KAAWQ,EACf,GAAC,CAAAD,IAAA,aAAAC,MACD,SAAWQ,GACPhB,KAAKiB,iBACLjB,KAAKY,cAIL,QAHMM,EAAelB,KAAKmB,gBAAgBH,GAClCb,EAAiCH,KAAjCG,oBACFiB,EADmCpB,KAAZE,QACRmB,QACZC,EAAI,EAAGA,EAAIF,EAAK3B,SAAWuB,EAAWO,OAAQD,GAAKnB,EAAsB,EAAI,EAClFa,EAAWQ,KAAKJ,EAAKE,IAEzB,OAAAtB,KAAKyB,wBAAwBT,GACtBE,CACX,GAAC,CAAAX,IAAA,cAAAC,MACD,WACI,IAAQjB,EAAkES,KAAlET,YAAaM,EAAqDG,KAArDH,mBAAoBK,EAAiCF,KAAjCE,QAASC,EAAwBH,KAAxBG,oBAC5CuB,GAAsBvB,EAAsB,EAAI,GAAKZ,EAE3D,GADAA,EAAcI,KAAY+B,EAAqBxB,EAAQT,QAAUS,EAAQyB,OAAO,EAAGzB,EAAQT,OAASiC,IAC/FvB,EAAqB,CAGtB,QAFMQ,EAAMd,EAAmBc,MAC3BiB,EAAO,EACFN,EAAI,EAAGA,EAAIpB,EAAQT,QAAUS,EAAQoB,IAAMX,EAAKW,GAAK,EAC1DM,EAAON,EAEXM,GAAQ1B,EAAQyB,OAAO,EAAGC,EAAO,EAAC,CAE1C,KAAC3C,CAAA,CA7CqB,CAAS4C,2ECC5B,SAASC,IAAgB,QAAAC,EAAAvC,UAAAC,OAANuC,EAAI,IAAAC,MAAAF,GAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAAJF,EAAIE,GAAA1C,UAAA0C,GAC1B,OCHG,SAASC,IACZ,SAAOC,KAAS,EACpB,CDCWD,IAAS,EAAGE,KAAKL,KAAMM,MAAaN,IAC/C,qHECMO,EAA0B,CAAC,cAAe,kBAC1CC,EAAqB,CAAC,mBAAoB,uBAC1CC,EAAgB,CAAC,KAAM,OACtB,SAASC,EAAUC,EAAQC,EAAWC,EAASC,GAKlD,MAJIC,KAAWF,KACXC,EAAiBD,EACjBA,OAAUnD,GAEVoD,EACA,OAAOJ,EAAUC,EAAQC,EAAWC,GAASG,QAAKC,KAAiBH,IAEvE,IAAAI,EA+BJ,SAASC,EAAcR,GACnB,SAAOI,KAAWJ,EAAOS,oBAAgB,EAAKL,KAAWJ,EAAOU,oBACpE,CAjC0BF,CAAcR,GAC9BH,EAAmBc,IAAI,SAACC,GAAU,OAAK,SAACC,GAAO,OAAKb,EAAOY,GAAYX,EAAWY,EAASX,EAAQ,IAwB7G,SAASY,EAAwBd,GAC7B,SAAOI,KAAWJ,EAAOe,eAAW,EAAKX,KAAWJ,EAAOgB,eAC/D,CAxBYF,CAAwBd,GAClBJ,EAAwBe,IAAIM,EAAwBjB,EAAQC,IAwB9E,SAASiB,EAA0BlB,GAC/B,SAAOI,KAAWJ,EAAOmB,MAAE,EAAKf,KAAWJ,EAAOoB,IACtD,CAzBkBF,CAA0BlB,GACtBF,EAAca,IAAIM,EAAwBjB,EAAQC,IAClD,GAAEoB,KAAAC,KAAAf,EAAA,GAPbgB,EAAGF,EAAA,GAAEG,EAAMH,EAAA,GAQlB,IAAKE,MACGE,KAAYzB,GACZ,SAAO0B,KAAS,SAACC,GAAS,OAAK5B,EAAU4B,EAAW1B,EAAWC,EAAQ,EAAvE,EAAuE,EAAE0B,MAAU5B,IAG3F,IAAKuB,EACD,MAAM,IAAIM,UAAU,wBAExB,OAAO,IAAIC,IAAW,SAACzD,GACnB,IAAMwC,EAAU,WAAH,QAAAzB,EAAAvC,UAAAC,OAAOuC,EAAI,IAAAC,MAAAF,GAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAAJF,EAAIE,GAAA1C,UAAA0C,GAAA,OAAKlB,EAAWQ,KAAK,EAAIQ,EAAKvC,OAASuC,EAAOA,EAAK,GAAG,EAC9EkC,SAAIV,GACG,kBAAMW,EAAOX,EAAQ,CAChC,EACJ,CACA,SAASI,EAAwBjB,EAAQC,GACrC,OAAO,SAACW,GAAU,OAAK,SAACC,GAAO,OAAKb,EAAOY,GAAYX,EAAWY,EAAQ,EAC9E,+FCtCO,SAASkB,EAAUC,GAAsC,IAA5BC,EAASpF,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAGqF,IAC5C,OCDG,SAASC,EAAMC,GAClB,SAAOC,KAAQ,SAACC,EAAQjE,GACpB,IAAIkE,GAAW,EACXC,EAAY,KACZC,EAAqB,KACrBC,GAAa,EACXC,EAAc,WAGhB,GAFwEF,GAAmBG,cAC3FH,EAAqB,KACjBF,EAAU,CACVA,GAAW,EACX,IAAM1E,EAAQ2E,EACdA,EAAY,KACZnE,EAAWQ,KAAKhB,EAAK,CAEzB6E,GAAcrE,EAAWwE,UAC7B,EACMC,EAAkB,WACpBL,EAAqB,KACrBC,GAAcrE,EAAWwE,UAC7B,EACAP,EAAOS,aAAUC,KAAyB3E,EAAY,SAACR,GACnD0E,GAAW,EACXC,EAAY3E,EACP4E,MACDb,MAAUQ,EAAiBvE,IAAQkF,UAAWN,KAAqBO,KAAyB3E,EAAYsE,EAAaG,GAE7H,EAAG,WACCJ,GAAa,IACXH,IAAaE,GAAsBA,EAAmB7D,SAAWP,EAAWwE,UAClF,GACJ,EACJ,CD/BWV,CAAM,oBAAMc,KAAMjB,EAAUC,EAAU,EACjD,yEEFO,SAASiB,EAAqBC,GAAoC,IAAxBC,EAAWvG,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAGwG,IAC3DF,SAAaA,GAA4DG,KAClEjB,KAAQ,SAACC,EAAQjE,GACpB,IAAIkF,EACAC,GAAQ,EACZlB,EAAOS,aAAUC,KAAyB3E,EAAY,SAACR,GACnD,IAAM4F,EAAaL,EAAYvF,IAC3B2F,IAAUL,EAAWI,EAAaE,MAClCD,GAAQ,EACRD,EAAcE,EACdpF,EAAWQ,KAAKhB,GAExB,GACJ,EACJ,CACA,SAASyF,EAAeI,EAAGC,GACvB,OAAOD,IAAMC,CACjB,8DClBO,SAASC,EAAOC,EAAWC,GAC9B,SAAOzB,KAAQ,SAACC,EAAQjE,GACpB,IAAI0F,EAAQ,EACZzB,EAAOS,aAAUC,KAAyB3E,EAAY,SAACR,GAAK,OAAKgG,EAAUvG,KAAKwG,EAASjG,EAAOkG,MAAY1F,EAAWQ,KAAKhB,EAAM,GACtI,EACJ,8DCLO,SAAS8C,EAAIqD,EAASF,GACzB,SAAOzB,KAAQ,SAACC,EAAQjE,GACpB,IAAI0F,EAAQ,EACZzB,EAAOS,aAAUC,KAAyB3E,EAAY,SAACR,GACnDQ,EAAWQ,KAAKmF,EAAQ1G,KAAKwG,EAASjG,EAAOkG,KACjD,GACJ,EACJ,6DCPO,SAAStE,IACZ,SAAOiC,KAAS2B,IADexG,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAGG,IAEtC,8DCFO,SAASiH,EAAYC,EAAoBC,EAAYlC,GACxD,IAAImC,EACAC,GAAW,EACf,GAAIH,GAAoD,iBAAvBA,EAAiC,KAAAI,EACmBJ,EAA9EE,kBAAU,IAAAE,EAAGtH,IAAQsH,EAAA,IAAAC,EAAyDL,EAAvDC,kBAAU,IAAAI,EAAGvH,IAAQuH,EAAA,IAAAC,EAAkCN,EAAhCG,gBAAQ,IAAAG,GAAQA,EAAEvC,EAAciC,EAAdjC,eAGnEmC,EAAcF,GAAoFlH,IAEtG,SAAOyH,KAAM,CACTC,UAAW,kBAAM,IAAIpI,IAAc8H,EAAYD,EAAYlC,EAAU,EACrE0C,cAAc,EACdC,iBAAiB,EACjBC,oBAAqBR,GAE7B,yECdO,SAASS,IAAqB,QAAA1F,EAAAvC,UAAAC,OAARiI,EAAM,IAAAzF,MAAAF,GAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAANwF,EAAMxF,GAAA1C,UAAA0C,GAC/B,IAAM0C,KAAYtC,MAAaoF,GAC/B,SAAO1C,KAAQ,SAACC,EAAQjE,IACnB4D,KAAY9C,KAAO4F,EAAQzC,EAAQL,IAAS,EAAI9C,KAAO4F,EAAQzC,IAASS,UAAU1E,EACvF,EACJ,yECLO,SAAS2G,EAAUhB,EAAS7D,GAC/B,SAAOkC,KAAQ,SAACC,EAAQjE,GACpB,IAAI4G,EAAkB,KAClBlB,EAAQ,EACRrB,GAAa,EACXwC,EAAgB,WAAH,OAASxC,IAAeuC,GAAmB5G,EAAWwE,UAAU,EACnFP,EAAOS,aAAUC,KAAyB3E,EAAY,SAACR,GACeoH,GAAgBrC,cAClF,IAAIuC,EAAa,EACXC,EAAarB,KACnBnC,QAAUoC,EAAQnG,EAAOuH,IAAarC,UAAWkC,KAAkBjC,KAAyB3E,EAAY,SAACgH,GAAU,OAAKhH,EAAWQ,KAAKsB,EAAiBA,EAAetC,EAAOwH,EAAYD,EAAYD,KAAgBE,EAAW,EAAE,WAChOJ,EAAkB,KAClBC,GACJ,GACJ,EAAG,WACCxC,GAAa,EACbwC,GACJ,GACJ,EACJ,oFClBO,SAASI,EAAUC,GACtB,SAAOlD,KAAQ,SAACC,EAAQjE,IACpBuD,QAAU2D,GAAUxC,aAAUC,KAAyB3E,EAAY,kBAAMA,EAAWwE,UAAU,EAAE2C,OAC/FnH,EAAWO,QAAU0D,EAAOS,UAAU1E,EAC3C,EACJ,+HCRaoH,EAAyB,CAClCC,SAAQ,SAACC,GACL,IAAIC,EAAUC,sBACVC,EAASC,qBACLC,EAAaP,EAAbO,SACJA,IACAJ,EAAUI,EAASH,sBACnBC,EAASE,EAASD,sBAEtB,IAAME,EAASL,EAAQ,SAACM,GACpBJ,OAAS/I,EACT4I,EAASO,EACb,GACA,OAAO,IAAIC,KAAa,kBAAsDL,IAAOG,EAAO,EAChG,EACAJ,sBAAqB,SAAAO,GAAA,SAAAP,IAAA,OAAAO,EAAAC,MAAAhJ,KAAAR,UAAA,CAAAgJ,SAAAS,SAAA,kBAAAF,EAAAE,UAAA,EAAAT,CAAA,aACjB,IAAQG,EAAaP,EAAbO,SACR,OAA6DA,GAASH,uBAA0BA,uBAAqBQ,WAAA,EAAAxJ,UACzH,GACAkJ,qBAAoB,SAAAQ,GAAA,SAAAR,IAAA,OAAAQ,EAAAF,MAAAhJ,KAAAR,UAAA,CAAAkJ,SAAAO,SAAA,kBAAAC,EAAAD,UAAA,EAAAP,CAAA,aAChB,IAAQC,EAAaP,EAAbO,SACR,OAA6DA,GAASD,sBAAyBA,sBAAoBM,WAAA,EAAAxJ,UACvH,GACAmJ,cAAUjJ,GCtBDyJ,EAAoB,SAAAC,IAAAjK,OAAAgK,EAAAC,GAAA,IAAAhK,KAAAC,KAAA8J,GAC7B,SAAAA,EAAYvE,EAAWyE,GAAM,IAAA/J,EAAAS,cAAAC,KAAAmJ,IACzB7J,EAAAF,EAAAa,KAAAD,KAAM4E,EAAWyE,IACZzE,UAAYA,EACjBtF,EAAK+J,KAAOA,EAAK/J,CACrB,CAACgB,cAAA6I,EAAA,EAAA5I,IAAA,iBAAAC,MACD,SAAeoE,EAAW0E,GAAe,IAAXC,EAAK/J,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EAClC,OAAc,OAAV+J,GAAkBA,EAAQ,KAC1B1I,QAAAC,KAAAqI,EAAApI,WAAA,iBAAAf,MAAAC,KAAAD,KAA4B4E,EAAW0E,EAAIC,IAE/C3E,EAAU4E,QAAQ9I,KAAKV,MAChB4E,EAAU6E,aAAe7E,EAAU6E,WAAarB,wBAA6C,kBAAMxD,EAAU8E,WAAMhK,EAAU,IACxI,GAAC,CAAAa,IAAA,iBAAAC,MACD,SAAeoE,EAAW0E,GAAe,IACjCK,EADsBJ,EAAK/J,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EAElC,GAAa,MAAT+J,EAAgBA,EAAQ,EAAIvJ,KAAKuJ,MAAQ,EACzC,SAAA1I,QAAAC,KAAAqI,EAAApI,WAAA,iBAAAf,MAAAC,KAAAD,KAA4B4E,EAAW0E,EAAIC,GAE/C,IAAQC,EAAY5E,EAAZ4E,QACE,MAANF,IAAsD,QAAtCK,EAAKH,EAAQA,EAAQ/J,OAAS,UAAuB,IAAPkK,OAAgB,EAASA,EAAGL,MAAQA,IAClGlB,uBAA4CkB,GAC5C1E,EAAU6E,gBAAa/J,EAG/B,KAACyJ,CAAA,CAxB4B,CAASS,KCA7BC,EAA0B,ICDH,SAAAC,IAAA3K,OAAA4K,EAAAD,GAAA,IAAA1K,KAAAC,KAAA0K,GAAA,SAAAA,IAAAhK,cAAAC,KAAA+J,GAAA3K,EAAA4J,MAAAhJ,KAAAR,UAAA,CAAAc,cAAAyJ,EAAA,EAAAxJ,IAAA,QAAAC,MAChC,SAAMwJ,GACFhK,KAAKiK,SAAU,EACf,IAAMC,EAAUlK,KAAKyJ,WACrBzJ,KAAKyJ,gBAAa/J,EAClB,IACIyK,EADIX,EAAYxJ,KAAZwJ,QAERQ,EAASA,GAAUR,EAAQY,QAC3B,MACSD,EAAQH,EAAOK,QAAQL,EAAOM,MAAON,EAAOT,OAC7C,aAEES,EAASR,EAAQ,KAAOQ,EAAOV,KAAOY,GAAWV,EAAQY,SAEnE,GADApK,KAAKiK,SAAU,EACXE,EAAO,CACP,MAAQH,EAASR,EAAQ,KAAOQ,EAAOV,KAAOY,GAAWV,EAAQY,SAC7DJ,EAAOzE,cAEX,MAAM4E,EAEd,KAACJ,CAAA,CApB+B,UAASQ,GDCN,CAA4BpB,yCED/DqB,8EADAC,EAAa,EAEXC,EAAgB,CAAC,EACvB,SAASC,EAAmB/B,GACxB,OAAIA,KAAU8B,WACHA,EAAc9B,IACd,EAGf,CACO,ICTCgC,EDUQ,SAACC,GACT,IAAMjC,EAAS6B,IACfC,SAAc9B,IAAU,EACnB4B,IACDA,EAAWM,QAAQC,WAEvBP,EAASQ,KAAK,kBAAML,EAAmB/B,IAAWiC,GAAI,GAC/CjC,CACX,EClBkBqC,EDmBJ,SAACrC,GACX+B,EAAmB/B,EACvB,ECpBSsC,EAAoB,CAC7BN,aAAY,WACR,IAAQjC,EAAauC,EAAbvC,SACR,OAA6DA,GAASiC,cAAiBA,GAAY5B,WAAA,EAAAxJ,UACvG,EACAyL,eAAc,SAACrC,GACX,IAAQD,EAAauC,EAAbvC,SACR,OAA6DA,GAASsC,gBAAmBA,GAAgBrC,EAC7G,EACAD,cAAUjJ,GCTDyL,EAAU,SAAA/B,IAAAjK,OAAAgM,EAAA/B,GAAA,IAAAhK,KAAAC,KAAA8L,GACnB,SAAAA,EAAYvG,EAAWyE,GAAM,IAAA/J,EAAAS,cAAAC,KAAAmL,IACzB7L,EAAAF,EAAAa,KAAAD,KAAM4E,EAAWyE,IACZzE,UAAYA,EACjBtF,EAAK+J,KAAOA,EAAK/J,CACrB,CAACgB,cAAA6K,EAAA,EAAA5K,IAAA,iBAAAC,MACD,SAAeoE,EAAW0E,GAAe,IAAXC,EAAK/J,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EAClC,OAAc,OAAV+J,GAAkBA,EAAQ,KAC1B1I,QAAAC,KAAAqK,EAAApK,WAAA,iBAAAf,MAAAC,KAAAD,KAA4B4E,EAAW0E,EAAIC,IAE/C3E,EAAU4E,QAAQ9I,KAAKV,MAChB4E,EAAU6E,aAAe7E,EAAU6E,WAAayB,eAA+BtG,EAAU8E,MAAM0B,KAAKxG,OAAWlF,KAC1H,GAAC,CAAAa,IAAA,iBAAAC,MACD,SAAeoE,EAAW0E,GAAe,IACjCK,EADsBJ,EAAK/J,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EAElC,GAAa,MAAT+J,EAAgBA,EAAQ,EAAIvJ,KAAKuJ,MAAQ,EACzC,SAAA1I,QAAAC,KAAAqK,EAAApK,WAAA,iBAAAf,MAAAC,KAAAD,KAA4B4E,EAAW0E,EAAIC,GAE/C,IAAQC,EAAY5E,EAAZ4E,QACE,MAANF,IAAsD,QAAtCK,EAAKH,EAAQA,EAAQ/J,OAAS,UAAuB,IAAPkK,OAAgB,EAASA,EAAGL,MAAQA,IAClG4B,iBAAiC5B,GACjC1E,EAAU6E,gBAAa/J,EAG/B,KAACyL,CAAA,CAxBkB,CAASvB,KCAnByB,EAAgB,ICDH,SAAAvB,IAAA3K,OAAAmM,EAAAxB,GAAA,IAAA1K,KAAAC,KAAAiM,GAAA,SAAAA,IAAAvL,cAAAC,KAAAsL,GAAAlM,EAAA4J,MAAAhJ,KAAAR,UAAA,CAAAc,cAAAgL,EAAA,EAAA/K,IAAA,QAAAC,MACtB,SAAMwJ,GACFhK,KAAKiK,SAAU,EACf,IAAMC,EAAUlK,KAAKyJ,WACrBzJ,KAAKyJ,gBAAa/J,EAClB,IACIyK,EADIX,EAAYxJ,KAAZwJ,QAERQ,EAASA,GAAUR,EAAQY,QAC3B,MACSD,EAAQH,EAAOK,QAAQL,EAAOM,MAAON,EAAOT,OAC7C,aAEES,EAASR,EAAQ,KAAOQ,EAAOV,KAAOY,GAAWV,EAAQY,SAEnE,GADApK,KAAKiK,SAAU,EACXE,EAAO,CACP,MAAQH,EAASR,EAAQ,KAAOQ,EAAOV,KAAOY,GAAWV,EAAQY,SAC7DJ,EAAOzE,cAEX,MAAM4E,EAEd,KAACmB,CAAA,CApBqB,UAASf,GDCN,CAAkBY,+DEAxC,SAASI,EAAaC,GACzB,QAASA,IAAQA,aAAe/G,QAAe1B,KAAWyI,EAAIC,QAAI,EAAK1I,KAAWyI,EAAI9F,WAC1F,8DCHQgG,EAAYzJ,MAAZyJ,QAID,SAASzI,EAAiB0I,GAC7B,SAAOrI,KAAI,SAAAtB,GAAI,OAJnB,SAAS4J,EAAYD,EAAI3J,GACrB,OAAO0J,EAAQ1J,GAAQ2J,EAAE3C,WAAA,KAAA6C,KAAI7J,IAAQ2J,EAAG3J,EAC5C,CAEuB4J,CAAYD,EAAI3J,EAAK,EAC5C,k3BCMA8J,GAAA,mBAAAC,GAAA,MACMC,EAA0B,IAAIC,iBAAe,2BAG7CC,GAA8B,WAMhC,SAAAA,EAAYC,EAAUC,EAAaC,IAAatM,OAAAC,KAAAkM,GAC5ClM,KAAKsM,qBAAuB,IAAIzK,IAEhC7B,KAAKuM,oBAAsBvM,KAAKsM,qBAAqBtJ,QAAK6C,QAE1D7F,KAAKwM,UAAY,KACjBxM,KAAKyM,UAAYN,EACjBnM,KAAK0M,aAAeN,EACpBpM,KAAK2M,aAAeN,CACxB,CACA/L,cAAA4L,EAAA,EAAA3L,IAAA,SAAAC,MAIA,SAAOoM,GACH5M,KAAKwM,UAAYI,EACjB5M,KAAK6M,0BACL7M,KAAK8M,sBACT,GACA,CAAAvM,IAAA,SAAAC,MACA,WACIR,KAAKsM,qBAAqB9G,WAC1BxF,KAAKwM,UAAY,IACrB,GACA,CAAAjM,IAAA,0BAAAC,MAMA,SAAwB2L,EAAUC,EAAaC,GAI3CrM,KAAKyM,UAAYN,EACjBnM,KAAK0M,aAAeN,EACpBpM,KAAK2M,aAAeN,EACpBrM,KAAK6M,0BACL7M,KAAK8M,sBACT,GACA,CAAAvM,IAAA,oBAAAC,MACA,WACIR,KAAK8M,sBACT,GACA,CAAAvM,IAAA,sBAAAC,MACA,WACIR,KAAK6M,0BACL7M,KAAK8M,sBACT,GACA,CAAAvM,IAAA,oBAAAC,MACA,WACI,GAEJ,CAAAD,IAAA,0BAAAC,MACA,WACI,GAEJ,CAAAD,IAAA,gBAAAC,MAKA,SAAckG,EAAOqG,GACb/M,KAAKwM,WACLxM,KAAKwM,UAAUQ,eAAetG,EAAQ1G,KAAKyM,UAAWM,EAE9D,GACA,CAAAxM,IAAA,0BAAAC,MACA,WACSR,KAAKwM,WAGVxM,KAAKwM,UAAUS,oBAAoBjN,KAAKwM,UAAUU,gBAAkBlN,KAAKyM,UAC7E,GACA,CAAAlM,IAAA,uBAAAC,MACA,WACI,GAAKR,KAAKwM,UAGV,KAAMW,EAAgBnN,KAAKwM,UAAUY,mBAC/BC,EAAW,CAAEC,MAAOH,EAAcG,MAAOC,IAAKJ,EAAcI,KAC5DC,EAAexN,KAAKwM,UAAUiB,kBAC9BC,EAAa1N,KAAKwM,UAAUU,gBAC9BS,EAAe3N,KAAKwM,UAAUoB,sBAE9BC,EAAoB7N,KAAKyM,UAAY,EAAIkB,EAAe3N,KAAKyM,UAAY,EAE7E,GAAIY,EAASE,IAAMG,EAAY,CAE3B,IAAMI,EAAkB1N,KAAK2N,KAAKP,EAAexN,KAAKyM,WAChDuB,EAAkB5N,KAAKC,IAAI,EAAGD,KAAK6N,IAAIJ,EAAmBH,EAAaI,IAGzED,GAAqBG,IACrBH,EAAoBG,EACpBL,EAAeK,EAAkBhO,KAAKyM,UACtCY,EAASC,MAAQlN,KAAK8N,MAAML,IAEhCR,EAASE,IAAMnN,KAAKC,IAAI,EAAGD,KAAK6N,IAAIP,EAAYL,EAASC,MAAQQ,GAAgB,CAErF,IAAMK,EAAcR,EAAeN,EAASC,MAAQtN,KAAKyM,UACzD,GAAI0B,EAAcnO,KAAK0M,cAAkC,GAAlBW,EAASC,MAAY,CACxD,IAAMc,EAAchO,KAAK2N,MAAM/N,KAAK2M,aAAewB,GAAenO,KAAKyM,WACvEY,EAASC,MAAQlN,KAAKC,IAAI,EAAGgN,EAASC,MAAQc,GAC9Cf,EAASE,IAAMnN,KAAK6N,IAAIP,EAAYtN,KAAK2N,KAAKF,GAAqBL,EAAexN,KAAK0M,cAAgB1M,KAAKyM,WAAU,KAErH,CACD,IAAM4B,EAAYhB,EAASE,IAAMvN,KAAKyM,WAAakB,EAAeH,GAClE,GAAIa,EAAYrO,KAAK0M,cAAgBW,EAASE,KAAOG,EAAY,CAC7D,IAAMY,EAAYlO,KAAK2N,MAAM/N,KAAK2M,aAAe0B,GAAarO,KAAKyM,WAC/D6B,EAAY,IACZjB,EAASE,IAAMnN,KAAK6N,IAAIP,EAAYL,EAASE,IAAMe,GACnDjB,EAASC,MAAQlN,KAAKC,IAAI,EAAGD,KAAK8N,MAAML,EAAoB7N,KAAK0M,aAAe1M,KAAKyM,YAAU,EAI3GzM,KAAKwM,UAAU+B,iBAAiBlB,GAChCrN,KAAKwM,UAAUgC,yBAAyBxO,KAAKyM,UAAYY,EAASC,OAClEtN,KAAKsM,qBAAqB9K,KAAKpB,KAAK8N,MAAML,GAAkB,CAChE,KAAC3B,CAAA,CA7H+B,GAqIpC,SAASuC,GAAuCC,GAC5C,OAAOA,EAAaC,eACxB,CACA,IACMC,GAAyB,eAAzBA,EAAyB,WAC3B,SAAAA,KAAc7O,OAAAC,KAAA4O,GACV5O,KAAKyM,UAAY,GACjBzM,KAAK0M,aAAe,IACpB1M,KAAK2M,aAAe,IAEpB3M,KAAK2O,gBAAkB,IAAIzC,GAA+BlM,KAAKmM,SAAUnM,KAAKoM,YAAapM,KAAKqM,YACpG,CACA/L,cAAAsO,EAAA,EAAArO,IAAA,WAAAsO,IACA,WACI,OAAO7O,KAAKyM,SAChB,EAACqC,IACD,SAAatO,GACTR,KAAKyM,aAAYsC,wBAAqBvO,EAC1C,GACA,CAAAD,IAAA,cAAAsO,IAIA,WACI,OAAO7O,KAAK0M,YAChB,EAACoC,IACD,SAAgBtO,GACZR,KAAK0M,gBAAeqC,wBAAqBvO,EAC7C,GACA,CAAAD,IAAA,cAAAsO,IAGA,WACI,OAAO7O,KAAK2M,YAChB,EAACmC,IACD,SAAgBtO,GACZR,KAAK2M,gBAAeoC,wBAAqBvO,EAC7C,GAAC,CAAAD,IAAA,cAAAC,MACD,WACIR,KAAK2O,gBAAgBK,wBAAwBhP,KAAKmM,SAAUnM,KAAKoM,YAAapM,KAAKqM,YACvF,KAACuC,CAAA,CApC0B,GAAzBA,SAqCYK,UAAI,SAAAC,GAAA,WAAAA,GAAwFN,EAAyB,EArCjIA,EAsCYO,UADkFC,8BAAE,CAAAC,KACJT,EAAyBU,UAAA,gDAAAC,OAAA,CAAApD,SAAA,WAAAC,YAAA,cAAAC,YAAA,eAAAmD,YAAA,EAAAC,SAAA,CADvBL,+BACqM,CAC7R,CACIM,QAAS1D,EACT2D,WAAYlB,GACZmB,KAAM,IAACC,cAAW,kBAAMjB,CAAyB,OALmCQ,oCArC9FR,CAAyB,IAoEzBkB,GAAsB,GAKtBC,EAAgB,eAAhBA,EAAgB,WAClB,SAAAA,EAAYC,EAASC,EAAWC,IAAUnQ,OAAAC,KAAA+P,GACtC/P,KAAKgQ,QAAUA,EACfhQ,KAAKiQ,UAAYA,EAEjBjQ,KAAKmQ,UAAY,IAAItO,IAErB7B,KAAKoQ,oBAAsB,KAE3BpQ,KAAKqQ,eAAiB,EAKtBrQ,KAAKsQ,iBAAmB,IAAIC,IAC5BvQ,KAAKwQ,UAAYN,CACrB,CACA5P,cAAAyP,EAAA,EAAAxP,IAAA,WAAAC,MAKA,SAASiQ,GAAY,IAAAnR,EAAAU,KACZA,KAAKsQ,iBAAiBI,IAAID,IAC3BzQ,KAAKsQ,iBAAiBxB,IAAI2B,EAAYA,EAAWE,kBAAkBjL,UAAU,kBAAMpG,EAAK6Q,UAAU3O,KAAKiP,EAAW,GAE1H,GACA,CAAAlQ,IAAA,aAAAC,MAIA,SAAWiQ,GACP,IAAMG,EAAsB5Q,KAAKsQ,iBAAiBzB,IAAI4B,GAClDG,IACAA,EAAoBrL,cACpBvF,KAAKsQ,iBAAgBO,OAAQJ,GAErC,GACA,CAAAlQ,IAAA,WAAAC,MAUA,WAA8C,IAAAsQ,EAAA9Q,KAArC+Q,EAAavR,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAGsQ,GACrB,OAAK9P,KAAKiQ,UAAUe,UAGb,IAAIvM,IAAW,SAACwM,GACdH,EAAKV,qBACNU,EAAKI,qBAIT,IAAMhQ,EAAe6P,EAAgB,EAC/BD,EAAKX,UAAUnN,QAAK0B,KAAUqM,IAAgBrL,UAAUuL,GACxDH,EAAKX,UAAUzK,UAAUuL,GAC/BH,SAAKT,iBACE,WACHnP,EAAaqE,cACbuL,EAAKT,iBACAS,EAAKT,gBACNS,EAAKK,uBAEb,CACJ,IAAC,EAnBUC,OAoBf,GAAC,CAAA7Q,IAAA,cAAAC,MACD,WAAc,IAAA6Q,EAAArR,KACVA,KAAKmR,wBACLnR,KAAKsQ,iBAAiBgB,QAAQ,SAACC,EAAGC,GAAS,OAAKH,EAAKI,WAAWD,EAAU,GAC1ExR,KAAKmQ,UAAU3K,UACnB,GACA,CAAAjF,IAAA,mBAAAC,MAMA,SAAiBkR,EAAqBX,GAClC,IAAMY,EAAY3R,KAAK4R,4BAA4BF,GACnD,OAAO1R,KAAK6R,SAASd,GAAe/N,QAAKuD,KAAO,SAAA5D,GAC5C,OAAQA,GAAUgP,EAAUG,QAAQnP,IAAU,CAClD,GACJ,GACA,CAAApC,IAAA,8BAAAC,MACA,SAA4BkR,GAAqB,IAAAK,EAAA/R,KACvCgS,EAAsB,GAC5B,OAAAhS,KAAKsQ,iBAAiBgB,QAAQ,SAACW,EAAexB,GACtCsB,EAAKG,2BAA2BzB,EAAYiB,IAC5CM,EAAoBtR,KAAK+P,EAEjC,GACOuB,CACX,GACA,CAAAzR,IAAA,aAAAC,MACA,WACI,OAAOR,KAAKwQ,UAAU2B,aAAeC,MACzC,GACA,CAAA7R,IAAA,6BAAAC,MACA,SAA2BiQ,EAAYiB,GACnC,IAAIW,KAAUC,iBAAcZ,GACxBa,EAAoB9B,EAAW+B,gBAAgBC,cAGnD,MACQJ,GAAWE,EACX,OAAO,QAELF,EAAUA,EAAQK,eAC5B,OAAO,CACX,GACA,CAAAnS,IAAA,qBAAAC,MACA,WAAqB,IAAAmS,EAAA3S,KACjBA,KAAKoQ,oBAAsBpQ,KAAKgQ,QAAQ4C,kBAAkB,WACtD,IAAMR,EAASO,EAAKE,aACpB,SAAOnQ,KAAU0P,EAAOlC,SAAU,UAAUxK,UAAU,kBAAMiN,EAAKxC,UAAU3O,MAAM,EACrF,EACJ,GACA,CAAAjB,IAAA,wBAAAC,MACA,WACQR,KAAKoQ,sBACLpQ,KAAKoQ,oBAAoB7K,cACzBvF,KAAKoQ,oBAAsB,KAEnC,KAACL,CAAA,CAhIiB,GAAhBA,SAiIYd,UAAI,SAAAC,GAAA,WAAAA,GAAwFa,GArKVX,qBAqK4CA,UArK5CA,qBAqKkE0D,YArKlE1D,qBAqK0F2D,YAAQ,KAjIhMhD,EAkIYiD,WAtKkF5D,+BAAE,CAAA6D,MAsKYlD,EAAgBmD,QAAhBnD,EAAgBd,UAAAkE,WAAc,SAlI1IpD,CAAgB,IAmJhBqD,EAAa,eAAbA,EAAa,WACf,SAAAA,EAAYC,EAAYC,EAAkBC,EAAQC,GAAK,IAAAC,EAAAzT,MAAAD,OAAAC,KAAAoT,GACnDpT,KAAKqT,WAAaA,EAClBrT,KAAKsT,iBAAmBA,EACxBtT,KAAKuT,OAASA,EACdvT,KAAKwT,IAAMA,EACXxT,KAAK0T,WAAa,IAAI7R,IACtB7B,KAAK2T,iBAAmB,IAAIlP,IAAW,SAACwM,GAAQ,OAAKwC,EAAKF,OAAOX,kBAAkB,oBAAMlQ,KAAU+Q,EAAKJ,WAAWZ,cAAe,UAC7HzP,QAAKiF,KAAUwL,EAAKC,aACpBhO,UAAUuL,EAAS,EAAC,EAC7B,CAAC3Q,cAAA8S,EAAA,EAAA7S,IAAA,WAAAC,MACD,WACIR,KAAKsT,iBAAiBM,SAAS5T,KACnC,GAAC,CAAAO,IAAA,cAAAC,MACD,WACIR,KAAKsT,iBAAiB7B,WAAWzR,MACjCA,KAAK0T,WAAWlS,OAChBxB,KAAK0T,WAAWlO,UACpB,GACA,CAAAjF,IAAA,kBAAAC,MACA,WACI,OAAOR,KAAK2T,gBAChB,GACA,CAAApT,IAAA,gBAAAC,MACA,WACI,OAAOR,KAAKqT,UAChB,GACA,CAAA9S,IAAA,WAAAC,MAQA,SAASqC,GACL,IAAMgR,EAAK7T,KAAKqT,WAAWZ,cACrBqB,EAAQ9T,KAAKwT,KAAyB,OAAlBxT,KAAKwT,IAAIhT,MAEf,MAAhBqC,EAAQkR,OACRlR,EAAQkR,KAAOD,EAAQjR,EAAQ0K,IAAM1K,EAAQyK,OAE5B,MAAjBzK,EAAQmR,QACRnR,EAAQmR,MAAQF,EAAQjR,EAAQyK,MAAQzK,EAAQ0K,KAG9B,MAAlB1K,EAAQoR,SACRpR,EAAQqR,IACJL,EAAGM,aAAeN,EAAGO,aAAevR,EAAQoR,QAGhDH,GAAmC,IAAnCA,EAASO,2BACW,MAAhBxR,EAAQkR,OACRlR,EAAQmR,MACJH,EAAGS,YAAcT,EAAGU,YAAc1R,EAAQkR,MAEpB,IAFoBA,EAE9CM,0BACAxR,EAAQkR,KAAOlR,EAAQmR,MAEQ,IAFRA,EAElBK,4BACLxR,EAAQkR,KAAOlR,EAAQmR,OAASnR,EAAQmR,MAAQnR,EAAQmR,QAIvC,MAAjBnR,EAAQmR,QACRnR,EAAQkR,KACJF,EAAGS,YAAcT,EAAGU,YAAc1R,EAAQmR,OAGtDhU,KAAKwU,sBAAsB3R,EAC/B,GAAC,CAAAtC,IAAA,wBAAAC,MACD,SAAsBqC,GAClB,IAAMgR,EAAK7T,KAAKqT,WAAWZ,eAC3B,EAAIgC,4BACAZ,EAAGa,SAAS7R,IAGO,MAAfA,EAAQqR,MACRL,EAAGc,UAAY9R,EAAQqR,KAEP,MAAhBrR,EAAQkR,OACRF,EAAGe,WAAa/R,EAAQkR,MAGpC,GACA,CAAAxT,IAAA,sBAAAC,MASA,SAAoB6B,GAChB,IAAMwS,EAAO,OACPC,EAAQ,QACRjB,EAAK7T,KAAKqT,WAAWZ,cAC3B,GAAY,OAARpQ,EACA,OAAOwR,EAAGc,UAEd,GAAY,UAARtS,EACA,OAAOwR,EAAGM,aAAeN,EAAGO,aAAeP,EAAGc,UAGlD,IAAMb,EAAQ9T,KAAKwT,KAAyB,OAAlBxT,KAAKwT,IAAIhT,MAOnC,MANY,SAAR6B,EACAA,EAAOyR,EAAQgB,EAAQD,EAEV,OAARxS,IACLA,EAAOyR,EAAQe,EAAOC,GAEtBhB,GAAmC,IAAnCA,EAASO,0BAGLhS,GAAQwS,EACDhB,EAAGS,YAAcT,EAAGU,YAAcV,EAAGe,WAGrCf,EAAGe,WAGTd,GAAmC,IAAnCA,EAASO,0BAGVhS,GAAQwS,EACDhB,EAAGe,WAAaf,EAAGS,YAAcT,EAAGU,aAGnCV,EAAGe,WAMXvS,GAAQwS,EACDhB,EAAGe,WAGHf,EAAGS,YAAcT,EAAGU,YAAcV,EAAGe,UAGxD,KAACxB,CAAA,CA9Ic,GAAbA,SA+IYnE,UAAI,SAAAC,GAAA,WAAAA,GAAwFkE,GAtUVhE,8BAsUyCA,cAtUzCA,8BAsUmEW,GAtUnEX,8BAsUgGA,UAtUhGA,8BAsUsH2F,iBAAiB,KA/IrO3B,EAgJYjE,UAvUkFC,8BAAE,CAAAC,KAuUJ+D,EAAa9D,UAAA,mDAAAE,YAAA,IAhJzG4D,CAAa,IA6Jb4B,GAAsB,GAKtBC,GAAa,eAAbA,EAAa,WACf,SAAAA,EAAYhF,EAAWsD,EAAQrD,GAAU,IAAAgF,EAAAlV,MAAAD,OAAAC,KAAAiV,GACrCjV,KAAKiQ,UAAYA,EAEjBjQ,KAAKmV,QAAU,IAAItT,IAEnB7B,KAAKoV,gBAAkB,SAACC,GACpBH,EAAKC,QAAQ3T,KAAK6T,EACtB,EACArV,KAAKwQ,UAAYN,EACjBqD,EAAOX,kBAAkB,WACrB,GAAI3C,EAAUe,UAAW,CACrB,IAAMoB,EAAS8C,EAAKrC,aAGpBT,EAAOhP,iBAAiB,SAAU8R,EAAKE,iBACvChD,EAAOhP,iBAAiB,oBAAqB8R,EAAKE,gBAAe,CAIrEF,EAAKI,SAAS5P,UAAU,kBAAOwP,EAAKK,cAAgB,IAAI,EAC5D,EACJ,CAACjV,cAAA2U,EAAA,EAAA1U,IAAA,cAAAC,MACD,WACI,GAAIR,KAAKiQ,UAAUe,UAAW,CAC1B,IAAMoB,EAASpS,KAAK6S,aACpBT,EAAO/O,oBAAoB,SAAUrD,KAAKoV,iBAC1ChD,EAAO/O,oBAAoB,oBAAqBrD,KAAKoV,gBAAe,CAExEpV,KAAKmV,QAAQ3P,UACjB,GACA,CAAAjF,IAAA,kBAAAC,MACA,WACSR,KAAKuV,eACNvV,KAAKwV,sBAET,IAAMC,EAAS,CAAEC,MAAO1V,KAAKuV,cAAcG,MAAOC,OAAQ3V,KAAKuV,cAAcI,QAE7E,OAAK3V,KAAKiQ,UAAUe,YAChBhR,KAAKuV,cAAgB,MAElBE,CACX,GACA,CAAAlV,IAAA,kBAAAC,MACA,WAUI,IAAMoV,EAAiB5V,KAAK6V,4BAC5BC,EAA0B9V,KAAKyN,kBAAvBiI,EAAKI,EAALJ,MAAOC,EAAMG,EAANH,OACf,MAAO,CACHzB,IAAK0B,EAAe1B,IACpBH,KAAM6B,EAAe7B,KACrBE,OAAQ2B,EAAe1B,IAAMyB,EAC7B3B,MAAO4B,EAAe7B,KAAO2B,EAC7BC,SACAD,QAER,GACA,CAAAnV,IAAA,4BAAAC,MACA,WAGI,IAAKR,KAAKiQ,UAAUe,UAChB,MAAO,CAAEkD,IAAK,EAAGH,KAAM,GAQ3B,IAAM7D,EAAWlQ,KAAKwQ,UAChB4B,EAASpS,KAAK6S,aACdkD,EAAkB7F,EAAS6F,gBAC3BC,EAAeD,EAAgBE,wBAWrC,MAAO,CAAE/B,KAVI8B,EAAa9B,KACtBhE,EAASgG,KAAKvB,WACdvC,EAAO+D,SACPJ,EAAgBpB,WAChB,EAMUZ,MALAiC,EAAajC,MACvB7D,EAASgG,KAAKtB,YACdxC,EAAOgE,SACPL,EAAgBnB,YAChB,EAER,GACA,CAAArU,IAAA,SAAAC,MAKA,WAA2C,IAApC6V,EAAY7W,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAGwV,GAClB,OAAOqB,EAAe,EAAIrW,KAAKmV,QAAQnS,QAAK0B,KAAU2R,IAAiBrW,KAAKmV,OAChF,GACA,CAAA5U,IAAA,aAAAC,MACA,WACI,OAAOR,KAAKwQ,UAAU2B,aAAeC,MACzC,GACA,CAAA7R,IAAA,sBAAAC,MACA,WACI,IAAM4R,EAASpS,KAAK6S,aACpB7S,KAAKuV,cAAgBvV,KAAKiQ,UAAUe,UAC9B,CAAE0E,MAAOtD,EAAOkE,WAAYX,OAAQvD,EAAOmE,aAC3C,CAAEb,MAAO,EAAGC,OAAQ,EAC9B,KAACV,CAAA,CAhHc,GAAbA,SAiHYhG,UAAI,SAAAC,GAAA,WAAAA,GAAwF+F,GA1cV7F,qBA0cyC0D,YA1czC1D,qBA0ciEA,UA1cjEA,qBA0cuF2D,YAAQ,KAjH7LkC,EAkHYjC,WA3ckF5D,+BAAE,CAAA6D,MA2cYgC,EAAa/B,QAAb+B,EAAahG,UAAAkE,WAAc,SAlHvI8B,CAAa,IA8HbuB,EAAqB,IAAIvK,iBAAe,sBAIxCwK,EAAoB,eAApBA,EAAoB,SAAAC,IAAAvX,OAAAsX,EAAAC,GAAA,IAAAtX,KAAAC,KAAAoX,GACtB,SAAAA,EAAYpD,EAAYC,EAAkBC,EAAQC,GAAKzT,cAAAC,KAAAyW,GAAArX,EAAAa,KAAAD,KAC7CqT,EAAYC,EAAkBC,EAAQC,EAChD,CACAlT,cAAAmW,EAAA,EAAAlW,IAAA,sBAAAC,MAKA,SAAoBmW,GAChB,IAAMC,EAAa5W,KAAKqT,WAAWZ,cACnC,MAAuB,eAAhBkE,EAA+BC,EAAWrC,YAAcqC,EAAWxC,YAC9E,KAACqC,CAAA,CAZqB,CAASrD,GAA7BqD,SAaYxH,UAAI,SAAAC,GAAA,WAAAA,GAAwFuH,GAxeVrH,8BAwegDA,cAxehDA,8BAwe0EW,GAxe1EX,8BAweuGA,UAxevGA,8BAwe6H2F,iBAAiB,KAb5O0B,EAcYtH,UAzekFC,8BAAE,CAAAC,KAyeJoH,EAAoBhH,SAAA,CAzelBL,0CA2d9FqH,CAAoB,IA+BpBI,UAA0BrO,sBAA0B,IAAcqB,IAA0BwB,IAE5FyL,GAAwB,eAAxBA,EAAwB,SAAAC,IAAA5X,OAAA2X,EAAAC,GAAA,IAAAC,KAAA3X,KAAAyX,GAqB1B,SAAAA,EAAYzD,EAAY4D,EAAoB1D,EAAQ5E,EAAiB6E,EAAKF,EAAkB4D,EAAezG,GAAY,IAAA0G,EAAApX,cAAAC,KAAA8W,IACnHK,EAAAH,EAAA/W,KAAAD,KAAMqT,EAAYC,EAAkBC,EAAQC,IACvCH,WAAaA,EAClB8D,EAAKF,mBAAqBA,EAC1BE,EAAKxI,gBAAkBA,EACvBwI,EAAK1G,WAAaA,EAClB0G,EAAKlH,aAAYmH,UAAOC,YAExBF,EAAKG,iBAAmB,IAAIzV,IAE5BsV,EAAKI,sBAAwB,IAAI1V,IACjCsV,EAAKK,aAAe,WACpBL,EAAKM,aAAc,EAMnBN,EAAK5K,oBAAsB,IAAI9H,IAAW,SAACwM,GAAQ,OAAKkG,EAAKxI,gBAAgBpC,oBAAoB7G,UAAU,SAAAgB,IAAK,OAAIoE,QAAQC,UAAUC,KAAK,kBAAMmM,EAAK5D,OAAOmE,IAAI,kBAAMzG,EAASzP,KAAKkF,GAAM,EAAC,EAAC,EAAC,GAE9LyQ,EAAKQ,oBAAsBR,EAAKI,sBAIhCJ,EAAKS,kBAAoB,EAEzBT,EAAKU,mBAAqB,GAE1BV,EAAKW,oBAAsB,GAE3BX,EAAKY,eAAiB,CAAEzK,MAAO,EAAGC,IAAK,GAEvC4J,EAAKa,YAAc,EAEnBb,EAAK5B,cAAgB,EAErB4B,EAAKc,uBAAyB,EAK9Bd,EAAKe,oCAAqC,EAE1Cf,EAAKgB,2BAA4B,EAEjChB,EAAKiB,yBAA2B,GAEhCjB,EAAKkB,iBAAmBvP,WAIxBqO,EAAKkB,iBAAmBnB,EAAc5B,SAAS5P,UAAU,WACrDyR,EAAKmB,mBACT,GACKnB,EAAK1G,aAEN0G,EAAK9D,WAAWZ,cAAc8F,UAAUrU,IAAI,0BAC5CiT,EAAK1G,cAAU+H,KAAArB,IAClBA,CACL,CAAC7W,cAAAwW,EAAA,EAAAvW,IAAA,cAAAsO,eA7EG,OAAO7O,KAAKwX,YAChB,EAAC1I,IACD,SAAgB6H,GACR3W,KAAKwX,eAAiBb,IACtB3W,KAAKwX,aAAeb,EACpB3W,KAAKyY,uBAEb,GACA,CAAAlY,IAAA,aAAAsO,IAIA,WACI,OAAO7O,KAAKyX,WAChB,EAAC3I,IACD,SAAetO,GACXR,KAAKyX,eAAciB,yBAAsBlY,EAC7C,GAAC,CAAAD,IAAA,WAAAC,MA6DD,WAAW,IAAAmY,EAAA3Y,KAEFA,KAAKiQ,UAAUe,YAGhBhR,KAAKyQ,aAAezQ,OAAA,EACpBa,QAAAC,KAAAgW,EAAA/V,WAAA,WAAAf,MAAAC,KAAAD,MAMJA,KAAKuT,OAAOX,kBAAkB,kBAAM9H,QAAQC,UAAUC,KAAK,WACvD2N,EAAKC,uBACLD,EAAKhK,gBAAgBkK,OAAOF,GAC5BA,EAAKlI,WACAE,kBACA3N,QAELyE,KAAU,OAAI,EAId/C,KAAU,EAAGmS,KACRnR,UAAU,kBAAMiT,EAAKhK,gBAAgBmK,mBAAmB,GAC7DH,EAAKI,4BACT,EAAE,GACN,GAAC,CAAAxY,IAAA,cAAAC,MACD,WACIR,KAAKgZ,SACLhZ,KAAK2O,gBAAgBqK,SAErBhZ,KAAKuX,sBAAsB/R,WAC3BxF,KAAKsX,iBAAiB9R,WACtBxF,KAAKqY,iBAAiB9S,eAAW,EACjC1E,QAAAC,KAAAgW,EAAA/V,WAAA,cAAAf,MAAAC,KAAAD,KACJ,GACA,CAAAO,IAAA,SAAAC,MACA,SAAOyY,GAAO,IAAAC,EAAAlZ,KAOVA,KAAKuT,OAAOX,kBAAkB,WAC1BsG,EAAKC,OAASF,EACdC,EAAKC,OAAOC,WAAWpW,QAAKiF,KAAUiR,EAAK5B,mBAAmB5R,UAAU,SAAA2T,GACpE,IAAMC,EAAYD,EAAK5Z,OACnB6Z,IAAcJ,EAAKlB,cACnBkB,EAAKlB,YAAcsB,EACnBJ,EAAKvK,gBAAgB4K,uBAEzBL,EAAKM,oBACT,EACJ,EACJ,GACA,CAAAjZ,IAAA,SAAAC,MACA,WACIR,KAAKmZ,OAAS,KACdnZ,KAAKsX,iBAAiB9V,MAC1B,GACA,CAAAjB,IAAA,gBAAAC,MACA,WACI,OAAOR,KAAKgY,WAChB,GACA,CAAAzX,IAAA,kBAAAC,MACA,WACI,OAAOR,KAAKuV,aAChB,GAKA,CAAAhV,IAAA,mBAAAC,MACA,WACI,OAAOR,KAAK+X,cAChB,GAAC,CAAAxX,IAAA,4CAAAC,MACD,SAA0C6B,GACtC,OAAOrC,KAAKwS,gBAAgBC,cAAcwD,wBAAwB5T,EACtE,GACA,CAAA9B,IAAA,sBAAAC,MAIA,SAAoBiZ,GACZzZ,KAAK4X,oBAAsB6B,IAC3BzZ,KAAK4X,kBAAoB6B,EACzBzZ,KAAKyY,uBACLzY,KAAK+Y,6BAEb,GACA,CAAAxY,IAAA,mBAAAC,MACA,SAAiBkZ,GAAO,IAAAC,EAAA3Z,MAxL5B,SAAS4Z,GAAYC,EAAIC,GACrB,OAAOD,EAAGvM,OAASwM,EAAGxM,OAASuM,EAAGtM,KAAOuM,EAAGvM,GAChD,EAuLaqM,CAAY5Z,KAAK+X,eAAgB2B,KAC9B1Z,KAAK+Z,aACLL,EAAQ,CAAEpM,MAAO,EAAGC,IAAKnN,KAAKC,IAAIL,KAAK+X,eAAexK,IAAKmM,EAAMnM,OAErEvN,KAAKuX,sBAAsB/V,KAAMxB,KAAK+X,eAAiB2B,GACvD1Z,KAAK+Y,2BAA2B,kBAAMY,EAAKhL,gBAAgBqL,mBAAmB,GAEtF,GACA,CAAAzZ,IAAA,kCAAAC,MAGA,WACI,OAAOR,KAAKkY,mCAAqC,KAAOlY,KAAKiY,sBACjE,GACA,CAAA1X,IAAA,2BAAAC,MAIA,SAAyByZ,GAAyB,IAAAC,EAAAla,KAAjBma,EAAE3a,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,WAElCya,EAASja,KAAK+Z,YAAqB,aAAPI,EAAoB,EAAIF,EAGpD,IACMG,EAAmC,cAApBpa,KAAK2W,YACpB0D,EAAOD,EAAe,IAAM,IAC5BE,EAAgBF,GAHRpa,KAAKwT,KAAyB,OAAlBxT,KAAKwT,IAAIhT,OAGW,EAAK,EAC/C+Z,EAAS,YAAAzY,OAAeuY,EAAI,KAAAvY,OAAI0Y,OAAOF,EAAgBL,GAAO,OAClEja,KAAKiY,uBAAyBgC,EACnB,WAAPE,IACAI,GAAS,aAAAzY,OAAiBuY,EAAI,WAI9Bra,KAAKkY,oCAAqC,GAE1ClY,KAAKya,2BAA6BF,IAGlCva,KAAKya,0BAA4BF,EACjCva,KAAK+Y,2BAA2B,WACxBmB,EAAKhC,oCACLgC,EAAKjC,wBAA0BiC,EAAKQ,6BACpCR,EAAKhC,oCAAqC,EAC1CgC,EAAK1L,yBAAyB0L,EAAKjC,yBAGnCiC,EAAKvL,gBAAgBgM,yBAE7B,GAER,GACA,CAAApa,IAAA,iBAAAC,MAOA,SAAeyZ,GAA2B,IAChCpX,EAAU,CAAEkK,SADSvN,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,QAEL,eAArBQ,KAAK2W,YACL9T,EAAQyK,MAAQ2M,EAGhBpX,EAAQqR,IAAM+F,EAElBja,KAAKyQ,WAAWiE,SAAS7R,EAC7B,GACA,CAAAtC,IAAA,gBAAAC,MAKA,SAAckG,GACV1G,KAAK2O,gBAAgBiM,cAAclU,EADVlH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,OAEhC,GACA,CAAAe,IAAA,sBAAAC,MAKA,SAAoB6B,GAAM,IAAAwY,EAAA7a,KAGtB,OAMOI,KAAKC,IAAI,GANZL,KAAKyQ,YAAczQ,KACG,SAAC8a,GAAK,SAAAja,QAAAC,KAAAgW,EAAA/V,WAAA,sBAAA8Z,GAAA5a,KAAA4a,EAA+BC,EAAK,EAG1C,SAACA,GAAK,OAAKD,EAAKpK,WAAW7C,oBAAoBkN,EAAM,GAExCzY,IAA8B,eAArBrC,KAAK2W,YAA+B,QAAU,QAC1F3W,KAAK+a,wBACb,GACA,CAAAxa,IAAA,wBAAAC,MAIA,SAAsB6B,GAAM,IAAA2Y,EACpBC,EACEpG,EAAO,OACPC,EAAQ,QACRhB,EAA2B,QAAX,QAARkH,EAAAhb,KAAKwT,WAAG,IAAAwH,OAAA,EAARA,EAAUxa,OAalB0a,EAAqBlb,KAAKyQ,WAAW0K,0CAXvCF,EADQ,SAAR5Y,EACWyR,EAAQgB,EAAQD,EAEd,OAARxS,EACMyR,EAAQe,EAAOC,EAErBzS,IAI2B,eAArBrC,KAAK2W,YAA+B,OAAS,QAI5D,OAD2B3W,KAAKqT,WAAWZ,cAAcwD,wBAAwBgF,GACrDC,CAChC,GACA,CAAA3a,IAAA,6BAAAC,MACA,WACI,IAAM4a,EAAYpb,KAAKqb,gBAAgB5I,cACvC,MAA4B,eAArBzS,KAAK2W,YAA+ByE,EAAUE,YAAcF,EAAUG,YACjF,GACA,CAAAhb,IAAA,mBAAAC,MAIA,SAAiBkZ,GACb,OAAK1Z,KAAKmZ,OAGHnZ,KAAKmZ,OAAOqC,iBAAiB9B,EAAO1Z,KAAK2W,aAFrC,CAGf,GACA,CAAApW,IAAA,oBAAAC,MACA,WAEIR,KAAK4Y,uBACL5Y,KAAK2O,gBAAgB4K,qBACzB,GACA,CAAAhZ,IAAA,uBAAAC,MACA,WACIR,KAAKuV,cAAgBvV,KAAKyQ,WAAWgL,oBAAoBzb,KAAK2W,YAClE,GACA,CAAApW,IAAA,6BAAAC,MACA,SAA2Bkb,GAAU,IAAAC,EAAA3b,KAC7B0b,GACA1b,KAAKoY,yBAAyB1X,KAAKgb,GAIlC1b,KAAKmY,4BACNnY,KAAKmY,2BAA4B,EACjCnY,KAAKuT,OAAOX,kBAAkB,kBAAM9H,QAAQC,UAAUC,KAAK,WACvD2Q,EAAKnC,oBACT,EAAE,GAEV,GACA,CAAAjZ,IAAA,qBAAAC,MACA,WAAqB,IAAAob,EAAA5b,KACjBA,KAAKmY,2BAA4B,EAKjCnY,KAAKqb,gBAAgB5I,cAAcoJ,MAAMtB,UAAYva,KAAKya,0BAI1Dza,KAAKuT,OAAOmE,IAAI,kBAAMkE,EAAK3E,mBAAmB6E,cAAc,GAC5D,IAAMC,EAA0B/b,KAAKoY,yBACrCpY,KAAKoY,yBAA2B,GAAG,IACK4D,EADLC,KAAAC,KAClBH,GAAuB,IAAxC,IAAAE,EAAAE,MAAAH,EAAAC,EAAAG,KAAAC,OACI1Q,EADSqQ,EAAAxb,QAEZ,OAAA8b,GAAAL,EAAAM,EAAAD,EAAA,SAAAL,EAAAO,GAAA,CACL,GACA,CAAAjc,IAAA,uBAAAC,MACA,WACIR,KAAK8X,oBACoB,eAArB9X,KAAK2W,YAA+B,GAAE,GAAA7U,OAAM9B,KAAK4X,kBAAiB,MACtE5X,KAAK6X,mBACoB,eAArB7X,KAAK2W,YAA4B,GAAA7U,OAAM9B,KAAK4X,kBAAiB,MAAO,EAC5E,KAACd,CAAA,CArWyB,CAASL,GAAjCK,SAsWY7H,UAAI,SAAAC,GAAA,WAAAA,GAAwF4H,GAl2BV1H,8BAk2BoDA,cAl2BpDA,8BAk2B8EA,qBAl2B9EA,8BAk2B+GA,UAl2B/GA,8BAk2BqIpD,EAAuB,GAl2B5JoD,8BAk2ByL2F,iBAAiB,GAl2B1M3F,8BAk2BuOW,GAl2BvOX,8BAk2BoQ6F,IAl2BpQ7F,8BAk2B8RoH,EAAkB,KAtW9YM,EAuWY2F,UAn2BkFrN,8BAAE,CAAAC,KAm2BJyH,EAAwBxH,UAAA,kCAAAoN,UAAA,SAAAC,EAAAC,GAn2BpB,IAAAC,EAm2BoB,EAAAF,GAn2BtBvN,wBAAEtD,GAAA,KAAA6Q,GAAFvN,2BAAEyN,EAAFzN,6BAAEwN,EAAAvB,gBAAAwB,EAAA1W,MAAA,EAAA2W,UAAA,kCAAAC,SAAA,EAAAC,aAAA,SAAAL,EAAAC,GAAA,EAAAD,GAAFvN,wBAAE,2DAAAwN,EAAAjG,YAAFvH,CAAE,yDAAAwN,EAAAjG,YAAA,EAAApH,OAAA,CAAAoH,YAAA,cAAAoD,WAAA,cAAAkD,QAAA,CAAA1Q,oBAAA,uBAAAiD,YAAA,EAAAC,SAAA,CAAFL,+BAm2B4c,CACpiB,CACIM,QAAS0D,EACTzD,WAAY,SAACuN,EAAmBtQ,GAAQ,OAAKsQ,GAAqBtQ,CAAQ,EAC1EgD,KAAM,CAAC,CAAC,IAAIuN,WAAY,IAAIC,SAAO5G,IAAsBM,MAv2B2B1H,wEAAEiO,mBAAAtR,GAAAuR,MAAA,EAAAC,KAAA,EAAAC,OAAA,iGAAAC,SAAA,SAAAd,EAAAC,GAAA,EAAAD,IAAFvN,yDAAE,aAAFA,yBAAE,GAAFA,iDAAE,YAy2BwmB,EAAAuN,IAz2B1mBvN,sBAAE,GAAFA,wBAAE,QAAAwN,EAAA/E,mBAAFzI,CAy2B4jB,SAAAwN,EAAA9E,qBAAA,EAAA4F,OAAA,yrDAAAC,cAAA,EAAAC,gBAAA,IA7W1pB9G,CAAwB,IAoZ9B,SAAS+G,GAAUlH,EAAamH,EAAWC,GAEvC,IADWA,EACH9H,sBACJ,OAAO,EAEX,IAAM+H,EAJKD,EAIK9H,wBAChB,MAAoB,eAAhBU,EACqB,UAAdmH,EAAwBE,EAAKjK,KAAOiK,EAAKhK,MAE/B,UAAd8J,EAAwBE,EAAK9J,IAAM8J,EAAK/J,MACnD,CACA,IAIMgK,GAAe,eAAfA,EAAe,WA6CjB,SAAAA,EAEAC,EAEAC,EAEAC,EAEAC,EAEA7R,EAAW+G,GAAQ,IAAA+K,EAAAte,MAAAD,OAAAC,KAAAie,GACfje,KAAKke,kBAAoBA,EACzBle,KAAKme,UAAYA,EACjBne,KAAKoe,SAAWA,EAChBpe,KAAKqe,cAAgBA,EACrBre,KAAKwM,UAAYA,EAEjBxM,KAAKue,WAAa,IAAI1c,IAEtB7B,KAAKwe,mBAAqB,IAAI3c,IAE9B7B,KAAKoZ,WAAapZ,KAAKwe,mBAAmBxb,QAE1CyE,KAAU,MChqCX,SAASgX,IACZ,SAAOzZ,KAAQ,SAACC,EAAQjE,GACpB,IAAI0d,EACAC,GAAU,EACd1Z,EAAOS,aAAUC,KAAyB3E,EAAY,SAACR,GACnD,IAAMoe,EAAIF,EACVA,EAAOle,EACPme,GAAW3d,EAAWQ,KAAK,CAACod,EAAGpe,IAC/Bme,GAAU,CACd,GACJ,EACJ,CDupCQF,IAAQ,EAIR9W,KAAU,SAAAzE,GAAA,IAAAc,KAAAC,KAAAf,EAAA,GAAW,OAAMob,EAAKO,kBAAhB7a,EAAA,GAAKA,EAAA,GAAuC,MAE5D4C,KAAY,IAEZ5G,KAAK8e,QAAU,KAEf9e,KAAK+e,cAAe,EACpB/e,KAAK0T,WAAa,IAAI7R,IACtB7B,KAAKoZ,WAAW1T,UAAU,SAAA2T,GACtBiF,EAAKU,MAAQ3F,EACbiF,EAAKW,uBACT,GACAjf,KAAKwM,UAAUmL,oBAAoB3U,QAAKiF,KAAUjI,KAAK0T,aAAahO,UAAU,SAAAgU,GAC1E4E,EAAKvG,eAAiB2B,EAClB4E,EAAKC,WAAWW,UAAUzf,QAC1B8T,EAAOmE,IAAI,kBAAM4G,EAAKC,WAAW/c,KAAK8c,EAAKvG,eAAe,GAE9DuG,EAAKW,uBACT,GACAjf,KAAKwM,UAAUqM,OAAO7Y,KAC1B,CACAM,cAAA2d,EAAA,EAAA1d,IAAA,kBAAAsO,eA5FI,OAAO7O,KAAKmf,gBAChB,EAACrQ,IACD,SAAoBtO,GAChBR,KAAKmf,iBAAmB3e,KACpB4e,gBAAa5e,GACbR,KAAKwe,mBAAmBhd,KAAKhB,GAI7BR,KAAKwe,mBAAmBhd,KAAK,IAAI6d,qBAAgB9T,KAAa/K,GAASA,EAAQyB,MAAMI,KAAK7B,GAAS,KAE3G,GACA,CAAAD,IAAA,uBAAAsO,IAIA,WACI,OAAO7O,KAAKsf,qBAChB,EAACxQ,IACD,SAAyBnD,GAAI,IAAA4T,EAAAvf,KACzBA,KAAK+e,cAAe,EACpB/e,KAAKsf,sBAAwB3T,EACvB,SAACjF,EAAO8Y,GAAI,OAAK7T,EAAGjF,GAAS6Y,EAAKxH,eAAiBwH,EAAKxH,eAAezK,MAAQ,GAAIkS,EAAK,OACxF9f,CACV,GACA,CAAAa,IAAA,wBAAAuO,IACA,SAA0BtO,GAClBA,IACAR,KAAK+e,cAAe,EACpB/e,KAAKme,UAAY3d,EAEzB,GACA,CAAAD,IAAA,iCAAAsO,IAIA,WACI,OAAO7O,KAAKqe,cAAcoB,aAC9B,EAAC3Q,IACD,SAAmC2K,GAC/BzZ,KAAKqe,cAAcoB,iBAAgB1Q,wBAAqB0K,EAC5D,GAAC,CAAAlZ,IAAA,mBAAAC,MAwDD,SAAiBkZ,EAAO/C,GACpB,GAAI+C,EAAMpM,OAASoM,EAAMnM,IACrB,OAAO,EAeX,QAHImS,EACAC,EANEC,EAAqBlG,EAAMpM,MAAQtN,KAAK+X,eAAezK,MAEvDuS,EAAWnG,EAAMnM,IAAMmM,EAAMpM,MAM1BhM,EAAI,EAAGA,EAAIue,EAAUve,IAAK,CAC/B,IAAMwe,EAAO9f,KAAKke,kBAAkBrP,IAAIvN,EAAIse,GAC5C,GAAIE,GAAQA,EAAKC,UAAUtgB,OAAQ,CAC/BigB,EAAYC,EAAWG,EAAKC,UAAU,GACtC,OAIR,QAASze,EAAIue,EAAW,EAAGve,GAAI,EAAIA,IAAK,CACpC,IAAMwe,EAAO9f,KAAKke,kBAAkBrP,IAAIvN,EAAIse,GAC5C,GAAIE,GAAQA,EAAKC,UAAUtgB,OAAQ,CAC/BkgB,EAAWG,EAAKC,UAAUD,EAAKC,UAAUtgB,OAAS,GAClD,OAGR,OAAOigB,GAAaC,EACd9B,GAAUlH,EAAa,MAAOgJ,GAAY9B,GAAUlH,EAAa,QAAS+I,GAC1E,CACV,GAAC,CAAAnf,IAAA,YAAAC,MACD,WACI,GAAIR,KAAK8e,SAAW9e,KAAK+e,aAAc,CAInC,IAAMiB,EAAUhgB,KAAK8e,QAAQmB,KAAKjgB,KAAKkgB,gBAClCF,EAIDhgB,KAAKmgB,cAAcH,GAHnBhgB,KAAKogB,iBAKTpgB,KAAK+e,cAAe,EAE5B,GAAC,CAAAxe,IAAA,cAAAC,MACD,WACIR,KAAKwM,UAAUwM,SACfhZ,KAAKwe,mBAAmBhd,UAAK9B,GAC7BM,KAAKwe,mBAAmBhZ,WACxBxF,KAAKue,WAAW/Y,WAChBxF,KAAK0T,WAAWlS,OAChBxB,KAAK0T,WAAWlO,WAChBxF,KAAKqe,cAAcrF,QACvB,GACA,CAAAzY,IAAA,wBAAAC,MACA,WAAwB,IAAA6f,EAAArgB,KACfA,KAAK+X,iBAGV/X,KAAKkgB,eAAiBlgB,KAAKgf,MAAM3d,MAAMrB,KAAK+X,eAAezK,MAAOtN,KAAK+X,eAAexK,KACjFvN,KAAK8e,UAGN9e,KAAK8e,QAAU9e,KAAKoe,SAASkC,KAAKtgB,KAAKkgB,gBAAgBK,OAAO,SAAC7Z,EAAO8Y,GAClE,OAAOa,EAAKG,qBAAuBH,EAAKG,qBAAqB9Z,EAAO8Y,GAAQA,CAChF,IAEJxf,KAAK+e,cAAe,EACxB,GACA,CAAAxe,IAAA,oBAAAC,MACA,SAAkBigB,EAAOC,GACrB,OAAID,GACAA,EAAME,WAAW3gB,MAErBA,KAAK+e,cAAe,EACb2B,EAAQA,EAAME,QAAQ5gB,OAAI,EAAIoR,OACzC,GACA,CAAA7Q,IAAA,iBAAAC,MACA,WAGI,QAFMqgB,EAAQ7gB,KAAKgf,MAAMvf,OACrB6B,EAAItB,KAAKke,kBAAkBze,OACxB6B,KAAK,CACR,IAAMwe,EAAO9f,KAAKke,kBAAkBrP,IAAIvN,GACxCwe,EAAKgB,QAAQpa,MAAQ1G,KAAK+X,eAAezK,MAAQhM,EACjDwe,EAAKgB,QAAQD,MAAQA,EACrB7gB,KAAK+gB,iCAAiCjB,EAAKgB,SAC3ChB,EAAKkB,eAAa,CAE1B,GACA,CAAAzgB,IAAA,gBAAAC,MACA,SAAcwf,GAAS,IAAAiB,EAAAjhB,KACnBA,KAAKqe,cAAc6C,aAAalB,EAAShgB,KAAKke,kBAAmB,SAACiD,EAAQC,EAAwBC,GAAY,OAAKJ,EAAKK,qBAAqBH,EAAQE,EAAa,EAAE,SAAAF,GAAM,OAAIA,EAAO3B,IAAI,GAEzLQ,EAAQuB,sBAAsB,SAACJ,GACdF,EAAK/C,kBAAkBrP,IAAIsS,EAAOE,cAC1CP,QAAQU,UAAYL,EAAO3B,IACpC,GAIA,QAFMqB,EAAQ7gB,KAAKgf,MAAMvf,OACrB6B,EAAItB,KAAKke,kBAAkBze,OACxB6B,KAAK,CACR,IAAMwe,EAAO9f,KAAKke,kBAAkBrP,IAAIvN,GACxCwe,EAAKgB,QAAQpa,MAAQ1G,KAAK+X,eAAezK,MAAQhM,EACjDwe,EAAKgB,QAAQD,MAAQA,EACrB7gB,KAAK+gB,iCAAiCjB,EAAKgB,QAAO,CAE1D,GACA,CAAAvgB,IAAA,mCAAAC,MACA,SAAiCsgB,GAC7BA,EAAQ3a,MAA0B,IAAlB2a,EAAQpa,MACxBoa,EAAQlf,KAAOkf,EAAQpa,QAAUoa,EAAQD,MAAQ,EACjDC,EAAQW,KAAOX,EAAQpa,MAAQ,GAAM,EACrCoa,EAAQY,KAAOZ,EAAQW,IAC3B,GAAC,CAAAlhB,IAAA,uBAAAC,MACD,SAAqB2gB,EAAQza,GAKzB,MAAO,CACHib,YAAa3hB,KAAKme,UAClB2C,QAAS,CACLU,UAAWL,EAAO3B,KAGlBoC,gBAAiB5hB,KAAKmf,iBACtBzY,OAAO,EACPma,OAAO,EACP1a,OAAO,EACPvE,MAAM,EACN8f,KAAK,EACLD,MAAM,GAEV/a,QAER,KAACuX,CAAA,CAjPgB,GAAfA,SAkPYhP,UAAI,SAAAC,GAAA,WAAAA,GAAwF+O,GAjpCV7O,8BAipC2CA,oBAjpC3CA,8BAipC2EA,eAjpC3EA,8BAipCsGA,mBAjpCtGA,8BAipCqIyS,2BAjpCrIzS,8BAipCyK0H,GAAwB,GAjpCjM1H,8BAipC8NA,UAAS,EAlPrU6O,EAmPY9O,UAlpCkFC,8BAAE,CAAAC,KAkpCJ4O,EAAe3O,UAAA,+CAAAC,OAAA,CAAAqS,gBAAA,kBAAApB,qBAAA,uBAAAsB,sBAAA,wBAAAC,+BAAA,kCAAAvS,YAAA,EAAAC,SAAA,CAlpCbL,+BAkpC4S,CAAC,CAAEM,QAASmS,0BAAyBG,SAAUC,qCAnPzbhE,CAAe,IA8QfiE,GAA2B,eAA3BA,EAA2B,SAAAC,IAAAhjB,OAAA+iB,EAAAC,GAAA,IAAAC,KAAA/iB,KAAA6iB,GAC7B,SAAAA,EAAY7O,EAAYC,EAAkBC,EAAQC,GAAKzT,cAAAC,KAAAkiB,GAAAE,EAAAniB,KAAAD,KAC7CqT,EAAYC,EAAkBC,EAAQC,EAChD,CAAClT,cAAA4hB,EAAA,EAAA3hB,IAAA,4CAAAC,MACD,SAA0C6B,GACtC,OAAQrC,KAAKwS,gBAAgBC,cAAcwD,wBAAwB5T,GAC/DrC,KAAK4N,oBAAoBvL,EACjC,KAAC6f,CAAA,CAP4B,CAASzL,GAApCyL,SAQYjT,UAAI,SAAAC,GAAA,WAAAA,GAAwFgT,GArrCV9S,8BAqrCuDA,cArrCvDA,8BAqrCiFW,GArrCjFX,8BAqrC8GA,UArrC9GA,8BAqrCoI2F,iBAAiB,KARnPmN,EASY/S,UAtrCkFC,8BAAE,CAAAC,KAsrCJ6S,EAA2B5S,UAAA,uCAAAwN,UAAA,6BAAAtN,YAAA,EAAAC,SAAA,CAtrCzBL,+BAsrCwJ,CAAC,CAAEM,QAAS8G,EAAoB6L,YAAaH,KAtrCrM9S,0CA6qC9F8S,CAA2B,IA4B3BI,GAA0B,eAA1BA,EAA0B,SAAAC,IAAApjB,OAAAmjB,EAAAC,GAAA,IAAAC,KAAAnjB,KAAAijB,GAC5B,SAAAA,EAAYhP,EAAkBC,EAAQC,GAAK,IAAAiP,EAAA1iB,cAAAC,KAAAsiB,IACvCG,EAAAD,EAAAviB,KAAAD,KAAM,IAAI0iB,aAAWxS,SAAS6F,iBAAkBzC,EAAkBC,EAAQC,IACrEG,iBAAmB,IAAIlP,IAAW,SAACwM,GAAQ,OAAKwR,EAAKlP,OAAOX,kBAAkB,oBAAMlQ,KAAUwN,SAAU,UAAUlN,QAAKiF,KAAUwa,EAAK/O,aAAahO,UAAUuL,EAAS,EAAC,GAAEwR,CAClL,CAACniB,cAAAgiB,EAAA,EAAA/hB,IAAA,4CAAAC,MACD,SAA0C6B,GACtC,OAAOrC,KAAKwS,gBAAgBC,cAAcwD,wBAAwB5T,EACtE,KAACigB,CAAA,CAP2B,CAAS7L,GAAnC6L,SAQYrT,UAAI,SAAAC,GAAA,WAAAA,GAAwFoT,GAjtCVlT,8BAitCsDW,GAjtCtDX,8BAitCmFA,UAjtCnFA,8BAitCyG2F,iBAAiB,KARxNuN,EASYnT,UAltCkFC,8BAAE,CAAAC,KAktCJiT,EAA0BhT,UAAA,oDAAAE,YAAA,EAAAC,SAAA,CAltCxBL,+BAktCgH,CAAC,CAAEM,QAAS8G,EAAoB6L,YAAaC,KAltC7JlT,0CAysC9FkT,CAA0B,IAsB1BK,GAAmB,eAAnBA,GAAmBriB,OAAA,SAAAqiB,KAAA5iB,OAAAC,KAAA2iB,EAAA,GAAnBA,SACY1T,UAAI,SAAAC,GAAA,WAAAA,GAAwFyT,EAAmB,EAD3HA,EAEYC,UAjuCkFxT,6BAAE,CAAAC,KAiuCSsT,IAFzGA,EAGYE,UAluCkFzT,6BAAE,IA+tChGuT,CAAmB,IAenBG,GAAe,eAAfA,GAAexiB,OAAA,SAAAwiB,KAAA/iB,OAAAC,KAAA8iB,EAAA,GAAfA,SACY7T,UAAI,SAAAC,GAAA,WAAAA,GAAwF4T,EAAe,EADvHA,EAEYF,UAhvCkFxT,6BAAE,CAAAC,KAgvCSyT,IAFzGA,EAWYD,UAzvCkFzT,6BAAE,CAAA2T,QAAA,CAyvCoCC,aAC9HL,GAAqBK,aAAYL,MAZvCG,CAAe,oBE76CN,SAAAG,EAAAC,GACf,GAAAjhB,MAAAyJ,QAAAwX,GAAA,OAAAA,CACA,kCCFe,SAAAC,IACf,UAAA3e,UAAA,4IACA,uFCEe,SAAAP,EAAAif,EAAA5hB,GACf,SAAS8hB,EAAAC,GAAcH,ICLR,SAAAI,EAAAJ,EAAA5hB,GACf,IAAAiiB,EAAA,MAAAL,EAAA,YAAAM,OAAA,KAAAN,EAAAM,OAAAC,WAAAP,EAAA,cACA,SAAAK,EAAA,CACA,IAAAG,EACAC,EACAC,EACAC,EACAC,EAAA,GACAC,GAAA,EACAC,GAAA,EACA,IACA,GAAAJ,GAAAL,IAAAtjB,KAAAijB,IAAA1hB,KAAA,IAAAF,EAAA,CACA,GAAA2iB,OAAAV,OAAA,OACAQ,GAAA,OACQ,OAAYA,GAAAL,EAAAE,EAAA3jB,KAAAsjB,IAAAlH,QAAAyH,EAAApjB,KAAAgjB,EAAAljB,OAAAsjB,EAAArkB,SAAA6B,GAA6EyiB,GAAA,GACjG,OAAMzH,GACN0H,GAAA,EAAAL,EAAArH,CACA,SACA,IACA,IAAAyH,GAAA,MAAAR,EAAAW,SAAAL,EAAAN,EAAAW,SAAAD,OAAAJ,QAAA,MACA,SACA,GAAAG,EAAA,MAAAL,CACA,CACA,CACA,OAAAG,CAAA,CAEA,CDrBgCR,CAAoBJ,EAAA5hB,KAAA,EAAY6iB,EAAAd,GAA0BH,EAAA5hB,KAAA,EAAY8iB,EAAAf,IACtG","names":["ReplaySubject","_Subject","_inherits","_super","_createSuper","_this","_bufferSize","arguments","length","undefined","Infinity","_windowTime","_timestampProvider","dateTimestampProvider","_classCallCheck","this","call","_buffer","_infiniteTimeWindow","Math","max","_createClass","key","value","isStopped","push","now","_trimBuffer","_get","_getPrototypeOf","prototype","subscriber","_throwIfClosed","subscription","_innerSubscribe","copy","slice","i","closed","next","_checkFinalizedStatuses","adjustedBufferSize","splice","last","Subject","concat","_len","args","Array","_key","concatAll","mergeAll","from","popScheduler","nodeEventEmitterMethods","eventTargetMethods","jqueryMethods","fromEvent","target","eventName","options","resultSelector","isFunction","pipe","mapOneOrManyArgs","_ref","isEventTarget","addEventListener","removeEventListener","map","methodName","handler","isNodeStyleEventEmitter","addListener","removeListener","toCommonHandlerRegistry","isJQueryStyleEventEmitter","on","off","_ref2","_slicedToArray","add","remove","isArrayLike","mergeMap","subTarget","innerFrom","TypeError","Observable","auditTime","duration","scheduler","asyncScheduler","audit","durationSelector","operate","source","hasValue","lastValue","durationSubscriber","isComplete","endDuration","unsubscribe","complete","cleanupDuration","subscribe","createOperatorSubscriber","timer","distinctUntilChanged","comparator","keySelector","identity","defaultCompare","previousKey","first","currentKey","a","b","filter","predicate","thisArg","index","project","shareReplay","configOrBufferSize","windowTime","bufferSize","refCount","_configOrBufferSize$b","_configOrBufferSize$w","_configOrBufferSize$r","share","connector","resetOnError","resetOnComplete","resetOnRefCountZero","startWith","values","switchMap","innerSubscriber","checkComplete","innerIndex","outerIndex","innerValue","takeUntil","notifier","noop","animationFrameProvider","schedule","callback","request","requestAnimationFrame","cancel","cancelAnimationFrame","delegate","handle","timestamp","Subscription","_requestAnimationFrame","apply","toString","_cancelAnimationFrame","AnimationFrameAction","_AsyncAction","work","id","delay","actions","_scheduled","flush","_a","AsyncAction","animationFrameScheduler","_AsyncScheduler","AnimationFrameScheduler","action","_active","flushId","error","shift","execute","state","AsyncScheduler","resolved","nextHandle","activeHandles","findAndClearHandle","setImmediate","cb","Promise","resolve","then","clearImmediate","immediateProvider","AsapAction","bind","asapScheduler","AsapScheduler","isObservable","obj","lift","isArray","fn","callOrApply","_toConsumableArray","_c0","_c1","VIRTUAL_SCROLL_STRATEGY","InjectionToken","FixedSizeVirtualScrollStrategy","itemSize","minBufferPx","maxBufferPx","_scrolledIndexChange","scrolledIndexChange","_viewport","_itemSize","_minBufferPx","_maxBufferPx","viewport","_updateTotalContentSize","_updateRenderedRange","behavior","scrollToOffset","setTotalContentSize","getDataLength","renderedRange","getRenderedRange","newRange","start","end","viewportSize","getViewportSize","dataLength","scrollOffset","measureScrollOffset","firstVisibleIndex","maxVisibleItems","ceil","newVisibleIndex","min","floor","startBuffer","expandStart","endBuffer","expandEnd","setRenderedRange","setRenderedContentOffset","_fixedSizeVirtualScrollStrategyFactory","fixedSizeDir","_scrollStrategy","CdkFixedSizeVirtualScroll","get","set","coerceNumberProperty","updateItemAndBufferSize","ɵfac","t","ɵdir","i0","type","selectors","inputs","standalone","features","provide","useFactory","deps","forwardRef","DEFAULT_SCROLL_TIME","ScrollDispatcher","_ngZone","_platform","document","_scrolled","_globalSubscription","_scrolledCount","scrollContainers","Map","_document","scrollable","has","elementScrolled","scrollableReference","delete","_this2","auditTimeInMs","isBrowser","observer","_addGlobalListener","_removeGlobalListener","of","_this3","forEach","_","container","deregister","elementOrElementRef","ancestors","getAncestorScrollContainers","scrolled","indexOf","_this4","scrollingContainers","_subscription","_scrollableContainsElement","defaultView","window","element","coerceElement","scrollableElement","getElementRef","nativeElement","parentElement","_this5","runOutsideAngular","_getWindow","i1","DOCUMENT","ɵprov","token","factory","providedIn","CdkScrollable","elementRef","scrollDispatcher","ngZone","dir","_this6","_destroyed","_elementScrolled","register","el","isRtl","left","right","bottom","top","scrollHeight","clientHeight","getRtlScrollAxisType","scrollWidth","clientWidth","_applyScrollToOptions","supportsScrollBehavior","scrollTo","scrollTop","scrollLeft","LEFT","RIGHT","i2","DEFAULT_RESIZE_TIME","ViewportRuler","_this7","_change","_changeListener","event","change","_viewportSize","_updateViewportSize","output","width","height","scrollPosition","getViewportScrollPosition","_this$getViewportSize","documentElement","documentRect","getBoundingClientRect","body","scrollY","scrollX","throttleTime","innerWidth","innerHeight","VIRTUAL_SCROLLABLE","CdkVirtualScrollable","_CdkScrollable","orientation","viewportEl","SCROLL_SCHEDULER","CdkVirtualScrollViewport","_CdkVirtualScrollable","_super2","_changeDetectorRef","viewportRuler","_this8","inject","Platform","_detachedSubject","_renderedRangeSubject","_orientation","_appendOnly","run","renderedRangeStream","_totalContentSize","_totalContentWidth","_totalContentHeight","_renderedRange","_dataLength","_renderedContentOffset","_renderedContentOffsetNeedsRewrite","_isChangeDetectionPending","_runAfterChangeDetection","_viewportChanges","checkViewportSize","classList","_assertThisInitialized","_calculateSpacerSize","coerceBooleanProperty","_this9","_measureViewportSize","attach","onContentScrolled","_markChangeDetectionNeeded","detach","forOf","_this10","_forOf","dataStream","data","newLength","onDataLengthChanged","_doChangeDetection","size","range","_this11","rangesEqual","r1","r2","appendOnly","onContentRendered","offset","_this12","to","isHorizontal","axis","axisDirection","transform","Number","_renderedContentTransform","measureRenderedContentSize","onRenderedOffsetChanged","scrollToIndex","_this13","_from","measureViewportOffset","_this$dir","fromRect","scrollerClientRect","measureBoundingClientRectWithScrollOffset","contentEl","_contentWrapper","offsetWidth","offsetHeight","measureRangeSize","measureViewportSize","runAfter","_this14","_this15","style","markForCheck","runAfterChangeDetection","_step","_iterator","_createForOfIteratorHelper","s","n","done","err","e","f","ɵcmp","viewQuery","rf","ctx","_t","hostAttrs","hostVars","hostBindings","outputs","virtualScrollable","Optional","Inject","ngContentSelectors","decls","vars","consts","template","styles","encapsulation","changeDetection","getOffset","direction","node","rect","CdkVirtualForOf","_viewContainerRef","_template","_differs","_viewRepeater","_this16","viewChange","_dataSourceChanges","pairwise","prev","hasPrev","p","_changeDataSource","_differ","_needsUpdate","_data","_onRenderedDataChange","observers","_cdkVirtualForOf","isDataSource","ArrayDataSource","_cdkVirtualForTrackBy","_this17","item","viewCacheSize","firstNode","lastNode","renderedStartIndex","rangeLen","view","rootNodes","changes","diff","_renderedItems","_applyChanges","_updateContext","_this18","find","create","cdkVirtualForTrackBy","oldDs","newDs","disconnect","connect","count","context","_updateComputedContextProperties","detectChanges","_this19","applyChanges","record","_adjustedPreviousIndex","currentIndex","_getEmbeddedViewArgs","forEachIdentityChange","$implicit","even","odd","templateRef","cdkVirtualForOf","_VIEW_REPEATER_STRATEGY","cdkVirtualForTemplate","cdkVirtualForTemplateCacheSize","useClass","_RecycleViewRepeaterStrategy","CdkVirtualScrollableElement","_CdkVirtualScrollable2","_super3","useExisting","CdkVirtualScrollableWindow","_CdkVirtualScrollable3","_super4","_this20","ElementRef","CdkScrollableModule","ɵmod","ɵinj","ScrollingModule","imports","BidiModule","_arrayWithHoles","arr","_nonIterableRest","arrayWithHoles","Z","_iterableToArrayLimit","_i","Symbol","iterator","_s","_e","_x","_r","_arr","_n","_d","Object","return","unsupportedIterableToArray","nonIterableRest"],"sourceRoot":"webpack:///","sources":["./node_modules/rxjs/dist/esm/internal/ReplaySubject.js","./node_modules/rxjs/dist/esm/internal/observable/concat.js","./node_modules/rxjs/dist/esm/internal/operators/concatAll.js","./node_modules/rxjs/dist/esm/internal/observable/fromEvent.js","./node_modules/rxjs/dist/esm/internal/operators/auditTime.js","./node_modules/rxjs/dist/esm/internal/operators/audit.js","./node_modules/rxjs/dist/esm/internal/operators/distinctUntilChanged.js","./node_modules/rxjs/dist/esm/internal/operators/filter.js","./node_modules/rxjs/dist/esm/internal/operators/map.js","./node_modules/rxjs/dist/esm/internal/operators/mergeAll.js","./node_modules/rxjs/dist/esm/internal/operators/shareReplay.js","./node_modules/rxjs/dist/esm/internal/operators/startWith.js","./node_modules/rxjs/dist/esm/internal/operators/switchMap.js","./node_modules/rxjs/dist/esm/internal/operators/takeUntil.js","./node_modules/rxjs/dist/esm/internal/scheduler/animationFrameProvider.js","./node_modules/rxjs/dist/esm/internal/scheduler/AnimationFrameAction.js","./node_modules/rxjs/dist/esm/internal/scheduler/animationFrame.js","./node_modules/rxjs/dist/esm/internal/scheduler/AnimationFrameScheduler.js","./node_modules/rxjs/dist/esm/internal/util/Immediate.js","./node_modules/rxjs/dist/esm/internal/scheduler/immediateProvider.js","./node_modules/rxjs/dist/esm/internal/scheduler/AsapAction.js","./node_modules/rxjs/dist/esm/internal/scheduler/asap.js","./node_modules/rxjs/dist/esm/internal/scheduler/AsapScheduler.js","./node_modules/rxjs/dist/esm/internal/util/isObservable.js","./node_modules/rxjs/dist/esm/internal/util/mapOneOrManyArgs.js","./node_modules/@angular/cdk/fesm2022/scrolling.mjs","./node_modules/rxjs/dist/esm/internal/operators/pairwise.js","./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","./node_modules/@babel/runtime/helpers/esm/slicedToArray.js","./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js"],"sourcesContent":["import { Subject } from './Subject';\nimport { dateTimestampProvider } from './scheduler/dateTimestampProvider';\nexport class ReplaySubject extends Subject {\n    constructor(_bufferSize = Infinity, _windowTime = Infinity, _timestampProvider = dateTimestampProvider) {\n        super();\n        this._bufferSize = _bufferSize;\n        this._windowTime = _windowTime;\n        this._timestampProvider = _timestampProvider;\n        this._buffer = [];\n        this._infiniteTimeWindow = true;\n        this._infiniteTimeWindow = _windowTime === Infinity;\n        this._bufferSize = Math.max(1, _bufferSize);\n        this._windowTime = Math.max(1, _windowTime);\n    }\n    next(value) {\n        const { isStopped, _buffer, _infiniteTimeWindow, _timestampProvider, _windowTime } = this;\n        if (!isStopped) {\n            _buffer.push(value);\n            !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);\n        }\n        this._trimBuffer();\n        super.next(value);\n    }\n    _subscribe(subscriber) {\n        this._throwIfClosed();\n        this._trimBuffer();\n        const subscription = this._innerSubscribe(subscriber);\n        const { _infiniteTimeWindow, _buffer } = this;\n        const copy = _buffer.slice();\n        for (let i = 0; i < copy.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2) {\n            subscriber.next(copy[i]);\n        }\n        this._checkFinalizedStatuses(subscriber);\n        return subscription;\n    }\n    _trimBuffer() {\n        const { _bufferSize, _timestampProvider, _buffer, _infiniteTimeWindow } = this;\n        const adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;\n        _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);\n        if (!_infiniteTimeWindow) {\n            const now = _timestampProvider.now();\n            let last = 0;\n            for (let i = 1; i < _buffer.length && _buffer[i] <= now; i += 2) {\n                last = i;\n            }\n            last && _buffer.splice(0, last + 1);\n        }\n    }\n}\n","import { concatAll } from '../operators/concatAll';\nimport { popScheduler } from '../util/args';\nimport { from } from './from';\nexport function concat(...args) {\n    return concatAll()(from(args, popScheduler(args)));\n}\n","import { mergeAll } from './mergeAll';\nexport function concatAll() {\n    return mergeAll(1);\n}\n","import { innerFrom } from '../observable/innerFrom';\nimport { Observable } from '../Observable';\nimport { mergeMap } from '../operators/mergeMap';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isFunction } from '../util/isFunction';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nconst nodeEventEmitterMethods = ['addListener', 'removeListener'];\nconst eventTargetMethods = ['addEventListener', 'removeEventListener'];\nconst jqueryMethods = ['on', 'off'];\nexport function fromEvent(target, eventName, options, resultSelector) {\n    if (isFunction(options)) {\n        resultSelector = options;\n        options = undefined;\n    }\n    if (resultSelector) {\n        return fromEvent(target, eventName, options).pipe(mapOneOrManyArgs(resultSelector));\n    }\n    const [add, remove] = isEventTarget(target)\n        ? eventTargetMethods.map((methodName) => (handler) => target[methodName](eventName, handler, options))\n        :\n            isNodeStyleEventEmitter(target)\n                ? nodeEventEmitterMethods.map(toCommonHandlerRegistry(target, eventName))\n                : isJQueryStyleEventEmitter(target)\n                    ? jqueryMethods.map(toCommonHandlerRegistry(target, eventName))\n                    : [];\n    if (!add) {\n        if (isArrayLike(target)) {\n            return mergeMap((subTarget) => fromEvent(subTarget, eventName, options))(innerFrom(target));\n        }\n    }\n    if (!add) {\n        throw new TypeError('Invalid event target');\n    }\n    return new Observable((subscriber) => {\n        const handler = (...args) => subscriber.next(1 < args.length ? args : args[0]);\n        add(handler);\n        return () => remove(handler);\n    });\n}\nfunction toCommonHandlerRegistry(target, eventName) {\n    return (methodName) => (handler) => target[methodName](eventName, handler);\n}\nfunction isNodeStyleEventEmitter(target) {\n    return isFunction(target.addListener) && isFunction(target.removeListener);\n}\nfunction isJQueryStyleEventEmitter(target) {\n    return isFunction(target.on) && isFunction(target.off);\n}\nfunction isEventTarget(target) {\n    return isFunction(target.addEventListener) && isFunction(target.removeEventListener);\n}\n","import { asyncScheduler } from '../scheduler/async';\nimport { audit } from './audit';\nimport { timer } from '../observable/timer';\nexport function auditTime(duration, scheduler = asyncScheduler) {\n    return audit(() => timer(duration, scheduler));\n}\n","import { operate } from '../util/lift';\nimport { innerFrom } from '../observable/innerFrom';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function audit(durationSelector) {\n    return operate((source, subscriber) => {\n        let hasValue = false;\n        let lastValue = null;\n        let durationSubscriber = null;\n        let isComplete = false;\n        const endDuration = () => {\n            durationSubscriber === null || durationSubscriber === void 0 ? void 0 : durationSubscriber.unsubscribe();\n            durationSubscriber = null;\n            if (hasValue) {\n                hasValue = false;\n                const value = lastValue;\n                lastValue = null;\n                subscriber.next(value);\n            }\n            isComplete && subscriber.complete();\n        };\n        const cleanupDuration = () => {\n            durationSubscriber = null;\n            isComplete && subscriber.complete();\n        };\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            hasValue = true;\n            lastValue = value;\n            if (!durationSubscriber) {\n                innerFrom(durationSelector(value)).subscribe((durationSubscriber = createOperatorSubscriber(subscriber, endDuration, cleanupDuration)));\n            }\n        }, () => {\n            isComplete = true;\n            (!hasValue || !durationSubscriber || durationSubscriber.closed) && subscriber.complete();\n        }));\n    });\n}\n","import { identity } from '../util/identity';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function distinctUntilChanged(comparator, keySelector = identity) {\n    comparator = comparator !== null && comparator !== void 0 ? comparator : defaultCompare;\n    return operate((source, subscriber) => {\n        let previousKey;\n        let first = true;\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            const currentKey = keySelector(value);\n            if (first || !comparator(previousKey, currentKey)) {\n                first = false;\n                previousKey = currentKey;\n                subscriber.next(value);\n            }\n        }));\n    });\n}\nfunction defaultCompare(a, b) {\n    return a === b;\n}\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function filter(predicate, thisArg) {\n    return operate((source, subscriber) => {\n        let index = 0;\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => predicate.call(thisArg, value, index++) && subscriber.next(value)));\n    });\n}\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function map(project, thisArg) {\n    return operate((source, subscriber) => {\n        let index = 0;\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            subscriber.next(project.call(thisArg, value, index++));\n        }));\n    });\n}\n","import { mergeMap } from './mergeMap';\nimport { identity } from '../util/identity';\nexport function mergeAll(concurrent = Infinity) {\n    return mergeMap(identity, concurrent);\n}\n","import { ReplaySubject } from '../ReplaySubject';\nimport { share } from './share';\nexport function shareReplay(configOrBufferSize, windowTime, scheduler) {\n    let bufferSize;\n    let refCount = false;\n    if (configOrBufferSize && typeof configOrBufferSize === 'object') {\n        ({ bufferSize = Infinity, windowTime = Infinity, refCount = false, scheduler } = configOrBufferSize);\n    }\n    else {\n        bufferSize = (configOrBufferSize !== null && configOrBufferSize !== void 0 ? configOrBufferSize : Infinity);\n    }\n    return share({\n        connector: () => new ReplaySubject(bufferSize, windowTime, scheduler),\n        resetOnError: true,\n        resetOnComplete: false,\n        resetOnRefCountZero: refCount,\n    });\n}\n","import { concat } from '../observable/concat';\nimport { popScheduler } from '../util/args';\nimport { operate } from '../util/lift';\nexport function startWith(...values) {\n    const scheduler = popScheduler(values);\n    return operate((source, subscriber) => {\n        (scheduler ? concat(values, source, scheduler) : concat(values, source)).subscribe(subscriber);\n    });\n}\n","import { innerFrom } from '../observable/innerFrom';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function switchMap(project, resultSelector) {\n    return operate((source, subscriber) => {\n        let innerSubscriber = null;\n        let index = 0;\n        let isComplete = false;\n        const checkComplete = () => isComplete && !innerSubscriber && subscriber.complete();\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            innerSubscriber === null || innerSubscriber === void 0 ? void 0 : innerSubscriber.unsubscribe();\n            let innerIndex = 0;\n            const outerIndex = index++;\n            innerFrom(project(value, outerIndex)).subscribe((innerSubscriber = createOperatorSubscriber(subscriber, (innerValue) => subscriber.next(resultSelector ? resultSelector(value, innerValue, outerIndex, innerIndex++) : innerValue), () => {\n                innerSubscriber = null;\n                checkComplete();\n            })));\n        }, () => {\n            isComplete = true;\n            checkComplete();\n        }));\n    });\n}\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\nimport { noop } from '../util/noop';\nexport function takeUntil(notifier) {\n    return operate((source, subscriber) => {\n        innerFrom(notifier).subscribe(createOperatorSubscriber(subscriber, () => subscriber.complete(), noop));\n        !subscriber.closed && source.subscribe(subscriber);\n    });\n}\n","import { Subscription } from '../Subscription';\nexport const animationFrameProvider = {\n    schedule(callback) {\n        let request = requestAnimationFrame;\n        let cancel = cancelAnimationFrame;\n        const { delegate } = animationFrameProvider;\n        if (delegate) {\n            request = delegate.requestAnimationFrame;\n            cancel = delegate.cancelAnimationFrame;\n        }\n        const handle = request((timestamp) => {\n            cancel = undefined;\n            callback(timestamp);\n        });\n        return new Subscription(() => cancel === null || cancel === void 0 ? void 0 : cancel(handle));\n    },\n    requestAnimationFrame(...args) {\n        const { delegate } = animationFrameProvider;\n        return ((delegate === null || delegate === void 0 ? void 0 : delegate.requestAnimationFrame) || requestAnimationFrame)(...args);\n    },\n    cancelAnimationFrame(...args) {\n        const { delegate } = animationFrameProvider;\n        return ((delegate === null || delegate === void 0 ? void 0 : delegate.cancelAnimationFrame) || cancelAnimationFrame)(...args);\n    },\n    delegate: undefined,\n};\n","import { AsyncAction } from './AsyncAction';\nimport { animationFrameProvider } from './animationFrameProvider';\nexport class AnimationFrameAction extends AsyncAction {\n    constructor(scheduler, work) {\n        super(scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n    }\n    requestAsyncId(scheduler, id, delay = 0) {\n        if (delay !== null && delay > 0) {\n            return super.requestAsyncId(scheduler, id, delay);\n        }\n        scheduler.actions.push(this);\n        return scheduler._scheduled || (scheduler._scheduled = animationFrameProvider.requestAnimationFrame(() => scheduler.flush(undefined)));\n    }\n    recycleAsyncId(scheduler, id, delay = 0) {\n        var _a;\n        if (delay != null ? delay > 0 : this.delay > 0) {\n            return super.recycleAsyncId(scheduler, id, delay);\n        }\n        const { actions } = scheduler;\n        if (id != null && ((_a = actions[actions.length - 1]) === null || _a === void 0 ? void 0 : _a.id) !== id) {\n            animationFrameProvider.cancelAnimationFrame(id);\n            scheduler._scheduled = undefined;\n        }\n        return undefined;\n    }\n}\n","import { AnimationFrameAction } from './AnimationFrameAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\nexport const animationFrameScheduler = new AnimationFrameScheduler(AnimationFrameAction);\nexport const animationFrame = animationFrameScheduler;\n","import { AsyncScheduler } from './AsyncScheduler';\nexport class AnimationFrameScheduler extends AsyncScheduler {\n    flush(action) {\n        this._active = true;\n        const flushId = this._scheduled;\n        this._scheduled = undefined;\n        const { actions } = this;\n        let error;\n        action = action || actions.shift();\n        do {\n            if ((error = action.execute(action.state, action.delay))) {\n                break;\n            }\n        } while ((action = actions[0]) && action.id === flushId && actions.shift());\n        this._active = false;\n        if (error) {\n            while ((action = actions[0]) && action.id === flushId && actions.shift()) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    }\n}\n","let nextHandle = 1;\nlet resolved;\nconst activeHandles = {};\nfunction findAndClearHandle(handle) {\n    if (handle in activeHandles) {\n        delete activeHandles[handle];\n        return true;\n    }\n    return false;\n}\nexport const Immediate = {\n    setImmediate(cb) {\n        const handle = nextHandle++;\n        activeHandles[handle] = true;\n        if (!resolved) {\n            resolved = Promise.resolve();\n        }\n        resolved.then(() => findAndClearHandle(handle) && cb());\n        return handle;\n    },\n    clearImmediate(handle) {\n        findAndClearHandle(handle);\n    },\n};\nexport const TestTools = {\n    pending() {\n        return Object.keys(activeHandles).length;\n    }\n};\n","import { Immediate } from '../util/Immediate';\nconst { setImmediate, clearImmediate } = Immediate;\nexport const immediateProvider = {\n    setImmediate(...args) {\n        const { delegate } = immediateProvider;\n        return ((delegate === null || delegate === void 0 ? void 0 : delegate.setImmediate) || setImmediate)(...args);\n    },\n    clearImmediate(handle) {\n        const { delegate } = immediateProvider;\n        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearImmediate) || clearImmediate)(handle);\n    },\n    delegate: undefined,\n};\n","import { AsyncAction } from './AsyncAction';\nimport { immediateProvider } from './immediateProvider';\nexport class AsapAction extends AsyncAction {\n    constructor(scheduler, work) {\n        super(scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n    }\n    requestAsyncId(scheduler, id, delay = 0) {\n        if (delay !== null && delay > 0) {\n            return super.requestAsyncId(scheduler, id, delay);\n        }\n        scheduler.actions.push(this);\n        return scheduler._scheduled || (scheduler._scheduled = immediateProvider.setImmediate(scheduler.flush.bind(scheduler, undefined)));\n    }\n    recycleAsyncId(scheduler, id, delay = 0) {\n        var _a;\n        if (delay != null ? delay > 0 : this.delay > 0) {\n            return super.recycleAsyncId(scheduler, id, delay);\n        }\n        const { actions } = scheduler;\n        if (id != null && ((_a = actions[actions.length - 1]) === null || _a === void 0 ? void 0 : _a.id) !== id) {\n            immediateProvider.clearImmediate(id);\n            scheduler._scheduled = undefined;\n        }\n        return undefined;\n    }\n}\n","import { AsapAction } from './AsapAction';\nimport { AsapScheduler } from './AsapScheduler';\nexport const asapScheduler = new AsapScheduler(AsapAction);\nexport const asap = asapScheduler;\n","import { AsyncScheduler } from './AsyncScheduler';\nexport class AsapScheduler extends AsyncScheduler {\n    flush(action) {\n        this._active = true;\n        const flushId = this._scheduled;\n        this._scheduled = undefined;\n        const { actions } = this;\n        let error;\n        action = action || actions.shift();\n        do {\n            if ((error = action.execute(action.state, action.delay))) {\n                break;\n            }\n        } while ((action = actions[0]) && action.id === flushId && actions.shift());\n        this._active = false;\n        if (error) {\n            while ((action = actions[0]) && action.id === flushId && actions.shift()) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    }\n}\n","import { Observable } from '../Observable';\nimport { isFunction } from './isFunction';\nexport function isObservable(obj) {\n    return !!obj && (obj instanceof Observable || (isFunction(obj.lift) && isFunction(obj.subscribe)));\n}\n","import { map } from \"../operators/map\";\nconst { isArray } = Array;\nfunction callOrApply(fn, args) {\n    return isArray(args) ? fn(...args) : fn(args);\n}\nexport function mapOneOrManyArgs(fn) {\n    return map(args => callOrApply(fn, args));\n}\n","import { coerceNumberProperty, coerceElement, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, Directive, Input, Injectable, Optional, Inject, inject, Component, ViewEncapsulation, ChangeDetectionStrategy, Output, ViewChild, SkipSelf, ElementRef, NgModule } from '@angular/core';\nimport { Subject, of, Observable, fromEvent, animationFrameScheduler, asapScheduler, Subscription, isObservable } from 'rxjs';\nimport { distinctUntilChanged, auditTime, filter, takeUntil, startWith, pairwise, switchMap, shareReplay } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/platform';\nimport { getRtlScrollAxisType, supportsScrollBehavior, Platform } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\nimport * as i2 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport * as i2$1 from '@angular/cdk/collections';\nimport { isDataSource, ArrayDataSource, _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy } from '@angular/cdk/collections';\n\n/** The injection token used to specify the virtual scrolling strategy. */\nconst VIRTUAL_SCROLL_STRATEGY = new InjectionToken('VIRTUAL_SCROLL_STRATEGY');\n\n/** Virtual scrolling strategy for lists with items of known fixed size. */\nclass FixedSizeVirtualScrollStrategy {\n    /**\n     * @param itemSize The size of the items in the virtually scrolling list.\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    constructor(itemSize, minBufferPx, maxBufferPx) {\n        this._scrolledIndexChange = new Subject();\n        /** @docs-private Implemented as part of VirtualScrollStrategy. */\n        this.scrolledIndexChange = this._scrolledIndexChange.pipe(distinctUntilChanged());\n        /** The attached viewport. */\n        this._viewport = null;\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n    }\n    /**\n     * Attaches this scroll strategy to a viewport.\n     * @param viewport The viewport to attach this strategy to.\n     */\n    attach(viewport) {\n        this._viewport = viewport;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** Detaches this scroll strategy from the currently attached viewport. */\n    detach() {\n        this._scrolledIndexChange.complete();\n        this._viewport = null;\n    }\n    /**\n     * Update the item size and buffer size.\n     * @param itemSize The size of the items in the virtually scrolling list.\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    updateItemAndBufferSize(itemSize, minBufferPx, maxBufferPx) {\n        if (maxBufferPx < minBufferPx && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n        }\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onContentScrolled() {\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onDataLengthChanged() {\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onContentRendered() {\n        /* no-op */\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onRenderedOffsetChanged() {\n        /* no-op */\n    }\n    /**\n     * Scroll to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling.\n     */\n    scrollToIndex(index, behavior) {\n        if (this._viewport) {\n            this._viewport.scrollToOffset(index * this._itemSize, behavior);\n        }\n    }\n    /** Update the viewport's total content size. */\n    _updateTotalContentSize() {\n        if (!this._viewport) {\n            return;\n        }\n        this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n    }\n    /** Update the viewport's rendered range. */\n    _updateRenderedRange() {\n        if (!this._viewport) {\n            return;\n        }\n        const renderedRange = this._viewport.getRenderedRange();\n        const newRange = { start: renderedRange.start, end: renderedRange.end };\n        const viewportSize = this._viewport.getViewportSize();\n        const dataLength = this._viewport.getDataLength();\n        let scrollOffset = this._viewport.measureScrollOffset();\n        // Prevent NaN as result when dividing by zero.\n        let firstVisibleIndex = this._itemSize > 0 ? scrollOffset / this._itemSize : 0;\n        // If user scrolls to the bottom of the list and data changes to a smaller list\n        if (newRange.end > dataLength) {\n            // We have to recalculate the first visible index based on new data length and viewport size.\n            const maxVisibleItems = Math.ceil(viewportSize / this._itemSize);\n            const newVisibleIndex = Math.max(0, Math.min(firstVisibleIndex, dataLength - maxVisibleItems));\n            // If first visible index changed we must update scroll offset to handle start/end buffers\n            // Current range must also be adjusted to cover the new position (bottom of new list).\n            if (firstVisibleIndex != newVisibleIndex) {\n                firstVisibleIndex = newVisibleIndex;\n                scrollOffset = newVisibleIndex * this._itemSize;\n                newRange.start = Math.floor(firstVisibleIndex);\n            }\n            newRange.end = Math.max(0, Math.min(dataLength, newRange.start + maxVisibleItems));\n        }\n        const startBuffer = scrollOffset - newRange.start * this._itemSize;\n        if (startBuffer < this._minBufferPx && newRange.start != 0) {\n            const expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n            newRange.start = Math.max(0, newRange.start - expandStart);\n            newRange.end = Math.min(dataLength, Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));\n        }\n        else {\n            const endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n            if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n                const expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n                if (expandEnd > 0) {\n                    newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n                    newRange.start = Math.max(0, Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));\n                }\n            }\n        }\n        this._viewport.setRenderedRange(newRange);\n        this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\n        this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n    }\n}\n/**\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n * `FixedSizeVirtualScrollStrategy` from the given directive.\n * @param fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n *     `FixedSizeVirtualScrollStrategy` from.\n */\nfunction _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir) {\n    return fixedSizeDir._scrollStrategy;\n}\n/** A virtual scroll strategy that supports fixed-size items. */\nclass CdkFixedSizeVirtualScroll {\n    constructor() {\n        this._itemSize = 20;\n        this._minBufferPx = 100;\n        this._maxBufferPx = 200;\n        /** The scroll strategy used by this directive. */\n        this._scrollStrategy = new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n    /** The size of the items in the list (in pixels). */\n    get itemSize() {\n        return this._itemSize;\n    }\n    set itemSize(value) {\n        this._itemSize = coerceNumberProperty(value);\n    }\n    /**\n     * The minimum amount of buffer rendered beyond the viewport (in pixels).\n     * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n     */\n    get minBufferPx() {\n        return this._minBufferPx;\n    }\n    set minBufferPx(value) {\n        this._minBufferPx = coerceNumberProperty(value);\n    }\n    /**\n     * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n     */\n    get maxBufferPx() {\n        return this._maxBufferPx;\n    }\n    set maxBufferPx(value) {\n        this._maxBufferPx = coerceNumberProperty(value);\n    }\n    ngOnChanges() {\n        this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkFixedSizeVirtualScroll, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: CdkFixedSizeVirtualScroll, isStandalone: true, selector: \"cdk-virtual-scroll-viewport[itemSize]\", inputs: { itemSize: \"itemSize\", minBufferPx: \"minBufferPx\", maxBufferPx: \"maxBufferPx\" }, providers: [\n            {\n                provide: VIRTUAL_SCROLL_STRATEGY,\n                useFactory: _fixedSizeVirtualScrollStrategyFactory,\n                deps: [forwardRef(() => CdkFixedSizeVirtualScroll)],\n            },\n        ], usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkFixedSizeVirtualScroll, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-virtual-scroll-viewport[itemSize]',\n                    standalone: true,\n                    providers: [\n                        {\n                            provide: VIRTUAL_SCROLL_STRATEGY,\n                            useFactory: _fixedSizeVirtualScrollStrategyFactory,\n                            deps: [forwardRef(() => CdkFixedSizeVirtualScroll)],\n                        },\n                    ],\n                }]\n        }], propDecorators: { itemSize: [{\n                type: Input\n            }], minBufferPx: [{\n                type: Input\n            }], maxBufferPx: [{\n                type: Input\n            }] } });\n\n/** Time in ms to throttle the scrolling events by default. */\nconst DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\nclass ScrollDispatcher {\n    constructor(_ngZone, _platform, document) {\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        /** Subject for notifying that a registered scrollable reference element has been scrolled. */\n        this._scrolled = new Subject();\n        /** Keeps track of the global `scroll` and `resize` subscriptions. */\n        this._globalSubscription = null;\n        /** Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards. */\n        this._scrolledCount = 0;\n        /**\n         * Map of all the scrollable references that are registered with the service and their\n         * scroll event subscriptions.\n         */\n        this.scrollContainers = new Map();\n        this._document = document;\n    }\n    /**\n     * Registers a scrollable instance with the service and listens for its scrolled events. When the\n     * scrollable is scrolled, the service emits the event to its scrolled observable.\n     * @param scrollable Scrollable instance to be registered.\n     */\n    register(scrollable) {\n        if (!this.scrollContainers.has(scrollable)) {\n            this.scrollContainers.set(scrollable, scrollable.elementScrolled().subscribe(() => this._scrolled.next(scrollable)));\n        }\n    }\n    /**\n     * De-registers a Scrollable reference and unsubscribes from its scroll event observable.\n     * @param scrollable Scrollable instance to be deregistered.\n     */\n    deregister(scrollable) {\n        const scrollableReference = this.scrollContainers.get(scrollable);\n        if (scrollableReference) {\n            scrollableReference.unsubscribe();\n            this.scrollContainers.delete(scrollable);\n        }\n    }\n    /**\n     * Returns an observable that emits an event whenever any of the registered Scrollable\n     * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n     * to override the default \"throttle\" time.\n     *\n     * **Note:** in order to avoid hitting change detection for every scroll event,\n     * all of the events emitted from this stream will be run outside the Angular zone.\n     * If you need to update any data bindings as a result of a scroll event, you have\n     * to run the callback using `NgZone.run`.\n     */\n    scrolled(auditTimeInMs = DEFAULT_SCROLL_TIME) {\n        if (!this._platform.isBrowser) {\n            return of();\n        }\n        return new Observable((observer) => {\n            if (!this._globalSubscription) {\n                this._addGlobalListener();\n            }\n            // In the case of a 0ms delay, use an observable without auditTime\n            // since it does add a perceptible delay in processing overhead.\n            const subscription = auditTimeInMs > 0\n                ? this._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer)\n                : this._scrolled.subscribe(observer);\n            this._scrolledCount++;\n            return () => {\n                subscription.unsubscribe();\n                this._scrolledCount--;\n                if (!this._scrolledCount) {\n                    this._removeGlobalListener();\n                }\n            };\n        });\n    }\n    ngOnDestroy() {\n        this._removeGlobalListener();\n        this.scrollContainers.forEach((_, container) => this.deregister(container));\n        this._scrolled.complete();\n    }\n    /**\n     * Returns an observable that emits whenever any of the\n     * scrollable ancestors of an element are scrolled.\n     * @param elementOrElementRef Element whose ancestors to listen for.\n     * @param auditTimeInMs Time to throttle the scroll events.\n     */\n    ancestorScrolled(elementOrElementRef, auditTimeInMs) {\n        const ancestors = this.getAncestorScrollContainers(elementOrElementRef);\n        return this.scrolled(auditTimeInMs).pipe(filter(target => {\n            return !target || ancestors.indexOf(target) > -1;\n        }));\n    }\n    /** Returns all registered Scrollables that contain the provided element. */\n    getAncestorScrollContainers(elementOrElementRef) {\n        const scrollingContainers = [];\n        this.scrollContainers.forEach((_subscription, scrollable) => {\n            if (this._scrollableContainsElement(scrollable, elementOrElementRef)) {\n                scrollingContainers.push(scrollable);\n            }\n        });\n        return scrollingContainers;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        return this._document.defaultView || window;\n    }\n    /** Returns true if the element is contained within the provided Scrollable. */\n    _scrollableContainsElement(scrollable, elementOrElementRef) {\n        let element = coerceElement(elementOrElementRef);\n        let scrollableElement = scrollable.getElementRef().nativeElement;\n        // Traverse through the element parents until we reach null, checking if any of the elements\n        // are the scrollable's element.\n        do {\n            if (element == scrollableElement) {\n                return true;\n            }\n        } while ((element = element.parentElement));\n        return false;\n    }\n    /** Sets up the global scroll listeners. */\n    _addGlobalListener() {\n        this._globalSubscription = this._ngZone.runOutsideAngular(() => {\n            const window = this._getWindow();\n            return fromEvent(window.document, 'scroll').subscribe(() => this._scrolled.next());\n        });\n    }\n    /** Cleans up the global scroll listener. */\n    _removeGlobalListener() {\n        if (this._globalSubscription) {\n            this._globalSubscription.unsubscribe();\n            this._globalSubscription = null;\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: ScrollDispatcher, deps: [{ token: i0.NgZone }, { token: i1.Platform }, { token: DOCUMENT, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: ScrollDispatcher, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: ScrollDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i1.Platform }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\nclass CdkScrollable {\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n        this.elementRef = elementRef;\n        this.scrollDispatcher = scrollDispatcher;\n        this.ngZone = ngZone;\n        this.dir = dir;\n        this._destroyed = new Subject();\n        this._elementScrolled = new Observable((observer) => this.ngZone.runOutsideAngular(() => fromEvent(this.elementRef.nativeElement, 'scroll')\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(observer)));\n    }\n    ngOnInit() {\n        this.scrollDispatcher.register(this);\n    }\n    ngOnDestroy() {\n        this.scrollDispatcher.deregister(this);\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Returns observable that emits when a scroll event is fired on the host element. */\n    elementScrolled() {\n        return this._elementScrolled;\n    }\n    /** Gets the ElementRef for the viewport. */\n    getElementRef() {\n        return this.elementRef;\n    }\n    /**\n     * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n     * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param options specified the offsets to scroll to.\n     */\n    scrollTo(options) {\n        const el = this.elementRef.nativeElement;\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        // Rewrite start & end offsets as right or left offsets.\n        if (options.left == null) {\n            options.left = isRtl ? options.end : options.start;\n        }\n        if (options.right == null) {\n            options.right = isRtl ? options.start : options.end;\n        }\n        // Rewrite the bottom offset as a top offset.\n        if (options.bottom != null) {\n            options.top =\n                el.scrollHeight - el.clientHeight - options.bottom;\n        }\n        // Rewrite the right offset as a left offset.\n        if (isRtl && getRtlScrollAxisType() != 0 /* RtlScrollAxisType.NORMAL */) {\n            if (options.left != null) {\n                options.right =\n                    el.scrollWidth - el.clientWidth - options.left;\n            }\n            if (getRtlScrollAxisType() == 2 /* RtlScrollAxisType.INVERTED */) {\n                options.left = options.right;\n            }\n            else if (getRtlScrollAxisType() == 1 /* RtlScrollAxisType.NEGATED */) {\n                options.left = options.right ? -options.right : options.right;\n            }\n        }\n        else {\n            if (options.right != null) {\n                options.left =\n                    el.scrollWidth - el.clientWidth - options.right;\n            }\n        }\n        this._applyScrollToOptions(options);\n    }\n    _applyScrollToOptions(options) {\n        const el = this.elementRef.nativeElement;\n        if (supportsScrollBehavior()) {\n            el.scrollTo(options);\n        }\n        else {\n            if (options.top != null) {\n                el.scrollTop = options.top;\n            }\n            if (options.left != null) {\n                el.scrollLeft = options.left;\n            }\n        }\n    }\n    /**\n     * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n     * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n     * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param from The edge to measure from.\n     */\n    measureScrollOffset(from) {\n        const LEFT = 'left';\n        const RIGHT = 'right';\n        const el = this.elementRef.nativeElement;\n        if (from == 'top') {\n            return el.scrollTop;\n        }\n        if (from == 'bottom') {\n            return el.scrollHeight - el.clientHeight - el.scrollTop;\n        }\n        // Rewrite start & end as left or right offsets.\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        if (from == 'start') {\n            from = isRtl ? RIGHT : LEFT;\n        }\n        else if (from == 'end') {\n            from = isRtl ? LEFT : RIGHT;\n        }\n        if (isRtl && getRtlScrollAxisType() == 2 /* RtlScrollAxisType.INVERTED */) {\n            // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n            else {\n                return el.scrollLeft;\n            }\n        }\n        else if (isRtl && getRtlScrollAxisType() == 1 /* RtlScrollAxisType.NEGATED */) {\n            // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft + el.scrollWidth - el.clientWidth;\n            }\n            else {\n                return -el.scrollLeft;\n            }\n        }\n        else {\n            // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n            // (scrollWidth - clientWidth) when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft;\n            }\n            else {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkScrollable, deps: [{ token: i0.ElementRef }, { token: ScrollDispatcher }, { token: i0.NgZone }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: CdkScrollable, isStandalone: true, selector: \"[cdk-scrollable], [cdkScrollable]\", ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkScrollable, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-scrollable], [cdkScrollable]',\n                    standalone: true,\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: ScrollDispatcher }, { type: i0.NgZone }, { type: i2.Directionality, decorators: [{\n                    type: Optional\n                }] }]; } });\n\n/** Time in ms to throttle the resize events by default. */\nconst DEFAULT_RESIZE_TIME = 20;\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * @docs-private\n */\nclass ViewportRuler {\n    constructor(_platform, ngZone, document) {\n        this._platform = _platform;\n        /** Stream of viewport change events. */\n        this._change = new Subject();\n        /** Event listener that will be used to handle the viewport change events. */\n        this._changeListener = (event) => {\n            this._change.next(event);\n        };\n        this._document = document;\n        ngZone.runOutsideAngular(() => {\n            if (_platform.isBrowser) {\n                const window = this._getWindow();\n                // Note that bind the events ourselves, rather than going through something like RxJS's\n                // `fromEvent` so that we can ensure that they're bound outside of the NgZone.\n                window.addEventListener('resize', this._changeListener);\n                window.addEventListener('orientationchange', this._changeListener);\n            }\n            // Clear the cached position so that the viewport is re-measured next time it is required.\n            // We don't need to keep track of the subscription, because it is completed on destroy.\n            this.change().subscribe(() => (this._viewportSize = null));\n        });\n    }\n    ngOnDestroy() {\n        if (this._platform.isBrowser) {\n            const window = this._getWindow();\n            window.removeEventListener('resize', this._changeListener);\n            window.removeEventListener('orientationchange', this._changeListener);\n        }\n        this._change.complete();\n    }\n    /** Returns the viewport's width and height. */\n    getViewportSize() {\n        if (!this._viewportSize) {\n            this._updateViewportSize();\n        }\n        const output = { width: this._viewportSize.width, height: this._viewportSize.height };\n        // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n        if (!this._platform.isBrowser) {\n            this._viewportSize = null;\n        }\n        return output;\n    }\n    /** Gets a ClientRect for the viewport's bounds. */\n    getViewportRect() {\n        // Use the document element's bounding rect rather than the window scroll properties\n        // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n        // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n        // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n        // can disagree when the page is pinch-zoomed (on devices that support touch).\n        // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n        // We use the documentElement instead of the body because, by default (without a css reset)\n        // browsers typically give the document body an 8px margin, which is not included in\n        // getBoundingClientRect().\n        const scrollPosition = this.getViewportScrollPosition();\n        const { width, height } = this.getViewportSize();\n        return {\n            top: scrollPosition.top,\n            left: scrollPosition.left,\n            bottom: scrollPosition.top + height,\n            right: scrollPosition.left + width,\n            height,\n            width,\n        };\n    }\n    /** Gets the (top, left) scroll position of the viewport. */\n    getViewportScrollPosition() {\n        // While we can get a reference to the fake document\n        // during SSR, it doesn't have getBoundingClientRect.\n        if (!this._platform.isBrowser) {\n            return { top: 0, left: 0 };\n        }\n        // The top-left-corner of the viewport is determined by the scroll position of the document\n        // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n        // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n        // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n        // `document.documentElement` works consistently, where the `top` and `left` values will\n        // equal negative the scroll position.\n        const document = this._document;\n        const window = this._getWindow();\n        const documentElement = document.documentElement;\n        const documentRect = documentElement.getBoundingClientRect();\n        const top = -documentRect.top ||\n            document.body.scrollTop ||\n            window.scrollY ||\n            documentElement.scrollTop ||\n            0;\n        const left = -documentRect.left ||\n            document.body.scrollLeft ||\n            window.scrollX ||\n            documentElement.scrollLeft ||\n            0;\n        return { top, left };\n    }\n    /**\n     * Returns a stream that emits whenever the size of the viewport changes.\n     * This stream emits outside of the Angular zone.\n     * @param throttleTime Time in milliseconds to throttle the stream.\n     */\n    change(throttleTime = DEFAULT_RESIZE_TIME) {\n        return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        return this._document.defaultView || window;\n    }\n    /** Updates the cached viewport size. */\n    _updateViewportSize() {\n        const window = this._getWindow();\n        this._viewportSize = this._platform.isBrowser\n            ? { width: window.innerWidth, height: window.innerHeight }\n            : { width: 0, height: 0 };\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: ViewportRuler, deps: [{ token: i1.Platform }, { token: i0.NgZone }, { token: DOCUMENT, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: ViewportRuler, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: ViewportRuler, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1.Platform }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\nconst VIRTUAL_SCROLLABLE = new InjectionToken('VIRTUAL_SCROLLABLE');\n/**\n * Extending the {@link CdkScrollable} to be used as scrolling container for virtual scrolling.\n */\nclass CdkVirtualScrollable extends CdkScrollable {\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n        super(elementRef, scrollDispatcher, ngZone, dir);\n    }\n    /**\n     * Measure the viewport size for the provided orientation.\n     *\n     * @param orientation The orientation to measure the size from.\n     */\n    measureViewportSize(orientation) {\n        const viewportEl = this.elementRef.nativeElement;\n        return orientation === 'horizontal' ? viewportEl.clientWidth : viewportEl.clientHeight;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkVirtualScrollable, deps: [{ token: i0.ElementRef }, { token: ScrollDispatcher }, { token: i0.NgZone }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: CdkVirtualScrollable, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkVirtualScrollable, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: ScrollDispatcher }, { type: i0.NgZone }, { type: i2.Directionality, decorators: [{\n                    type: Optional\n                }] }]; } });\n\n/** Checks if the given ranges are equal. */\nfunction rangesEqual(r1, r2) {\n    return r1.start == r2.start && r1.end == r2.end;\n}\n/**\n * Scheduler to be used for scroll events. Needs to fall back to\n * something that doesn't rely on requestAnimationFrame on environments\n * that don't support it (e.g. server-side rendering).\n */\nconst SCROLL_SCHEDULER = typeof requestAnimationFrame !== 'undefined' ? animationFrameScheduler : asapScheduler;\n/** A viewport that virtualizes its scrolling with the help of `CdkVirtualForOf`. */\nclass CdkVirtualScrollViewport extends CdkVirtualScrollable {\n    /** The direction the viewport scrolls. */\n    get orientation() {\n        return this._orientation;\n    }\n    set orientation(orientation) {\n        if (this._orientation !== orientation) {\n            this._orientation = orientation;\n            this._calculateSpacerSize();\n        }\n    }\n    /**\n     * Whether rendered items should persist in the DOM after scrolling out of view. By default, items\n     * will be removed.\n     */\n    get appendOnly() {\n        return this._appendOnly;\n    }\n    set appendOnly(value) {\n        this._appendOnly = coerceBooleanProperty(value);\n    }\n    constructor(elementRef, _changeDetectorRef, ngZone, _scrollStrategy, dir, scrollDispatcher, viewportRuler, scrollable) {\n        super(elementRef, scrollDispatcher, ngZone, dir);\n        this.elementRef = elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._scrollStrategy = _scrollStrategy;\n        this.scrollable = scrollable;\n        this._platform = inject(Platform);\n        /** Emits when the viewport is detached from a CdkVirtualForOf. */\n        this._detachedSubject = new Subject();\n        /** Emits when the rendered range changes. */\n        this._renderedRangeSubject = new Subject();\n        this._orientation = 'vertical';\n        this._appendOnly = false;\n        // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll\n        // strategy lazily (i.e. only if the user is actually listening to the events). We do this because\n        // depending on how the strategy calculates the scrolled index, it may come at a cost to\n        // performance.\n        /** Emits when the index of the first element visible in the viewport changes. */\n        this.scrolledIndexChange = new Observable((observer) => this._scrollStrategy.scrolledIndexChange.subscribe(index => Promise.resolve().then(() => this.ngZone.run(() => observer.next(index)))));\n        /** A stream that emits whenever the rendered range changes. */\n        this.renderedRangeStream = this._renderedRangeSubject;\n        /**\n         * The total size of all content (in pixels), including content that is not currently rendered.\n         */\n        this._totalContentSize = 0;\n        /** A string representing the `style.width` property value to be used for the spacer element. */\n        this._totalContentWidth = '';\n        /** A string representing the `style.height` property value to be used for the spacer element. */\n        this._totalContentHeight = '';\n        /** The currently rendered range of indices. */\n        this._renderedRange = { start: 0, end: 0 };\n        /** The length of the data bound to this viewport (in number of items). */\n        this._dataLength = 0;\n        /** The size of the viewport (in pixels). */\n        this._viewportSize = 0;\n        /** The last rendered content offset that was set. */\n        this._renderedContentOffset = 0;\n        /**\n         * Whether the last rendered content offset was to the end of the content (and therefore needs to\n         * be rewritten as an offset to the start of the content).\n         */\n        this._renderedContentOffsetNeedsRewrite = false;\n        /** Whether there is a pending change detection cycle. */\n        this._isChangeDetectionPending = false;\n        /** A list of functions to run after the next change detection cycle. */\n        this._runAfterChangeDetection = [];\n        /** Subscription to changes in the viewport size. */\n        this._viewportChanges = Subscription.EMPTY;\n        if (!_scrollStrategy && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\n        }\n        this._viewportChanges = viewportRuler.change().subscribe(() => {\n            this.checkViewportSize();\n        });\n        if (!this.scrollable) {\n            // No scrollable is provided, so the virtual-scroll-viewport needs to become a scrollable\n            this.elementRef.nativeElement.classList.add('cdk-virtual-scrollable');\n            this.scrollable = this;\n        }\n    }\n    ngOnInit() {\n        // Scrolling depends on the element dimensions which we can't get during SSR.\n        if (!this._platform.isBrowser) {\n            return;\n        }\n        if (this.scrollable === this) {\n            super.ngOnInit();\n        }\n        // It's still too early to measure the viewport at this point. Deferring with a promise allows\n        // the Viewport to be rendered with the correct size before we measure. We run this outside the\n        // zone to avoid causing more change detection cycles. We handle the change detection loop\n        // ourselves instead.\n        this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n            this._measureViewportSize();\n            this._scrollStrategy.attach(this);\n            this.scrollable\n                .elementScrolled()\n                .pipe(\n            // Start off with a fake scroll event so we properly detect our initial position.\n            startWith(null), \n            // Collect multiple events into one until the next animation frame. This way if\n            // there are multiple scroll events in the same frame we only need to recheck\n            // our layout once.\n            auditTime(0, SCROLL_SCHEDULER))\n                .subscribe(() => this._scrollStrategy.onContentScrolled());\n            this._markChangeDetectionNeeded();\n        }));\n    }\n    ngOnDestroy() {\n        this.detach();\n        this._scrollStrategy.detach();\n        // Complete all subjects\n        this._renderedRangeSubject.complete();\n        this._detachedSubject.complete();\n        this._viewportChanges.unsubscribe();\n        super.ngOnDestroy();\n    }\n    /** Attaches a `CdkVirtualScrollRepeater` to this viewport. */\n    attach(forOf) {\n        if (this._forOf && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('CdkVirtualScrollViewport is already attached.');\n        }\n        // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n        // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n        // change detection loop ourselves.\n        this.ngZone.runOutsideAngular(() => {\n            this._forOf = forOf;\n            this._forOf.dataStream.pipe(takeUntil(this._detachedSubject)).subscribe(data => {\n                const newLength = data.length;\n                if (newLength !== this._dataLength) {\n                    this._dataLength = newLength;\n                    this._scrollStrategy.onDataLengthChanged();\n                }\n                this._doChangeDetection();\n            });\n        });\n    }\n    /** Detaches the current `CdkVirtualForOf`. */\n    detach() {\n        this._forOf = null;\n        this._detachedSubject.next();\n    }\n    /** Gets the length of the data bound to this viewport (in number of items). */\n    getDataLength() {\n        return this._dataLength;\n    }\n    /** Gets the size of the viewport (in pixels). */\n    getViewportSize() {\n        return this._viewportSize;\n    }\n    // TODO(mmalerba): This is technically out of sync with what's really rendered until a render\n    // cycle happens. I'm being careful to only call it after the render cycle is complete and before\n    // setting it to something else, but its error prone and should probably be split into\n    // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.\n    /** Get the current rendered range of items. */\n    getRenderedRange() {\n        return this._renderedRange;\n    }\n    measureBoundingClientRectWithScrollOffset(from) {\n        return this.getElementRef().nativeElement.getBoundingClientRect()[from];\n    }\n    /**\n     * Sets the total size of all content (in pixels), including content that is not currently\n     * rendered.\n     */\n    setTotalContentSize(size) {\n        if (this._totalContentSize !== size) {\n            this._totalContentSize = size;\n            this._calculateSpacerSize();\n            this._markChangeDetectionNeeded();\n        }\n    }\n    /** Sets the currently rendered range of indices. */\n    setRenderedRange(range) {\n        if (!rangesEqual(this._renderedRange, range)) {\n            if (this.appendOnly) {\n                range = { start: 0, end: Math.max(this._renderedRange.end, range.end) };\n            }\n            this._renderedRangeSubject.next((this._renderedRange = range));\n            this._markChangeDetectionNeeded(() => this._scrollStrategy.onContentRendered());\n        }\n    }\n    /**\n     * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n     */\n    getOffsetToRenderedContentStart() {\n        return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n    }\n    /**\n     * Sets the offset from the start of the viewport to either the start or end of the rendered data\n     * (in pixels).\n     */\n    setRenderedContentOffset(offset, to = 'to-start') {\n        // In appendOnly, we always start from the top\n        offset = this.appendOnly && to === 'to-start' ? 0 : offset;\n        // For a horizontal viewport in a right-to-left language we need to translate along the x-axis\n        // in the negative direction.\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        const isHorizontal = this.orientation == 'horizontal';\n        const axis = isHorizontal ? 'X' : 'Y';\n        const axisDirection = isHorizontal && isRtl ? -1 : 1;\n        let transform = `translate${axis}(${Number(axisDirection * offset)}px)`;\n        this._renderedContentOffset = offset;\n        if (to === 'to-end') {\n            transform += ` translate${axis}(-100%)`;\n            // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n            // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\n            // expand upward).\n            this._renderedContentOffsetNeedsRewrite = true;\n        }\n        if (this._renderedContentTransform != transform) {\n            // We know this value is safe because we parse `offset` with `Number()` before passing it\n            // into the string.\n            this._renderedContentTransform = transform;\n            this._markChangeDetectionNeeded(() => {\n                if (this._renderedContentOffsetNeedsRewrite) {\n                    this._renderedContentOffset -= this.measureRenderedContentSize();\n                    this._renderedContentOffsetNeedsRewrite = false;\n                    this.setRenderedContentOffset(this._renderedContentOffset);\n                }\n                else {\n                    this._scrollStrategy.onRenderedOffsetChanged();\n                }\n            });\n        }\n    }\n    /**\n     * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n     * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n     * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n     * @param offset The offset to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n    scrollToOffset(offset, behavior = 'auto') {\n        const options = { behavior };\n        if (this.orientation === 'horizontal') {\n            options.start = offset;\n        }\n        else {\n            options.top = offset;\n        }\n        this.scrollable.scrollTo(options);\n    }\n    /**\n     * Scrolls to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n    scrollToIndex(index, behavior = 'auto') {\n        this._scrollStrategy.scrollToIndex(index, behavior);\n    }\n    /**\n     * Gets the current scroll offset from the start of the scrollable (in pixels).\n     * @param from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n     *     in horizontal mode.\n     */\n    measureScrollOffset(from) {\n        // This is to break the call cycle\n        let measureScrollOffset;\n        if (this.scrollable == this) {\n            measureScrollOffset = (_from) => super.measureScrollOffset(_from);\n        }\n        else {\n            measureScrollOffset = (_from) => this.scrollable.measureScrollOffset(_from);\n        }\n        return Math.max(0, measureScrollOffset(from ?? (this.orientation === 'horizontal' ? 'start' : 'top')) -\n            this.measureViewportOffset());\n    }\n    /**\n     * Measures the offset of the viewport from the scrolling container\n     * @param from The edge to measure from.\n     */\n    measureViewportOffset(from) {\n        let fromRect;\n        const LEFT = 'left';\n        const RIGHT = 'right';\n        const isRtl = this.dir?.value == 'rtl';\n        if (from == 'start') {\n            fromRect = isRtl ? RIGHT : LEFT;\n        }\n        else if (from == 'end') {\n            fromRect = isRtl ? LEFT : RIGHT;\n        }\n        else if (from) {\n            fromRect = from;\n        }\n        else {\n            fromRect = this.orientation === 'horizontal' ? 'left' : 'top';\n        }\n        const scrollerClientRect = this.scrollable.measureBoundingClientRectWithScrollOffset(fromRect);\n        const viewportClientRect = this.elementRef.nativeElement.getBoundingClientRect()[fromRect];\n        return viewportClientRect - scrollerClientRect;\n    }\n    /** Measure the combined size of all of the rendered items. */\n    measureRenderedContentSize() {\n        const contentEl = this._contentWrapper.nativeElement;\n        return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n    }\n    /**\n     * Measure the total combined size of the given range. Throws if the range includes items that are\n     * not rendered.\n     */\n    measureRangeSize(range) {\n        if (!this._forOf) {\n            return 0;\n        }\n        return this._forOf.measureRangeSize(range, this.orientation);\n    }\n    /** Update the viewport dimensions and re-render. */\n    checkViewportSize() {\n        // TODO: Cleanup later when add logic for handling content resize\n        this._measureViewportSize();\n        this._scrollStrategy.onDataLengthChanged();\n    }\n    /** Measure the viewport size. */\n    _measureViewportSize() {\n        this._viewportSize = this.scrollable.measureViewportSize(this.orientation);\n    }\n    /** Queue up change detection to run. */\n    _markChangeDetectionNeeded(runAfter) {\n        if (runAfter) {\n            this._runAfterChangeDetection.push(runAfter);\n        }\n        // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n        // properties sequentially we only have to run `_doChangeDetection` once at the end.\n        if (!this._isChangeDetectionPending) {\n            this._isChangeDetectionPending = true;\n            this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n                this._doChangeDetection();\n            }));\n        }\n    }\n    /** Run change detection. */\n    _doChangeDetection() {\n        this._isChangeDetectionPending = false;\n        // Apply the content transform. The transform can't be set via an Angular binding because\n        // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n        // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n        // the `Number` function first to coerce it to a numeric value.\n        this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;\n        // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n        // from the root, since the repeated items are content projected in. Calling `detectChanges`\n        // instead does not properly check the projected content.\n        this.ngZone.run(() => this._changeDetectorRef.markForCheck());\n        const runAfterChangeDetection = this._runAfterChangeDetection;\n        this._runAfterChangeDetection = [];\n        for (const fn of runAfterChangeDetection) {\n            fn();\n        }\n    }\n    /** Calculates the `style.width` and `style.height` for the spacer element. */\n    _calculateSpacerSize() {\n        this._totalContentHeight =\n            this.orientation === 'horizontal' ? '' : `${this._totalContentSize}px`;\n        this._totalContentWidth =\n            this.orientation === 'horizontal' ? `${this._totalContentSize}px` : '';\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkVirtualScrollViewport, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }, { token: VIRTUAL_SCROLL_STRATEGY, optional: true }, { token: i2.Directionality, optional: true }, { token: ScrollDispatcher }, { token: ViewportRuler }, { token: VIRTUAL_SCROLLABLE, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.0\", type: CdkVirtualScrollViewport, isStandalone: true, selector: \"cdk-virtual-scroll-viewport\", inputs: { orientation: \"orientation\", appendOnly: \"appendOnly\" }, outputs: { scrolledIndexChange: \"scrolledIndexChange\" }, host: { properties: { \"class.cdk-virtual-scroll-orientation-horizontal\": \"orientation === \\\"horizontal\\\"\", \"class.cdk-virtual-scroll-orientation-vertical\": \"orientation !== \\\"horizontal\\\"\" }, classAttribute: \"cdk-virtual-scroll-viewport\" }, providers: [\n            {\n                provide: CdkScrollable,\n                useFactory: (virtualScrollable, viewport) => virtualScrollable || viewport,\n                deps: [[new Optional(), new Inject(VIRTUAL_SCROLLABLE)], CdkVirtualScrollViewport],\n            },\n        ], viewQueries: [{ propertyName: \"_contentWrapper\", first: true, predicate: [\"contentWrapper\"], descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: \"<!--\\n  Wrap the rendered content in an element that will be used to offset it based on the scroll\\n  position.\\n-->\\n<div #contentWrapper class=\\\"cdk-virtual-scroll-content-wrapper\\\">\\n  <ng-content></ng-content>\\n</div>\\n<!--\\n  Spacer used to force the scrolling container to the correct size for the *total* number of items\\n  so that the scrollbar captures the size of the entire data set.\\n-->\\n<div class=\\\"cdk-virtual-scroll-spacer\\\"\\n     [style.width]=\\\"_totalContentWidth\\\" [style.height]=\\\"_totalContentHeight\\\"></div>\\n\", styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;transform:translateZ(0)}.cdk-virtual-scrollable{overflow:auto;will-change:scroll-position;contain:strict;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{height:1px;transform-origin:0 0;flex:0 0 auto}[dir=rtl] .cdk-virtual-scroll-spacer{transform-origin:100% 0}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkVirtualScrollViewport, decorators: [{\n            type: Component,\n            args: [{ selector: 'cdk-virtual-scroll-viewport', host: {\n                        'class': 'cdk-virtual-scroll-viewport',\n                        '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === \"horizontal\"',\n                        '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation !== \"horizontal\"',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, providers: [\n                        {\n                            provide: CdkScrollable,\n                            useFactory: (virtualScrollable, viewport) => virtualScrollable || viewport,\n                            deps: [[new Optional(), new Inject(VIRTUAL_SCROLLABLE)], CdkVirtualScrollViewport],\n                        },\n                    ], template: \"<!--\\n  Wrap the rendered content in an element that will be used to offset it based on the scroll\\n  position.\\n-->\\n<div #contentWrapper class=\\\"cdk-virtual-scroll-content-wrapper\\\">\\n  <ng-content></ng-content>\\n</div>\\n<!--\\n  Spacer used to force the scrolling container to the correct size for the *total* number of items\\n  so that the scrollbar captures the size of the entire data set.\\n-->\\n<div class=\\\"cdk-virtual-scroll-spacer\\\"\\n     [style.width]=\\\"_totalContentWidth\\\" [style.height]=\\\"_totalContentHeight\\\"></div>\\n\", styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;transform:translateZ(0)}.cdk-virtual-scrollable{overflow:auto;will-change:scroll-position;contain:strict;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{height:1px;transform-origin:0 0;flex:0 0 auto}[dir=rtl] .cdk-virtual-scroll-spacer{transform-origin:100% 0}\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [VIRTUAL_SCROLL_STRATEGY]\n                }] }, { type: i2.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: ScrollDispatcher }, { type: ViewportRuler }, { type: CdkVirtualScrollable, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [VIRTUAL_SCROLLABLE]\n                }] }]; }, propDecorators: { orientation: [{\n                type: Input\n            }], appendOnly: [{\n                type: Input\n            }], scrolledIndexChange: [{\n                type: Output\n            }], _contentWrapper: [{\n                type: ViewChild,\n                args: ['contentWrapper', { static: true }]\n            }] } });\n\n/** Helper to extract the offset of a DOM Node in a certain direction. */\nfunction getOffset(orientation, direction, node) {\n    const el = node;\n    if (!el.getBoundingClientRect) {\n        return 0;\n    }\n    const rect = el.getBoundingClientRect();\n    if (orientation === 'horizontal') {\n        return direction === 'start' ? rect.left : rect.right;\n    }\n    return direction === 'start' ? rect.top : rect.bottom;\n}\n/**\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n * container.\n */\nclass CdkVirtualForOf {\n    /** The DataSource to display. */\n    get cdkVirtualForOf() {\n        return this._cdkVirtualForOf;\n    }\n    set cdkVirtualForOf(value) {\n        this._cdkVirtualForOf = value;\n        if (isDataSource(value)) {\n            this._dataSourceChanges.next(value);\n        }\n        else {\n            // If value is an an NgIterable, convert it to an array.\n            this._dataSourceChanges.next(new ArrayDataSource(isObservable(value) ? value : Array.from(value || [])));\n        }\n    }\n    /**\n     * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n     * the item and produces a value to be used as the item's identity when tracking changes.\n     */\n    get cdkVirtualForTrackBy() {\n        return this._cdkVirtualForTrackBy;\n    }\n    set cdkVirtualForTrackBy(fn) {\n        this._needsUpdate = true;\n        this._cdkVirtualForTrackBy = fn\n            ? (index, item) => fn(index + (this._renderedRange ? this._renderedRange.start : 0), item)\n            : undefined;\n    }\n    /** The template used to stamp out new elements. */\n    set cdkVirtualForTemplate(value) {\n        if (value) {\n            this._needsUpdate = true;\n            this._template = value;\n        }\n    }\n    /**\n     * The size of the cache used to store templates that are not being used for re-use later.\n     * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n     */\n    get cdkVirtualForTemplateCacheSize() {\n        return this._viewRepeater.viewCacheSize;\n    }\n    set cdkVirtualForTemplateCacheSize(size) {\n        this._viewRepeater.viewCacheSize = coerceNumberProperty(size);\n    }\n    constructor(\n    /** The view container to add items to. */\n    _viewContainerRef, \n    /** The template to use when stamping out new items. */\n    _template, \n    /** The set of available differs. */\n    _differs, \n    /** The strategy used to render items in the virtual scroll viewport. */\n    _viewRepeater, \n    /** The virtual scrolling viewport that these items are being rendered in. */\n    _viewport, ngZone) {\n        this._viewContainerRef = _viewContainerRef;\n        this._template = _template;\n        this._differs = _differs;\n        this._viewRepeater = _viewRepeater;\n        this._viewport = _viewport;\n        /** Emits when the rendered view of the data changes. */\n        this.viewChange = new Subject();\n        /** Subject that emits when a new DataSource instance is given. */\n        this._dataSourceChanges = new Subject();\n        /** Emits whenever the data in the current DataSource changes. */\n        this.dataStream = this._dataSourceChanges.pipe(\n        // Start off with null `DataSource`.\n        startWith(null), \n        // Bundle up the previous and current data sources so we can work with both.\n        pairwise(), \n        // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n        // new one, passing back a stream of data changes which we run through `switchMap` to give\n        // us a data stream that emits the latest data from whatever the current `DataSource` is.\n        switchMap(([prev, cur]) => this._changeDataSource(prev, cur)), \n        // Replay the last emitted data when someone subscribes.\n        shareReplay(1));\n        /** The differ used to calculate changes to the data. */\n        this._differ = null;\n        /** Whether the rendered data should be updated during the next ngDoCheck cycle. */\n        this._needsUpdate = false;\n        this._destroyed = new Subject();\n        this.dataStream.subscribe(data => {\n            this._data = data;\n            this._onRenderedDataChange();\n        });\n        this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe(range => {\n            this._renderedRange = range;\n            if (this.viewChange.observers.length) {\n                ngZone.run(() => this.viewChange.next(this._renderedRange));\n            }\n            this._onRenderedDataChange();\n        });\n        this._viewport.attach(this);\n    }\n    /**\n     * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n     * in the specified range. Throws an error if the range includes items that are not currently\n     * rendered.\n     */\n    measureRangeSize(range, orientation) {\n        if (range.start >= range.end) {\n            return 0;\n        }\n        if ((range.start < this._renderedRange.start || range.end > this._renderedRange.end) &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Error: attempted to measure an item that isn't rendered.`);\n        }\n        // The index into the list of rendered views for the first item in the range.\n        const renderedStartIndex = range.start - this._renderedRange.start;\n        // The length of the range we're measuring.\n        const rangeLen = range.end - range.start;\n        // Loop over all the views, find the first and land node and compute the size by subtracting\n        // the top of the first node from the bottom of the last one.\n        let firstNode;\n        let lastNode;\n        // Find the first node by starting from the beginning and going forwards.\n        for (let i = 0; i < rangeLen; i++) {\n            const view = this._viewContainerRef.get(i + renderedStartIndex);\n            if (view && view.rootNodes.length) {\n                firstNode = lastNode = view.rootNodes[0];\n                break;\n            }\n        }\n        // Find the last node by starting from the end and going backwards.\n        for (let i = rangeLen - 1; i > -1; i--) {\n            const view = this._viewContainerRef.get(i + renderedStartIndex);\n            if (view && view.rootNodes.length) {\n                lastNode = view.rootNodes[view.rootNodes.length - 1];\n                break;\n            }\n        }\n        return firstNode && lastNode\n            ? getOffset(orientation, 'end', lastNode) - getOffset(orientation, 'start', firstNode)\n            : 0;\n    }\n    ngDoCheck() {\n        if (this._differ && this._needsUpdate) {\n            // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of\n            // this list being rendered (can use simpler algorithm) vs needs update due to data actually\n            // changing (need to do this diff).\n            const changes = this._differ.diff(this._renderedItems);\n            if (!changes) {\n                this._updateContext();\n            }\n            else {\n                this._applyChanges(changes);\n            }\n            this._needsUpdate = false;\n        }\n    }\n    ngOnDestroy() {\n        this._viewport.detach();\n        this._dataSourceChanges.next(undefined);\n        this._dataSourceChanges.complete();\n        this.viewChange.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._viewRepeater.detach();\n    }\n    /** React to scroll state changes in the viewport. */\n    _onRenderedDataChange() {\n        if (!this._renderedRange) {\n            return;\n        }\n        this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n        if (!this._differ) {\n            // Use a wrapper function for the `trackBy` so any new values are\n            // picked up automatically without having to recreate the differ.\n            this._differ = this._differs.find(this._renderedItems).create((index, item) => {\n                return this.cdkVirtualForTrackBy ? this.cdkVirtualForTrackBy(index, item) : item;\n            });\n        }\n        this._needsUpdate = true;\n    }\n    /** Swap out one `DataSource` for another. */\n    _changeDataSource(oldDs, newDs) {\n        if (oldDs) {\n            oldDs.disconnect(this);\n        }\n        this._needsUpdate = true;\n        return newDs ? newDs.connect(this) : of();\n    }\n    /** Update the `CdkVirtualForOfContext` for all views. */\n    _updateContext() {\n        const count = this._data.length;\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            const view = this._viewContainerRef.get(i);\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n            view.detectChanges();\n        }\n    }\n    /** Apply changes to the DOM. */\n    _applyChanges(changes) {\n        this._viewRepeater.applyChanges(changes, this._viewContainerRef, (record, _adjustedPreviousIndex, currentIndex) => this._getEmbeddedViewArgs(record, currentIndex), record => record.item);\n        // Update $implicit for any items that had an identity change.\n        changes.forEachIdentityChange((record) => {\n            const view = this._viewContainerRef.get(record.currentIndex);\n            view.context.$implicit = record.item;\n        });\n        // Update the context variables on all items.\n        const count = this._data.length;\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            const view = this._viewContainerRef.get(i);\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n        }\n    }\n    /** Update the computed properties on the `CdkVirtualForOfContext`. */\n    _updateComputedContextProperties(context) {\n        context.first = context.index === 0;\n        context.last = context.index === context.count - 1;\n        context.even = context.index % 2 === 0;\n        context.odd = !context.even;\n    }\n    _getEmbeddedViewArgs(record, index) {\n        // Note that it's important that we insert the item directly at the proper index,\n        // rather than inserting it and the moving it in place, because if there's a directive\n        // on the same node that injects the `ViewContainerRef`, Angular will insert another\n        // comment node which can throw off the move when it's being repeated for all items.\n        return {\n            templateRef: this._template,\n            context: {\n                $implicit: record.item,\n                // It's guaranteed that the iterable is not \"undefined\" or \"null\" because we only\n                // generate views for elements if the \"cdkVirtualForOf\" iterable has elements.\n                cdkVirtualForOf: this._cdkVirtualForOf,\n                index: -1,\n                count: -1,\n                first: false,\n                last: false,\n                odd: false,\n                even: false,\n            },\n            index,\n        };\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkVirtualForOf, deps: [{ token: i0.ViewContainerRef }, { token: i0.TemplateRef }, { token: i0.IterableDiffers }, { token: _VIEW_REPEATER_STRATEGY }, { token: CdkVirtualScrollViewport, skipSelf: true }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: CdkVirtualForOf, isStandalone: true, selector: \"[cdkVirtualFor][cdkVirtualForOf]\", inputs: { cdkVirtualForOf: \"cdkVirtualForOf\", cdkVirtualForTrackBy: \"cdkVirtualForTrackBy\", cdkVirtualForTemplate: \"cdkVirtualForTemplate\", cdkVirtualForTemplateCacheSize: \"cdkVirtualForTemplateCacheSize\" }, providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkVirtualForOf, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkVirtualFor][cdkVirtualForOf]',\n                    providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }],\n                    standalone: true,\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: i0.TemplateRef }, { type: i0.IterableDiffers }, { type: i2$1._RecycleViewRepeaterStrategy, decorators: [{\n                    type: Inject,\n                    args: [_VIEW_REPEATER_STRATEGY]\n                }] }, { type: CdkVirtualScrollViewport, decorators: [{\n                    type: SkipSelf\n                }] }, { type: i0.NgZone }]; }, propDecorators: { cdkVirtualForOf: [{\n                type: Input\n            }], cdkVirtualForTrackBy: [{\n                type: Input\n            }], cdkVirtualForTemplate: [{\n                type: Input\n            }], cdkVirtualForTemplateCacheSize: [{\n                type: Input\n            }] } });\n\n/**\n * Provides a virtual scrollable for the element it is attached to.\n */\nclass CdkVirtualScrollableElement extends CdkVirtualScrollable {\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n        super(elementRef, scrollDispatcher, ngZone, dir);\n    }\n    measureBoundingClientRectWithScrollOffset(from) {\n        return (this.getElementRef().nativeElement.getBoundingClientRect()[from] -\n            this.measureScrollOffset(from));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkVirtualScrollableElement, deps: [{ token: i0.ElementRef }, { token: ScrollDispatcher }, { token: i0.NgZone }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: CdkVirtualScrollableElement, isStandalone: true, selector: \"[cdkVirtualScrollingElement]\", host: { classAttribute: \"cdk-virtual-scrollable\" }, providers: [{ provide: VIRTUAL_SCROLLABLE, useExisting: CdkVirtualScrollableElement }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkVirtualScrollableElement, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkVirtualScrollingElement]',\n                    providers: [{ provide: VIRTUAL_SCROLLABLE, useExisting: CdkVirtualScrollableElement }],\n                    standalone: true,\n                    host: {\n                        'class': 'cdk-virtual-scrollable',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: ScrollDispatcher }, { type: i0.NgZone }, { type: i2.Directionality, decorators: [{\n                    type: Optional\n                }] }]; } });\n\n/**\n * Provides as virtual scrollable for the global / window scrollbar.\n */\nclass CdkVirtualScrollableWindow extends CdkVirtualScrollable {\n    constructor(scrollDispatcher, ngZone, dir) {\n        super(new ElementRef(document.documentElement), scrollDispatcher, ngZone, dir);\n        this._elementScrolled = new Observable((observer) => this.ngZone.runOutsideAngular(() => fromEvent(document, 'scroll').pipe(takeUntil(this._destroyed)).subscribe(observer)));\n    }\n    measureBoundingClientRectWithScrollOffset(from) {\n        return this.getElementRef().nativeElement.getBoundingClientRect()[from];\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkVirtualScrollableWindow, deps: [{ token: ScrollDispatcher }, { token: i0.NgZone }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: CdkVirtualScrollableWindow, isStandalone: true, selector: \"cdk-virtual-scroll-viewport[scrollWindow]\", providers: [{ provide: VIRTUAL_SCROLLABLE, useExisting: CdkVirtualScrollableWindow }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkVirtualScrollableWindow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-virtual-scroll-viewport[scrollWindow]',\n                    providers: [{ provide: VIRTUAL_SCROLLABLE, useExisting: CdkVirtualScrollableWindow }],\n                    standalone: true,\n                }]\n        }], ctorParameters: function () { return [{ type: ScrollDispatcher }, { type: i0.NgZone }, { type: i2.Directionality, decorators: [{\n                    type: Optional\n                }] }]; } });\n\nclass CdkScrollableModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkScrollableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkScrollableModule, imports: [CdkScrollable], exports: [CdkScrollable] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkScrollableModule }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkScrollableModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [CdkScrollable],\n                    imports: [CdkScrollable],\n                }]\n        }] });\n/**\n * @docs-primary-export\n */\nclass ScrollingModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: ScrollingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.0\", ngImport: i0, type: ScrollingModule, imports: [BidiModule, CdkScrollableModule, CdkVirtualScrollViewport,\n            CdkFixedSizeVirtualScroll,\n            CdkVirtualForOf,\n            CdkVirtualScrollableWindow,\n            CdkVirtualScrollableElement], exports: [BidiModule, CdkScrollableModule, CdkFixedSizeVirtualScroll,\n            CdkVirtualForOf,\n            CdkVirtualScrollViewport,\n            CdkVirtualScrollableWindow,\n            CdkVirtualScrollableElement] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: ScrollingModule, imports: [BidiModule,\n            CdkScrollableModule, BidiModule, CdkScrollableModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: ScrollingModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        BidiModule,\n                        CdkScrollableModule,\n                        CdkVirtualScrollViewport,\n                        CdkFixedSizeVirtualScroll,\n                        CdkVirtualForOf,\n                        CdkVirtualScrollableWindow,\n                        CdkVirtualScrollableElement,\n                    ],\n                    exports: [\n                        BidiModule,\n                        CdkScrollableModule,\n                        CdkFixedSizeVirtualScroll,\n                        CdkVirtualForOf,\n                        CdkVirtualScrollViewport,\n                        CdkVirtualScrollableWindow,\n                        CdkVirtualScrollableElement,\n                    ],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkFixedSizeVirtualScroll, CdkScrollable, CdkScrollableModule, CdkVirtualForOf, CdkVirtualScrollViewport, CdkVirtualScrollable, CdkVirtualScrollableElement, CdkVirtualScrollableWindow, DEFAULT_RESIZE_TIME, DEFAULT_SCROLL_TIME, FixedSizeVirtualScrollStrategy, ScrollDispatcher, ScrollingModule, VIRTUAL_SCROLLABLE, VIRTUAL_SCROLL_STRATEGY, ViewportRuler, _fixedSizeVirtualScrollStrategyFactory };\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function pairwise() {\n    return operate((source, subscriber) => {\n        let prev;\n        let hasPrev = false;\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            const p = prev;\n            prev = value;\n            hasPrev && subscriber.next([p, value]);\n            hasPrev = true;\n        }));\n    });\n}\n","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (null != _i) {\n    var _s,\n      _e,\n      _x,\n      _r,\n      _arr = [],\n      _n = !0,\n      _d = !1;\n    try {\n      if (_x = (_i = _i.call(arr)).next, 0 === i) {\n        if (Object(_i) !== _i) return;\n        _n = !1;\n      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);\n    } catch (err) {\n      _d = !0, _e = err;\n    } finally {\n      try {\n        if (!_n && null != _i[\"return\"] && (_r = _i[\"return\"](), Object(_r) !== _r)) return;\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n}"],"x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]}