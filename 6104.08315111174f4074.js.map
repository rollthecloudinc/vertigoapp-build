{"version":3,"file":"6104.08315111174f4074.js","mappings":"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","names":["ObjectUnsubscribedError","createErrorClass","_super","this","name","message","Subject","_Observable","_inherits","_createSuper","_this","_classCallCheck","call","closed","currentObservers","observers","isStopped","hasError","thrownError","_createClass","key","value","operator","subject","AnonymousSubject","_this2","errorContext","_throwIfClosed","Array","from","_step","_iterator","_createForOfIteratorHelper","s","n","done","next","err","e","f","_this3","length","shift","error","_this4","complete","get","_a","subscriber","_get","_getPrototypeOf","prototype","_checkFinalizedStatuses","_innerSubscribe","_this5","EMPTY_SUBSCRIPTION","push","Subscription","arrRemove","observable","Observable","source","create","destination","_Subject","_super2","_this6","_b","subscribe","EMPTY","forkJoin","_len","arguments","args","_key","resultSelector","popResultSelector","_argsArgArrayOrObject","argsArgArrayOrObject","sources","keys","result","values","remainingCompletions","remainingEmissions","_loop","sourceIndex","hasValue","innerFrom","createOperatorSubscriber","undefined","createObject","pipe","mapOneOrManyArgs","throwError","errorOrErrorFactory","scheduler","errorFactory","isFunction","init","schedule","catchError","selector","operate","handledResult","innerSub","syncUnsub","unsubscribe","finalize","callback","add","map","project","thisArg","index","take","count","seen","tap","observerOrNext","tapObserver","isUnsub","identity","isArray","getPrototypeOf","Object","objectProto","getKeys","first","isPOJO","obj","reduce","i","fn","callOrApply","apply","_toConsumableArray","policy","_c0","trustedHTMLFromString","html","_getPolicy","getPolicy","window","ttWindow","trustedTypes","createPolicy","createHTML","getMatIconNameNotFoundError","iconName","Error","concat","getMatIconNoHttpProviderError","getMatIconFailedToSanitizeUrlError","url","getMatIconFailedToSanitizeLiteralError","literal","SvgIconConfig","svgText","options","MatIconRegistry","_httpClient","_sanitizer","document","_errorHandler","_svgIconConfigs","Map","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_resolvers","_defaultFontSetClass","_document","addSvgIconInNamespace","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","resolver","cleanLiteral","sanitize","SecurityContext","trustedLiteral","addSvgIconSetInNamespace","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","alias","set","classNames","safeUrl","cachedIcon","of","cloneSvg","_loadSvgIconFromConfig","svg","iconKey","config","_getSvgFromConfig","_getIconConfigFromResolvers","iconSetConfigs","_getSvgFromIconSetConfigs","clear","_svgElementFromConfig","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","filter","iconSetConfig","_loadSvgIconSetFromConfig","errorMessage","handleError","foundIcon","toString","indexOf","_extractSvgIconFromSet","_fetchIcon","iconSet","iconSource","querySelector","iconElement","cloneNode","removeAttribute","nodeName","toLowerCase","_setSvgAttributes","_toSvgElement","_svgElementFromString","appendChild","str","div","createElement","innerHTML","element","attributes","_attributes$i","setAttribute","childNodes","nodeType","ELEMENT_NODE","viewBox","iconConfig","_options$withCredenti","withCredentials","inProgressFetch","req","responseType","delete","share","configNamespace","svgElement","isSafeUrlWithOptions","ɵfac","t","i0","i1","i2","DOCUMENT","ɵprov","token","factory","providedIn","ICON_REGISTRY_PROVIDER_FACTORY","parentRegistry","httpClient","sanitizer","errorHandler","ICON_REGISTRY_PROVIDER","provide","deps","Optional","SkipSelf","HttpClient","DomSanitizer","ErrorHandler","useFactory","_MatIconBase","mixinColor","_class","_elementRef","MAT_ICON_DEFAULT_OPTIONS","InjectionToken","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","inject","_location","location","getPathname","pathname","search","funcIriAttributes","funcIriAttributeSelector","attr","join","funcIriPattern","MatIcon","_MatIconBase2","elementRef","_iconRegistry","ariaHidden","defaults","_inline","_previousFontSetClass","_currentIconFetch","color","defaultColor","fontSet","nativeElement","inline","coerceBooleanProperty","_svgIcon","_updateSvgIcon","_clearSvgElement","_fontSet","newValue","_cleanupFontValue","_updateFontIconClasses","_fontIcon","parts","split","cachedElements","_elementsWithExternalReferences","size","newPath","_previousPath","_prependPathToReferences","svgIcon","path","_cacheChildrenWithExternalReferences","layoutElement","childCount","child","remove","_usingFontIcon","elem","fontSetClasses","classNameForFontAlias","getDefaultFontSetClass","className","forEach","classList","fontIcon","_previousFontIconClass","includes","trim","elements","attrs","elementsWithFuncIri","querySelectorAll","elementWithReference","getAttribute","match","rawName","_svgNamespace","_svgName","_this$_splitIconName","_splitIconName","_this$_splitIconName2","_slicedToArray","getNamedSvgIcon","_setSvgElement","ɵcmp","type","selectors","hostAttrs","hostVars","hostBindings","rf","ctx","inputs","exportAs","features","ngContentSelectors","decls","vars","template","styles","encapsulation","changeDetection","MatIconModule","ɵmod","ɵinj","imports","MatCommonModule","_arrayWithHoles","arr","_nonIterableRest","TypeError","arrayWithHoles","Z","_iterableToArrayLimit","_i","Symbol","iterator","_s","_e","_x","_r","_arr","_n","_d","return","unsupportedIterableToArray","nonIterableRest"],"sourceRoot":"webpack:///","sources":["./node_modules/rxjs/dist/esm/internal/util/ObjectUnsubscribedError.js","./node_modules/rxjs/dist/esm/internal/Subject.js","./node_modules/rxjs/dist/esm/internal/observable/empty.js","./node_modules/rxjs/dist/esm/internal/observable/forkJoin.js","./node_modules/rxjs/dist/esm/internal/observable/throwError.js","./node_modules/rxjs/dist/esm/internal/operators/catchError.js","./node_modules/rxjs/dist/esm/internal/operators/finalize.js","./node_modules/rxjs/dist/esm/internal/operators/map.js","./node_modules/rxjs/dist/esm/internal/operators/take.js","./node_modules/rxjs/dist/esm/internal/operators/tap.js","./node_modules/rxjs/dist/esm/internal/util/argsArgArrayOrObject.js","./node_modules/rxjs/dist/esm/internal/util/createObject.js","./node_modules/rxjs/dist/esm/internal/util/mapOneOrManyArgs.js","./node_modules/@angular/material/fesm2022/icon.mjs","./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","./node_modules/@babel/runtime/helpers/esm/slicedToArray.js","./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js"],"sourcesContent":["import { createErrorClass } from './createErrorClass';\nexport const ObjectUnsubscribedError = createErrorClass((_super) => function ObjectUnsubscribedErrorImpl() {\n    _super(this);\n    this.name = 'ObjectUnsubscribedError';\n    this.message = 'object unsubscribed';\n});\n","import { Observable } from './Observable';\nimport { Subscription, EMPTY_SUBSCRIPTION } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { arrRemove } from './util/arrRemove';\nimport { errorContext } from './util/errorContext';\nexport class Subject extends Observable {\n    constructor() {\n        super();\n        this.closed = false;\n        this.currentObservers = null;\n        this.observers = [];\n        this.isStopped = false;\n        this.hasError = false;\n        this.thrownError = null;\n    }\n    lift(operator) {\n        const subject = new AnonymousSubject(this, this);\n        subject.operator = operator;\n        return subject;\n    }\n    _throwIfClosed() {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n    }\n    next(value) {\n        errorContext(() => {\n            this._throwIfClosed();\n            if (!this.isStopped) {\n                if (!this.currentObservers) {\n                    this.currentObservers = Array.from(this.observers);\n                }\n                for (const observer of this.currentObservers) {\n                    observer.next(value);\n                }\n            }\n        });\n    }\n    error(err) {\n        errorContext(() => {\n            this._throwIfClosed();\n            if (!this.isStopped) {\n                this.hasError = this.isStopped = true;\n                this.thrownError = err;\n                const { observers } = this;\n                while (observers.length) {\n                    observers.shift().error(err);\n                }\n            }\n        });\n    }\n    complete() {\n        errorContext(() => {\n            this._throwIfClosed();\n            if (!this.isStopped) {\n                this.isStopped = true;\n                const { observers } = this;\n                while (observers.length) {\n                    observers.shift().complete();\n                }\n            }\n        });\n    }\n    unsubscribe() {\n        this.isStopped = this.closed = true;\n        this.observers = this.currentObservers = null;\n    }\n    get observed() {\n        var _a;\n        return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;\n    }\n    _trySubscribe(subscriber) {\n        this._throwIfClosed();\n        return super._trySubscribe(subscriber);\n    }\n    _subscribe(subscriber) {\n        this._throwIfClosed();\n        this._checkFinalizedStatuses(subscriber);\n        return this._innerSubscribe(subscriber);\n    }\n    _innerSubscribe(subscriber) {\n        const { hasError, isStopped, observers } = this;\n        if (hasError || isStopped) {\n            return EMPTY_SUBSCRIPTION;\n        }\n        this.currentObservers = null;\n        observers.push(subscriber);\n        return new Subscription(() => {\n            this.currentObservers = null;\n            arrRemove(observers, subscriber);\n        });\n    }\n    _checkFinalizedStatuses(subscriber) {\n        const { hasError, thrownError, isStopped } = this;\n        if (hasError) {\n            subscriber.error(thrownError);\n        }\n        else if (isStopped) {\n            subscriber.complete();\n        }\n    }\n    asObservable() {\n        const observable = new Observable();\n        observable.source = this;\n        return observable;\n    }\n}\nSubject.create = (destination, source) => {\n    return new AnonymousSubject(destination, source);\n};\nexport class AnonymousSubject extends Subject {\n    constructor(destination, source) {\n        super();\n        this.destination = destination;\n        this.source = source;\n    }\n    next(value) {\n        var _a, _b;\n        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.call(_a, value);\n    }\n    error(err) {\n        var _a, _b;\n        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.call(_a, err);\n    }\n    complete() {\n        var _a, _b;\n        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);\n    }\n    _subscribe(subscriber) {\n        var _a, _b;\n        return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : EMPTY_SUBSCRIPTION;\n    }\n}\n","import { Observable } from '../Observable';\nexport const EMPTY = new Observable((subscriber) => subscriber.complete());\nexport function empty(scheduler) {\n    return scheduler ? emptyScheduled(scheduler) : EMPTY;\n}\nfunction emptyScheduled(scheduler) {\n    return new Observable((subscriber) => scheduler.schedule(() => subscriber.complete()));\n}\n","import { Observable } from '../Observable';\nimport { argsArgArrayOrObject } from '../util/argsArgArrayOrObject';\nimport { innerFrom } from './innerFrom';\nimport { popResultSelector } from '../util/args';\nimport { createOperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nimport { createObject } from '../util/createObject';\nexport function forkJoin(...args) {\n    const resultSelector = popResultSelector(args);\n    const { args: sources, keys } = argsArgArrayOrObject(args);\n    const result = new Observable((subscriber) => {\n        const { length } = sources;\n        if (!length) {\n            subscriber.complete();\n            return;\n        }\n        const values = new Array(length);\n        let remainingCompletions = length;\n        let remainingEmissions = length;\n        for (let sourceIndex = 0; sourceIndex < length; sourceIndex++) {\n            let hasValue = false;\n            innerFrom(sources[sourceIndex]).subscribe(createOperatorSubscriber(subscriber, (value) => {\n                if (!hasValue) {\n                    hasValue = true;\n                    remainingEmissions--;\n                }\n                values[sourceIndex] = value;\n            }, () => remainingCompletions--, undefined, () => {\n                if (!remainingCompletions || !hasValue) {\n                    if (!remainingEmissions) {\n                        subscriber.next(keys ? createObject(keys, values) : values);\n                    }\n                    subscriber.complete();\n                }\n            }));\n        }\n    });\n    return resultSelector ? result.pipe(mapOneOrManyArgs(resultSelector)) : result;\n}\n","import { Observable } from '../Observable';\nimport { isFunction } from '../util/isFunction';\nexport function throwError(errorOrErrorFactory, scheduler) {\n    const errorFactory = isFunction(errorOrErrorFactory) ? errorOrErrorFactory : () => errorOrErrorFactory;\n    const init = (subscriber) => subscriber.error(errorFactory());\n    return new Observable(scheduler ? (subscriber) => scheduler.schedule(init, 0, subscriber) : init);\n}\n","import { innerFrom } from '../observable/innerFrom';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { operate } from '../util/lift';\nexport function catchError(selector) {\n    return operate((source, subscriber) => {\n        let innerSub = null;\n        let syncUnsub = false;\n        let handledResult;\n        innerSub = source.subscribe(createOperatorSubscriber(subscriber, undefined, undefined, (err) => {\n            handledResult = innerFrom(selector(err, catchError(selector)(source)));\n            if (innerSub) {\n                innerSub.unsubscribe();\n                innerSub = null;\n                handledResult.subscribe(subscriber);\n            }\n            else {\n                syncUnsub = true;\n            }\n        }));\n        if (syncUnsub) {\n            innerSub.unsubscribe();\n            innerSub = null;\n            handledResult.subscribe(subscriber);\n        }\n    });\n}\n","import { operate } from '../util/lift';\nexport function finalize(callback) {\n    return operate((source, subscriber) => {\n        try {\n            source.subscribe(subscriber);\n        }\n        finally {\n            subscriber.add(callback);\n        }\n    });\n}\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function map(project, thisArg) {\n    return operate((source, subscriber) => {\n        let index = 0;\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            subscriber.next(project.call(thisArg, value, index++));\n        }));\n    });\n}\n","import { EMPTY } from '../observable/empty';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function take(count) {\n    return count <= 0\n        ?\n            () => EMPTY\n        : operate((source, subscriber) => {\n            let seen = 0;\n            source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n                if (++seen <= count) {\n                    subscriber.next(value);\n                    if (count <= seen) {\n                        subscriber.complete();\n                    }\n                }\n            }));\n        });\n}\n","import { isFunction } from '../util/isFunction';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { identity } from '../util/identity';\nexport function tap(observerOrNext, error, complete) {\n    const tapObserver = isFunction(observerOrNext) || error || complete\n        ?\n            { next: observerOrNext, error, complete }\n        : observerOrNext;\n    return tapObserver\n        ? operate((source, subscriber) => {\n            var _a;\n            (_a = tapObserver.subscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);\n            let isUnsub = true;\n            source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n                var _a;\n                (_a = tapObserver.next) === null || _a === void 0 ? void 0 : _a.call(tapObserver, value);\n                subscriber.next(value);\n            }, () => {\n                var _a;\n                isUnsub = false;\n                (_a = tapObserver.complete) === null || _a === void 0 ? void 0 : _a.call(tapObserver);\n                subscriber.complete();\n            }, (err) => {\n                var _a;\n                isUnsub = false;\n                (_a = tapObserver.error) === null || _a === void 0 ? void 0 : _a.call(tapObserver, err);\n                subscriber.error(err);\n            }, () => {\n                var _a, _b;\n                if (isUnsub) {\n                    (_a = tapObserver.unsubscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);\n                }\n                (_b = tapObserver.finalize) === null || _b === void 0 ? void 0 : _b.call(tapObserver);\n            }));\n        })\n        :\n            identity;\n}\n","const { isArray } = Array;\nconst { getPrototypeOf, prototype: objectProto, keys: getKeys } = Object;\nexport function argsArgArrayOrObject(args) {\n    if (args.length === 1) {\n        const first = args[0];\n        if (isArray(first)) {\n            return { args: first, keys: null };\n        }\n        if (isPOJO(first)) {\n            const keys = getKeys(first);\n            return {\n                args: keys.map((key) => first[key]),\n                keys,\n            };\n        }\n    }\n    return { args: args, keys: null };\n}\nfunction isPOJO(obj) {\n    return obj && typeof obj === 'object' && getPrototypeOf(obj) === objectProto;\n}\n","export function createObject(keys, values) {\n    return keys.reduce((result, key, i) => ((result[key] = values[i]), result), {});\n}\n","import { map } from \"../operators/map\";\nconst { isArray } = Array;\nfunction callOrApply(fn, args) {\n    return isArray(args) ? fn(...args) : fn(args);\n}\nexport function mapOneOrManyArgs(fn) {\n    return map(args => callOrApply(fn, args));\n}\n","import * as i0 from '@angular/core';\nimport { SecurityContext, Injectable, Optional, Inject, SkipSelf, ErrorHandler, InjectionToken, inject, Component, ViewEncapsulation, ChangeDetectionStrategy, Attribute, Input, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DOCUMENT } from '@angular/common';\nimport { of, throwError, forkJoin, Subscription } from 'rxjs';\nimport { tap, map, catchError, finalize, share, take } from 'rxjs/operators';\nimport * as i1 from '@angular/common/http';\nimport { HttpClient } from '@angular/common/http';\nimport * as i2 from '@angular/platform-browser';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n/**\n * The Trusted Types policy, or null if Trusted Types are not\n * enabled/supported, or undefined if the policy has not been created yet.\n */\nlet policy;\n/**\n * Returns the Trusted Types policy, or null if Trusted Types are not\n * enabled/supported. The first call to this function will create the policy.\n */\nfunction getPolicy() {\n    if (policy === undefined) {\n        policy = null;\n        if (typeof window !== 'undefined') {\n            const ttWindow = window;\n            if (ttWindow.trustedTypes !== undefined) {\n                policy = ttWindow.trustedTypes.createPolicy('angular#components', {\n                    createHTML: (s) => s,\n                });\n            }\n        }\n    }\n    return policy;\n}\n/**\n * Unsafely promote a string to a TrustedHTML, falling back to strings when\n * Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that the\n * provided string will never cause an XSS vulnerability if used in a context\n * that will be interpreted as HTML by a browser, e.g. when assigning to\n * element.innerHTML.\n */\nfunction trustedHTMLFromString(html) {\n    return getPolicy()?.createHTML(html) || html;\n}\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nfunction getMatIconNameNotFoundError(iconName) {\n    return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/common/http.\n * @docs-private\n */\nfunction getMatIconNoHttpProviderError() {\n    return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n        'Please include the HttpClientModule from @angular/common/http in your ' +\n        'app imports.');\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nfunction getMatIconFailedToSanitizeUrlError(url) {\n    return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n        `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nfunction getMatIconFailedToSanitizeLiteralError(literal) {\n    return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n        `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n    constructor(url, svgText, options) {\n        this.url = url;\n        this.svgText = svgText;\n        this.options = options;\n    }\n}\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\nclass MatIconRegistry {\n    constructor(_httpClient, _sanitizer, document, _errorHandler) {\n        this._httpClient = _httpClient;\n        this._sanitizer = _sanitizer;\n        this._errorHandler = _errorHandler;\n        /**\n         * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n         */\n        this._svgIconConfigs = new Map();\n        /**\n         * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n         * Multiple icon sets can be registered under the same namespace.\n         */\n        this._iconSetConfigs = new Map();\n        /** Cache for icons loaded by direct URLs. */\n        this._cachedIconsByUrl = new Map();\n        /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n        this._inProgressUrlFetches = new Map();\n        /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n        this._fontCssClassesByAlias = new Map();\n        /** Registered icon resolver functions. */\n        this._resolvers = [];\n        /**\n         * The CSS classes to apply when an `<mat-icon>` component has no icon name, url, or font\n         * specified. The default 'material-icons' value assumes that the material icon font has been\n         * loaded as described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n         */\n        this._defaultFontSetClass = ['material-icons', 'mat-ligature-font'];\n        this._document = document;\n    }\n    /**\n     * Registers an icon by URL in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n    addSvgIcon(iconName, url, options) {\n        return this.addSvgIconInNamespace('', iconName, url, options);\n    }\n    /**\n     * Registers an icon using an HTML string in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n    addSvgIconLiteral(iconName, literal, options) {\n        return this.addSvgIconLiteralInNamespace('', iconName, literal, options);\n    }\n    /**\n     * Registers an icon by URL in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n    addSvgIconInNamespace(namespace, iconName, url, options) {\n        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url, null, options));\n    }\n    /**\n     * Registers an icon resolver function with the registry. The function will be invoked with the\n     * name and namespace of an icon when the registry tries to resolve the URL from which to fetch\n     * the icon. The resolver is expected to return a `SafeResourceUrl` that points to the icon,\n     * an object with the icon URL and icon options, or `null` if the icon is not supported. Resolvers\n     * will be invoked in the order in which they have been registered.\n     * @param resolver Resolver function to be registered.\n     */\n    addSvgIconResolver(resolver) {\n        this._resolvers.push(resolver);\n        return this;\n    }\n    /**\n     * Registers an icon using an HTML string in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n    addSvgIconLiteralInNamespace(namespace, iconName, literal, options) {\n        const cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n        // TODO: add an ngDevMode check\n        if (!cleanLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        // Security: The literal is passed in as SafeHtml, and is thus trusted.\n        const trustedLiteral = trustedHTMLFromString(cleanLiteral);\n        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig('', trustedLiteral, options));\n    }\n    /**\n     * Registers an icon set by URL in the default namespace.\n     * @param url\n     */\n    addSvgIconSet(url, options) {\n        return this.addSvgIconSetInNamespace('', url, options);\n    }\n    /**\n     * Registers an icon set using an HTML string in the default namespace.\n     * @param literal SVG source of the icon set.\n     */\n    addSvgIconSetLiteral(literal, options) {\n        return this.addSvgIconSetLiteralInNamespace('', literal, options);\n    }\n    /**\n     * Registers an icon set by URL in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param url\n     */\n    addSvgIconSetInNamespace(namespace, url, options) {\n        return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url, null, options));\n    }\n    /**\n     * Registers an icon set using an HTML string in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param literal SVG source of the icon set.\n     */\n    addSvgIconSetLiteralInNamespace(namespace, literal, options) {\n        const cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n        if (!cleanLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        // Security: The literal is passed in as SafeHtml, and is thus trusted.\n        const trustedLiteral = trustedHTMLFromString(cleanLiteral);\n        return this._addSvgIconSetConfig(namespace, new SvgIconConfig('', trustedLiteral, options));\n    }\n    /**\n     * Defines an alias for CSS class names to be used for icon fonts. Creating an matIcon\n     * component with the alias as the fontSet input will cause the class name to be applied\n     * to the `<mat-icon>` element.\n     *\n     * If the registered font is a ligature font, then don't forget to also include the special\n     * class `mat-ligature-font` to allow the usage via attribute. So register like this:\n     *\n     * ```ts\n     * iconRegistry.registerFontClassAlias('f1', 'font1 mat-ligature-font');\n     * ```\n     *\n     * And use like this:\n     *\n     * ```html\n     * <mat-icon fontSet=\"f1\" fontIcon=\"home\"></mat-icon>\n     * ```\n     *\n     * @param alias Alias for the font.\n     * @param classNames Class names override to be used instead of the alias.\n     */\n    registerFontClassAlias(alias, classNames = alias) {\n        this._fontCssClassesByAlias.set(alias, classNames);\n        return this;\n    }\n    /**\n     * Returns the CSS class name associated with the alias by a previous call to\n     * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n     */\n    classNameForFontAlias(alias) {\n        return this._fontCssClassesByAlias.get(alias) || alias;\n    }\n    /**\n     * Sets the CSS classes to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     */\n    setDefaultFontSetClass(...classNames) {\n        this._defaultFontSetClass = classNames;\n        return this;\n    }\n    /**\n     * Returns the CSS classes to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     */\n    getDefaultFontSetClass() {\n        return this._defaultFontSetClass;\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n     * The response from the URL may be cached so this will not always cause an HTTP request, but\n     * the produced element will always be a new copy of the originally fetched icon. (That is,\n     * it will not contain any modifications made to elements previously returned).\n     *\n     * @param safeUrl URL from which to fetch the SVG icon.\n     */\n    getSvgIconFromUrl(safeUrl) {\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        const cachedIcon = this._cachedIconsByUrl.get(url);\n        if (cachedIcon) {\n            return of(cloneSvg(cachedIcon));\n        }\n        return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl, null)).pipe(tap(svg => this._cachedIconsByUrl.set(url, svg)), map(svg => cloneSvg(svg)));\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n     * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n     * if not, the Observable will throw an error.\n     *\n     * @param name Name of the icon to be retrieved.\n     * @param namespace Namespace in which to look for the icon.\n     */\n    getNamedSvgIcon(name, namespace = '') {\n        const key = iconKey(namespace, name);\n        let config = this._svgIconConfigs.get(key);\n        // Return (copy of) cached icon if possible.\n        if (config) {\n            return this._getSvgFromConfig(config);\n        }\n        // Otherwise try to resolve the config from one of the resolver functions.\n        config = this._getIconConfigFromResolvers(namespace, name);\n        if (config) {\n            this._svgIconConfigs.set(key, config);\n            return this._getSvgFromConfig(config);\n        }\n        // See if we have any icon sets registered for the namespace.\n        const iconSetConfigs = this._iconSetConfigs.get(namespace);\n        if (iconSetConfigs) {\n            return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n        }\n        return throwError(getMatIconNameNotFoundError(key));\n    }\n    ngOnDestroy() {\n        this._resolvers = [];\n        this._svgIconConfigs.clear();\n        this._iconSetConfigs.clear();\n        this._cachedIconsByUrl.clear();\n    }\n    /**\n     * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n     */\n    _getSvgFromConfig(config) {\n        if (config.svgText) {\n            // We already have the SVG element for this icon, return a copy.\n            return of(cloneSvg(this._svgElementFromConfig(config)));\n        }\n        else {\n            // Fetch the icon from the config's URL, cache it, and return a copy.\n            return this._loadSvgIconFromConfig(config).pipe(map(svg => cloneSvg(svg)));\n        }\n    }\n    /**\n     * Attempts to find an icon with the specified name in any of the SVG icon sets.\n     * First searches the available cached icons for a nested element with a matching name, and\n     * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n     * that have not been cached, and searches again after all fetches are completed.\n     * The returned Observable produces the SVG element if possible, and throws\n     * an error if no icon with the specified name can be found.\n     */\n    _getSvgFromIconSetConfigs(name, iconSetConfigs) {\n        // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n        // requested name.\n        const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n        if (namedIcon) {\n            // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n            // time anyway, there's probably not much advantage compared to just always extracting\n            // it from the icon set.\n            return of(namedIcon);\n        }\n        // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n        // fetched, fetch them now and look for iconName in the results.\n        const iconSetFetchRequests = iconSetConfigs\n            .filter(iconSetConfig => !iconSetConfig.svgText)\n            .map(iconSetConfig => {\n            return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(catchError((err) => {\n                const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n                // Swallow errors fetching individual URLs so the\n                // combined Observable won't necessarily fail.\n                const errorMessage = `Loading icon set URL: ${url} failed: ${err.message}`;\n                this._errorHandler.handleError(new Error(errorMessage));\n                return of(null);\n            }));\n        });\n        // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n        // cached SVG element (unless the request failed), and we can check again for the icon.\n        return forkJoin(iconSetFetchRequests).pipe(map(() => {\n            const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n            // TODO: add an ngDevMode check\n            if (!foundIcon) {\n                throw getMatIconNameNotFoundError(name);\n            }\n            return foundIcon;\n        }));\n    }\n    /**\n     * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n    _extractIconWithNameFromAnySet(iconName, iconSetConfigs) {\n        // Iterate backwards, so icon sets added later have precedence.\n        for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n            const config = iconSetConfigs[i];\n            // Parsing the icon set's text into an SVG element can be expensive. We can avoid some of\n            // the parsing by doing a quick check using `indexOf` to see if there's any chance for the\n            // icon to be in the set. This won't be 100% accurate, but it should help us avoid at least\n            // some of the parsing.\n            if (config.svgText && config.svgText.toString().indexOf(iconName) > -1) {\n                const svg = this._svgElementFromConfig(config);\n                const foundIcon = this._extractSvgIconFromSet(svg, iconName, config.options);\n                if (foundIcon) {\n                    return foundIcon;\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     */\n    _loadSvgIconFromConfig(config) {\n        return this._fetchIcon(config).pipe(tap(svgText => (config.svgText = svgText)), map(() => this._svgElementFromConfig(config)));\n    }\n    /**\n     * Loads the content of the icon set URL specified in the\n     * SvgIconConfig and attaches it to the config.\n     */\n    _loadSvgIconSetFromConfig(config) {\n        if (config.svgText) {\n            return of(null);\n        }\n        return this._fetchIcon(config).pipe(tap(svgText => (config.svgText = svgText)));\n    }\n    /**\n     * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n    _extractSvgIconFromSet(iconSet, iconName, options) {\n        // Use the `id=\"iconName\"` syntax in order to escape special\n        // characters in the ID (versus using the #iconName syntax).\n        const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\n        if (!iconSource) {\n            return null;\n        }\n        // Clone the element and remove the ID to prevent multiple elements from being added\n        // to the page with the same ID.\n        const iconElement = iconSource.cloneNode(true);\n        iconElement.removeAttribute('id');\n        // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n        // the content of a new <svg> node.\n        if (iconElement.nodeName.toLowerCase() === 'svg') {\n            return this._setSvgAttributes(iconElement, options);\n        }\n        // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n        // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n        // tag is problematic on Firefox, because it needs to include the current page path.\n        if (iconElement.nodeName.toLowerCase() === 'symbol') {\n            return this._setSvgAttributes(this._toSvgElement(iconElement), options);\n        }\n        // createElement('SVG') doesn't work as expected; the DOM ends up with\n        // the correct nodes, but the SVG content doesn't render. Instead we\n        // have to create an empty SVG node using innerHTML and append its content.\n        // Elements created using DOMParser.parseFromString have the same problem.\n        // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n        const svg = this._svgElementFromString(trustedHTMLFromString('<svg></svg>'));\n        // Clone the node so we don't remove it from the parent icon set element.\n        svg.appendChild(iconElement);\n        return this._setSvgAttributes(svg, options);\n    }\n    /**\n     * Creates a DOM element from the given SVG string.\n     */\n    _svgElementFromString(str) {\n        const div = this._document.createElement('DIV');\n        div.innerHTML = str;\n        const svg = div.querySelector('svg');\n        // TODO: add an ngDevMode check\n        if (!svg) {\n            throw Error('<svg> tag not found');\n        }\n        return svg;\n    }\n    /**\n     * Converts an element into an SVG node by cloning all of its children.\n     */\n    _toSvgElement(element) {\n        const svg = this._svgElementFromString(trustedHTMLFromString('<svg></svg>'));\n        const attributes = element.attributes;\n        // Copy over all the attributes from the `symbol` to the new SVG, except the id.\n        for (let i = 0; i < attributes.length; i++) {\n            const { name, value } = attributes[i];\n            if (name !== 'id') {\n                svg.setAttribute(name, value);\n            }\n        }\n        for (let i = 0; i < element.childNodes.length; i++) {\n            if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n                svg.appendChild(element.childNodes[i].cloneNode(true));\n            }\n        }\n        return svg;\n    }\n    /**\n     * Sets the default attributes for an SVG element to be used as an icon.\n     */\n    _setSvgAttributes(svg, options) {\n        svg.setAttribute('fit', '');\n        svg.setAttribute('height', '100%');\n        svg.setAttribute('width', '100%');\n        svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n        svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n        if (options && options.viewBox) {\n            svg.setAttribute('viewBox', options.viewBox);\n        }\n        return svg;\n    }\n    /**\n     * Returns an Observable which produces the string contents of the given icon. Results may be\n     * cached, so future calls with the same URL may not cause another HTTP request.\n     */\n    _fetchIcon(iconConfig) {\n        const { url: safeUrl, options } = iconConfig;\n        const withCredentials = options?.withCredentials ?? false;\n        if (!this._httpClient) {\n            throw getMatIconNoHttpProviderError();\n        }\n        // TODO: add an ngDevMode check\n        if (safeUrl == null) {\n            throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n        }\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        // TODO: add an ngDevMode check\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n        // already a request in progress for that URL. It's necessary to call share() on the\n        // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n        const inProgressFetch = this._inProgressUrlFetches.get(url);\n        if (inProgressFetch) {\n            return inProgressFetch;\n        }\n        const req = this._httpClient.get(url, { responseType: 'text', withCredentials }).pipe(map(svg => {\n            // Security: This SVG is fetched from a SafeResourceUrl, and is thus\n            // trusted HTML.\n            return trustedHTMLFromString(svg);\n        }), finalize(() => this._inProgressUrlFetches.delete(url)), share());\n        this._inProgressUrlFetches.set(url, req);\n        return req;\n    }\n    /**\n     * Registers an icon config by name in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param iconName Name under which to register the config.\n     * @param config Config to be registered.\n     */\n    _addSvgIconConfig(namespace, iconName, config) {\n        this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n        return this;\n    }\n    /**\n     * Registers an icon set config in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param config Config to be registered.\n     */\n    _addSvgIconSetConfig(namespace, config) {\n        const configNamespace = this._iconSetConfigs.get(namespace);\n        if (configNamespace) {\n            configNamespace.push(config);\n        }\n        else {\n            this._iconSetConfigs.set(namespace, [config]);\n        }\n        return this;\n    }\n    /** Parses a config's text into an SVG element. */\n    _svgElementFromConfig(config) {\n        if (!config.svgElement) {\n            const svg = this._svgElementFromString(config.svgText);\n            this._setSvgAttributes(svg, config.options);\n            config.svgElement = svg;\n        }\n        return config.svgElement;\n    }\n    /** Tries to create an icon config through the registered resolver functions. */\n    _getIconConfigFromResolvers(namespace, name) {\n        for (let i = 0; i < this._resolvers.length; i++) {\n            const result = this._resolvers[i](name, namespace);\n            if (result) {\n                return isSafeUrlWithOptions(result)\n                    ? new SvgIconConfig(result.url, null, result.options)\n                    : new SvgIconConfig(result, null);\n            }\n        }\n        return undefined;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatIconRegistry, deps: [{ token: i1.HttpClient, optional: true }, { token: i2.DomSanitizer }, { token: DOCUMENT, optional: true }, { token: i0.ErrorHandler }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatIconRegistry, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatIconRegistry, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1.HttpClient, decorators: [{\n                    type: Optional\n                }] }, { type: i2.DomSanitizer }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.ErrorHandler }]; } });\n/** @docs-private */\nfunction ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, httpClient, sanitizer, errorHandler, document) {\n    return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document, errorHandler);\n}\n/** @docs-private */\nconst ICON_REGISTRY_PROVIDER = {\n    // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n    provide: MatIconRegistry,\n    deps: [\n        [new Optional(), new SkipSelf(), MatIconRegistry],\n        [new Optional(), HttpClient],\n        DomSanitizer,\n        ErrorHandler,\n        [new Optional(), DOCUMENT],\n    ],\n    useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg) {\n    return svg.cloneNode(true);\n}\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace, name) {\n    return namespace + ':' + name;\n}\nfunction isSafeUrlWithOptions(value) {\n    return !!(value.url && value.options);\n}\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nconst _MatIconBase = mixinColor(class {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n});\n/** Injection token to be used to override the default options for `mat-icon`. */\nconst MAT_ICON_DEFAULT_OPTIONS = new InjectionToken('MAT_ICON_DEFAULT_OPTIONS');\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nconst MAT_ICON_LOCATION = new InjectionToken('mat-icon-location', {\n    providedIn: 'root',\n    factory: MAT_ICON_LOCATION_FACTORY,\n});\n/** @docs-private */\nfunction MAT_ICON_LOCATION_FACTORY() {\n    const _document = inject(DOCUMENT);\n    const _location = _document ? _document.location : null;\n    return {\n        // Note that this needs to be a function, rather than a property, because Angular\n        // will only resolve it once, but we want the current path on each call.\n        getPathname: () => (_location ? _location.pathname + _location.search : ''),\n    };\n}\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n    'clip-path',\n    'color-profile',\n    'src',\n    'cursor',\n    'fill',\n    'filter',\n    'marker',\n    'marker-start',\n    'marker-mid',\n    'marker-end',\n    'mask',\n    'stroke',\n];\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the `fontIcon` attribute or the\n *   content of the `<mat-icon>` component. If you register a custom font class, don't forget to also\n *   include the special class `mat-ligature-font`. It is recommended to use the attribute alternative\n *   to prevent the ligature text to be selectable and to appear in search engine results.\n *   By default, the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon fontIcon=\"home\"></mat-icon>\n *     <mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\" fontIcon=\"sun\"></mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\nclass MatIcon extends _MatIconBase {\n    /**\n     * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n     * the element the icon is contained in.\n     */\n    get inline() {\n        return this._inline;\n    }\n    set inline(inline) {\n        this._inline = coerceBooleanProperty(inline);\n    }\n    /** Name of the icon in the SVG icon set. */\n    get svgIcon() {\n        return this._svgIcon;\n    }\n    set svgIcon(value) {\n        if (value !== this._svgIcon) {\n            if (value) {\n                this._updateSvgIcon(value);\n            }\n            else if (this._svgIcon) {\n                this._clearSvgElement();\n            }\n            this._svgIcon = value;\n        }\n    }\n    /** Font set that the icon is a part of. */\n    get fontSet() {\n        return this._fontSet;\n    }\n    set fontSet(value) {\n        const newValue = this._cleanupFontValue(value);\n        if (newValue !== this._fontSet) {\n            this._fontSet = newValue;\n            this._updateFontIconClasses();\n        }\n    }\n    /** Name of an icon within a font set. */\n    get fontIcon() {\n        return this._fontIcon;\n    }\n    set fontIcon(value) {\n        const newValue = this._cleanupFontValue(value);\n        if (newValue !== this._fontIcon) {\n            this._fontIcon = newValue;\n            this._updateFontIconClasses();\n        }\n    }\n    constructor(elementRef, _iconRegistry, ariaHidden, _location, _errorHandler, defaults) {\n        super(elementRef);\n        this._iconRegistry = _iconRegistry;\n        this._location = _location;\n        this._errorHandler = _errorHandler;\n        this._inline = false;\n        this._previousFontSetClass = [];\n        /** Subscription to the current in-progress SVG icon request. */\n        this._currentIconFetch = Subscription.EMPTY;\n        if (defaults) {\n            if (defaults.color) {\n                this.color = this.defaultColor = defaults.color;\n            }\n            if (defaults.fontSet) {\n                this.fontSet = defaults.fontSet;\n            }\n        }\n        // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n        // the right thing to do for the majority of icon use-cases.\n        if (!ariaHidden) {\n            elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n        }\n    }\n    /**\n     * Splits an svgIcon binding value into its icon set and icon name components.\n     * Returns a 2-element array of [(icon set), (icon name)].\n     * The separator for the two fields is ':'. If there is no separator, an empty\n     * string is returned for the icon set and the entire value is returned for\n     * the icon name. If the argument is falsy, returns an array of two empty strings.\n     * Throws an error if the name contains two or more ':' separators.\n     * Examples:\n     *   `'social:cake' -> ['social', 'cake']\n     *   'penguin' -> ['', 'penguin']\n     *   null -> ['', '']\n     *   'a:b:c' -> (throws Error)`\n     */\n    _splitIconName(iconName) {\n        if (!iconName) {\n            return ['', ''];\n        }\n        const parts = iconName.split(':');\n        switch (parts.length) {\n            case 1:\n                return ['', parts[0]]; // Use default namespace.\n            case 2:\n                return parts;\n            default:\n                throw Error(`Invalid icon name: \"${iconName}\"`); // TODO: add an ngDevMode check\n        }\n    }\n    ngOnInit() {\n        // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n        // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n        this._updateFontIconClasses();\n    }\n    ngAfterViewChecked() {\n        const cachedElements = this._elementsWithExternalReferences;\n        if (cachedElements && cachedElements.size) {\n            const newPath = this._location.getPathname();\n            // We need to check whether the URL has changed on each change detection since\n            // the browser doesn't have an API that will let us react on link clicks and\n            // we can't depend on the Angular router. The references need to be updated,\n            // because while most browsers don't care whether the URL is correct after\n            // the first render, Safari will break if the user navigates to a different\n            // page and the SVG isn't re-rendered.\n            if (newPath !== this._previousPath) {\n                this._previousPath = newPath;\n                this._prependPathToReferences(newPath);\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._currentIconFetch.unsubscribe();\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n    }\n    _usingFontIcon() {\n        return !this.svgIcon;\n    }\n    _setSvgElement(svg) {\n        this._clearSvgElement();\n        // Note: we do this fix here, rather than the icon registry, because the\n        // references have to point to the URL at the time that the icon was created.\n        const path = this._location.getPathname();\n        this._previousPath = path;\n        this._cacheChildrenWithExternalReferences(svg);\n        this._prependPathToReferences(path);\n        this._elementRef.nativeElement.appendChild(svg);\n    }\n    _clearSvgElement() {\n        const layoutElement = this._elementRef.nativeElement;\n        let childCount = layoutElement.childNodes.length;\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n        // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n        // we can't use innerHTML, because IE will throw if the element has a data binding.\n        while (childCount--) {\n            const child = layoutElement.childNodes[childCount];\n            // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n            // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n            if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n                child.remove();\n            }\n        }\n    }\n    _updateFontIconClasses() {\n        if (!this._usingFontIcon()) {\n            return;\n        }\n        const elem = this._elementRef.nativeElement;\n        const fontSetClasses = (this.fontSet\n            ? this._iconRegistry.classNameForFontAlias(this.fontSet).split(/ +/)\n            : this._iconRegistry.getDefaultFontSetClass()).filter(className => className.length > 0);\n        this._previousFontSetClass.forEach(className => elem.classList.remove(className));\n        fontSetClasses.forEach(className => elem.classList.add(className));\n        this._previousFontSetClass = fontSetClasses;\n        if (this.fontIcon !== this._previousFontIconClass &&\n            !fontSetClasses.includes('mat-ligature-font')) {\n            if (this._previousFontIconClass) {\n                elem.classList.remove(this._previousFontIconClass);\n            }\n            if (this.fontIcon) {\n                elem.classList.add(this.fontIcon);\n            }\n            this._previousFontIconClass = this.fontIcon;\n        }\n    }\n    /**\n     * Cleans up a value to be used as a fontIcon or fontSet.\n     * Since the value ends up being assigned as a CSS class, we\n     * have to trim the value and omit space-separated values.\n     */\n    _cleanupFontValue(value) {\n        return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n    }\n    /**\n     * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n     * reference. This is required because WebKit browsers require references to be prefixed with\n     * the current path, if the page has a `base` tag.\n     */\n    _prependPathToReferences(path) {\n        const elements = this._elementsWithExternalReferences;\n        if (elements) {\n            elements.forEach((attrs, element) => {\n                attrs.forEach(attr => {\n                    element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n                });\n            });\n        }\n    }\n    /**\n     * Caches the children of an SVG element that have `url()`\n     * references that we need to prefix with the current path.\n     */\n    _cacheChildrenWithExternalReferences(element) {\n        const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n        const elements = (this._elementsWithExternalReferences =\n            this._elementsWithExternalReferences || new Map());\n        for (let i = 0; i < elementsWithFuncIri.length; i++) {\n            funcIriAttributes.forEach(attr => {\n                const elementWithReference = elementsWithFuncIri[i];\n                const value = elementWithReference.getAttribute(attr);\n                const match = value ? value.match(funcIriPattern) : null;\n                if (match) {\n                    let attributes = elements.get(elementWithReference);\n                    if (!attributes) {\n                        attributes = [];\n                        elements.set(elementWithReference, attributes);\n                    }\n                    attributes.push({ name: attr, value: match[1] });\n                }\n            });\n        }\n    }\n    /** Sets a new SVG icon with a particular name. */\n    _updateSvgIcon(rawName) {\n        this._svgNamespace = null;\n        this._svgName = null;\n        this._currentIconFetch.unsubscribe();\n        if (rawName) {\n            const [namespace, iconName] = this._splitIconName(rawName);\n            if (namespace) {\n                this._svgNamespace = namespace;\n            }\n            if (iconName) {\n                this._svgName = iconName;\n            }\n            this._currentIconFetch = this._iconRegistry\n                .getNamedSvgIcon(iconName, namespace)\n                .pipe(take(1))\n                .subscribe(svg => this._setSvgElement(svg), (err) => {\n                const errorMessage = `Error retrieving icon ${namespace}:${iconName}! ${err.message}`;\n                this._errorHandler.handleError(new Error(errorMessage));\n            });\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatIcon, deps: [{ token: i0.ElementRef }, { token: MatIconRegistry }, { token: 'aria-hidden', attribute: true }, { token: MAT_ICON_LOCATION }, { token: i0.ErrorHandler }, { token: MAT_ICON_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.0\", type: MatIcon, selector: \"mat-icon\", inputs: { color: \"color\", inline: \"inline\", svgIcon: \"svgIcon\", fontSet: \"fontSet\", fontIcon: \"fontIcon\" }, host: { attributes: { \"role\": \"img\" }, properties: { \"attr.data-mat-icon-type\": \"_usingFontIcon() ? \\\"font\\\" : \\\"svg\\\"\", \"attr.data-mat-icon-name\": \"_svgName || fontIcon\", \"attr.data-mat-icon-namespace\": \"_svgNamespace || fontSet\", \"attr.fontIcon\": \"_usingFontIcon() ? fontIcon : null\", \"class.mat-icon-inline\": \"inline\", \"class.mat-icon-no-color\": \"color !== \\\"primary\\\" && color !== \\\"accent\\\" && color !== \\\"warn\\\"\" }, classAttribute: \"mat-icon notranslate\" }, exportAs: [\"matIcon\"], usesInheritance: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, styles: [\".mat-icon{-webkit-user-select:none;user-select:none;background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px;overflow:hidden}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}.mat-icon.mat-ligature-font[fontIcon]::before{content:attr(fontIcon)}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatIcon, decorators: [{\n            type: Component,\n            args: [{ template: '<ng-content></ng-content>', selector: 'mat-icon', exportAs: 'matIcon', inputs: ['color'], host: {\n                        'role': 'img',\n                        'class': 'mat-icon notranslate',\n                        '[attr.data-mat-icon-type]': '_usingFontIcon() ? \"font\" : \"svg\"',\n                        '[attr.data-mat-icon-name]': '_svgName || fontIcon',\n                        '[attr.data-mat-icon-namespace]': '_svgNamespace || fontSet',\n                        '[attr.fontIcon]': '_usingFontIcon() ? fontIcon : null',\n                        '[class.mat-icon-inline]': 'inline',\n                        '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-icon{-webkit-user-select:none;user-select:none;background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px;overflow:hidden}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}.mat-icon.mat-ligature-font[fontIcon]::before{content:attr(fontIcon)}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: MatIconRegistry }, { type: undefined, decorators: [{\n                    type: Attribute,\n                    args: ['aria-hidden']\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_ICON_LOCATION]\n                }] }, { type: i0.ErrorHandler }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_ICON_DEFAULT_OPTIONS]\n                }] }]; }, propDecorators: { inline: [{\n                type: Input\n            }], svgIcon: [{\n                type: Input\n            }], fontSet: [{\n                type: Input\n            }], fontIcon: [{\n                type: Input\n            }] } });\n\nclass MatIconModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatIconModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.0\", ngImport: i0, type: MatIconModule, declarations: [MatIcon], imports: [MatCommonModule], exports: [MatIcon, MatCommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatIconModule, imports: [MatCommonModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatIconModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule],\n                    exports: [MatIcon, MatCommonModule],\n                    declarations: [MatIcon],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ICON_REGISTRY_PROVIDER, ICON_REGISTRY_PROVIDER_FACTORY, MAT_ICON_DEFAULT_OPTIONS, MAT_ICON_LOCATION, MAT_ICON_LOCATION_FACTORY, MatIcon, MatIconModule, MatIconRegistry, getMatIconFailedToSanitizeLiteralError, getMatIconFailedToSanitizeUrlError, getMatIconNameNotFoundError, getMatIconNoHttpProviderError };\n","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (null != _i) {\n    var _s,\n      _e,\n      _x,\n      _r,\n      _arr = [],\n      _n = !0,\n      _d = !1;\n    try {\n      if (_x = (_i = _i.call(arr)).next, 0 === i) {\n        if (Object(_i) !== _i) return;\n        _n = !1;\n      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);\n    } catch (err) {\n      _d = !0, _e = err;\n    } finally {\n      try {\n        if (!_n && null != _i[\"return\"] && (_r = _i[\"return\"](), Object(_r) !== _r)) return;\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n}"],"x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]}