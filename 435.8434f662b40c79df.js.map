{"version":3,"mappings":"6EAMA,WAAsBA,GAClB,OAAOA,EAAEC,QAAQ,uBAAwB,QAK7C,WAAwBC,EAAOC,GAC3B,IAAkCC,QAAlB,IAAPD,EAAgB,GAAKA,GAAYE,YAAaA,OAAqB,IAAPD,EAAgB,IAAMA,EAC3F,GAAqB,iBAAVF,EACP,OAAOA,EAAMI,WAEjB,GAAqB,iBAAVJ,EACP,MAAO,MAEX,IAAIK,EAAoBC,EAAaH,GACjCI,EAAIP,EAAMQ,OACVC,EAAWF,EAAEG,MAAM,eACnBC,EAAkB,IAAIC,OAAO,QAAUP,EAAoB,KAAOA,EAAoB,QAAUA,EAAoB,UAAYA,EAAoB,QAAS,KACjKE,MACU,MADVA,EAAIA,EAAER,QAAQY,EAAiB,IAAIZ,QAAQI,EAAa,MAEpDI,EAAI,MAECE,IACLF,EAAI,IAAMA,GAEPA,EA7B6CM,UAA4C,EA2CpGA,KARA,WAAkBb,EAAOC,GACrB,IAAkCC,QAAlB,IAAPD,EAAgB,GAAKA,GAAYE,YACtCL,EAAIgB,EAAed,EAAO,CAAEG,iBAD4C,IAAPD,EAAgB,IAAMA,IAE3F,MAAU,QAANJ,EACOiB,IAEJC,OAAOlB,6aCrCZmB,QAAN,QACIC,UAAUlB,EAAOmB,GACb,QAAcC,IAAVpB,GAAiC,KAAVA,EAK3B,OAAOqB,QAAU,GAAErB,MAG3BiB,SAAYK,UAAZ,0BAAwGL,IACxGA,EAAYM,WADkFC,yBAC9F,qBAAsGP,EAAtGQ,UAXMR,MAmBAS,QAAN,QACIR,UAAUlB,EAAO2B,GACb,OAAQ3B,GAAmB,KAAVA,EAA8BA,EAAf2B,GAGxCD,SAAiBJ,UAAjB,0BAA6GI,IAC7GA,EAAiBH,WAf6EC,yBAe9F,gBAA2GE,EAA3GD,UANMC,MAcN,MAAME,EAAuB,IAAIC,iBAAe,uBAC1CC,EAAY,IAAID,iBAAe,aAC/BE,EAAY,IAAIF,iBAAe,aAC/BG,EAAW,IAAIH,iBAAe,wBAE9BI,QAAN,QACIC,YAAYC,EAA0BC,EAAYC,EAAoBC,GAClEC,KAAKD,SAAWA,EAChBC,KAAKC,2BAA6B,IAAIC,IACtCF,KAAKF,mBAAqB,GAC1BE,KAAKG,YAAc,IAAIC,eACvBJ,KAAKK,YAAcR,EAAWS,cAC9BR,EAAmBS,QAAQC,IACvB,MAAMC,EAAUb,EAAyBc,wBAAwBF,GACjER,KAAKC,2BAA2BU,IAAIF,EAAQG,SAAUH,KAG1DI,YAAQA,GACRb,KAAKc,cACDD,IACAb,KAAKe,MAAMF,GACXb,KAAKG,YAAYa,QAGzBD,MAAMF,GACFb,KAAKK,YAAYY,UAAYJ,GAAW,GACnCA,GAGLb,KAAKC,2BAA2BM,QAAQ,CAACE,EAASG,KACZZ,KAAKK,YAAYa,iBAAiBN,GAC1CL,QAAQY,IAG9B,MAAMC,EAAmB,CAACC,MAAMC,UAAUC,MAAMC,KAAKL,EAAQM,aACvDC,EAAoBjB,EAAQkB,OAAO3B,KAAKD,SAAUqB,EAAkBD,GAG1E,UAAWS,KAAQT,EAAQU,WACvBH,EAAkBI,SAASF,EAAKG,UAAYH,EAAKI,UAErDhC,KAAKF,mBAAmBmC,KAAKP,OAIzCQ,YACIlC,KAAKF,mBAAmBS,QAAQ4B,GAAQA,EAAKC,kBAAkBC,iBAEnEvB,cAEId,KAAKF,mBAAmBS,QAAQ4B,GAAQA,EAAKG,WAC7CtC,KAAKF,mBAAmByC,OAAS,GAGzC7C,SAAqBX,UAArB,0BAAiHW,GA7EnBT,8BA6EyDA,4BA7EzDA,8BA6EiGA,cA7EjGA,8BA6E2HI,GA7E3HJ,8BA6E4JA,cAC1PS,EAAqB8C,UA9EyEvD,8BA8E9F,MAAqGS,EAArG+C,2LAlDM/C,MAoEN,QACIC,YAAY+C,EAAOH,GACfvC,KAAK0C,MAAQA,EACb1C,KAAKuC,OAASA,EAEdI,WAAS,OAAO3C,KAAK0C,MAAQ,GAAM,EACnCE,UAAQ,OAAO5C,KAAK0C,MAAQ,GAAM,EAClCG,YAAU,OAAsB,IAAf7C,KAAK0C,MACtBI,WAAS,OAAO9C,KAAK0C,QAAU1C,KAAKuC,OAAS,OAE/CQ,QAAN,QACIpD,YAAYqD,EAAaC,GACrBjD,KAAKgD,YAAcA,EACnBhD,KAAKiD,cAAgBA,EAErBC,SAAKC,GACLnD,KAAKiD,cAAcG,QACnB,QAASC,EAAI,EAAGA,EAAIF,EAAKE,IACrBrD,KAAKiD,cAAcK,mBAAmBtD,KAAKgD,YAAa,IAAIO,EAAQF,EAAGF,KAGnFJ,SAAahE,UAAb,0BAAyGgE,GArHX9D,8BAqHyCA,eArHzCA,8BAqHoEA,sBAClK8D,EAAaS,UAtHiFvE,8BAsH9F,MAA6F8D,EAA7FN,mEAZMM,MAuBAU,QAAN,SAEAA,SAAY1E,UAAZ,0BAAwG0E,IACxGA,EAAYC,UApIkFzE,6BAoI9F,MAAyGwE,IACzGA,EAAYE,UArIkF1E,6BAqI9F,UAAgI,CAAC2E,mBAJ3HH,MAcAI,QAAN,QACIlE,YAAYmE,EAAU/D,GAClBC,KAAK8D,SAAWA,EAChB9D,KAAKD,SAAWA,EAChBC,KAAK+D,cAAgB,GAEzBC,WAAWC,GACP,OAAO,IAAIC,IAAWC,IAClBF,IAASG,KAAKC,IACV,IAA2D,IAAvDrE,KAAK+D,cAAcO,QAAQC,GAAQA,GAAQF,EAAEE,MAC7C,KAAM,GAGN,YAAKR,cAAc9B,KAAKoC,EAAEE,MACnBF,IAEZD,KAAKC,GAAKrE,KAAK8D,SAASU,mCAAmCH,IAAID,KAAKK,IACjDA,EAAGC,gBAAgB/C,OAAO3B,KAAKD,UAEjDoE,EAAIQ,MAAK,GACTR,EAAIS,aACLC,MAAM,KACLV,EAAIQ,MAAK,GACTR,EAAIS,gBAcpBf,SAAoB9E,UAApB,0BAAgH8E,GApLlB5E,qBAoLuDA,YApLvDA,qBAoL+EA,cAC7K4E,EAAoBiB,WArL0E7F,+BAqL9F,OAAoH4E,EAApHpD,QAAoHoD,EAApH,qBAAqJ,SAtC/IA,MA8CAkB,QAAN,QACIpF,YAAYqF,GACRhF,KAAKgF,SAAWA,EAEpBC,UAAUC,GACN,MAAMC,EAAOnF,KAAKgF,SAASI,qBAAqB,QAAQ,GACxD,IAAIC,EAAYrF,KAAKgF,SAASM,eAAe,gBAC7C,GAAID,EACAA,EAAUE,KAAOL,MAEhB,CACD,MAAMM,EAAQxF,KAAKgF,SAASS,cAAc,QAC1CD,EAAME,GAAK,eACXF,EAAMG,IAAM,aACZH,EAAMD,KAAQ,GAAEL,IAChBC,EAAKS,YAAYJ,KAI7BT,SAAmBhG,UAAnB,0BAA+GgG,GAhNjB9F,qBAgNqD4G,cACnJd,EAAmBD,WAjN2E7F,+BAiN9F,OAAmH8F,EAAnHtE,QAAmHsE,EAAnH,qBAAmJ,SApB7IA,MA+BN,QACIpF,YAAY4E,GACRvE,KAAK8F,SAAW,IAAI5F,IACpBF,KAAKuE,KAAOA,EAEhBwB,IAAIC,GACA,SAAOC,MAAGD,GAEdE,OAAOR,GACH,YAAKI,SAASI,OAAOR,MACdO,MAAGP,GAEdS,SACI,MAAMC,EAAO,GACb,YAAKN,SAASvF,QAAQ8F,IAClBD,EAAKnE,KAAKoE,QAEPJ,MAAGG,GAEdE,QAAQZ,GACJ,OAAOO,QAAGjG,KAAK8F,SAASS,IAAIb,IAEhCc,aAAaC,GACT,MAAML,EAAO,GACb,YAAKN,SAASvF,QAAQ8F,IAClBD,EAAKnE,KAAKoE,QAEPJ,MAAGG,GAEdM,OAAOA,GACH,SAAOT,WAAGpH,GAEd8H,OAAOX,GAEH,SAAOC,MAAGD,QAIZY,QAAN,QACIjH,cACIK,KAAK6G,cAAgB,IAAIC,EAE7BC,OAAOC,GACH,OAAOhH,KAAK6G,cAAcE,OAAOC,IAGzCJ,SAA0B7H,UAA1B,0BAAsH6H,IACtHA,EAA0B9B,WA3QoE7F,+BA2Q9F,OAA0H2H,EAA1HnG,QAA0HmG,EAA1H,qBAAiK,SAT3JA,MAgBN,QACIK,KAAKC,GACD,OAAO,IAAIhD,IAAYiD,IACnB,IAAIC,EACAC,GAAY,EACZC,EAAM,KACNC,EAAc,KACdC,EAAa,KA6CjBC,MA3CsBC,KAClBN,EAAOM,EACPL,GAAY,EAEZC,EADiBtH,KAAK2H,SAAST,GAChBU,UAAUC,GAAON,EAAcM,EAAKC,IAC/C,IAAKT,EACD,MAAM,IAAIU,MAAM,qFAEpBP,EAAaM,EACbT,GAAY,EACZD,EAAKY,UACN,KACC,IAAKX,EACD,MAAM,IAAIU,MAAM,qFAEpBV,GAAY,EACZD,EAAKY,YA2BbP,CADcQ,KAAKC,QAAQC,kBAAkB,iCAZ1B,KACI,OAAfX,EACAL,EAASiB,MAAMZ,IAGfL,EAASxC,KAAK4C,GACdJ,EAASvC,aAM0E,GAAI,IAAM,KAtBjF8C,KACXL,IAGLA,GAAY,EACRC,IACAA,EAAIe,cACJf,EAAM,UAiBP,KACCD,GAAaD,IACbA,EAAKkB,KAAKC,WAAWnB,GACrBC,GAAY,GAEZC,IACAA,EAAIe,cACJf,EAAM,UAM1B,gBAAmCkB,EAC/B7I,cAAgB8I,QAEhB1B,OAAOG,GAEH,OAAOlH,KAAKiH,KAAKC,GAGrBS,SAAST,GACL,OAAO,IAAIhD,IAAYiD,IAEnBD,EACK9C,KAAKsE,IACNvB,EAASxC,KAAK+D,GACdvB,EAASvC,aACVC,MAAMuD,GAASjB,EAASiB,MAAMA","names":["s","replace","value","_a","_c","decimalMark","toString","regexpDecimalMark","regexpEscape","n","trim","negative","match","getNumberRegexp","RegExp","exports","toNumberString","NaN","Number","NumeralPipe","transform","format","undefined","toNumber","ɵfac","ɵpipe","i0","pure","NotAvailablePipe","defaultValue","EMBEDDABLE_COMPONENT","InjectionToken","SITE_NAME","HOST_NAME","PROTOCOL","DynamicContentViewer","constructor","componentFactoryResolver","elementRef","embeddedComponents","injector","this","embeddedComponentFactories","Map","docRendered","EventEmitter","hostElement","nativeElement","forEach","component","factory","resolveComponentFactory","set","selector","content","ngOnDestroy","build","emit","innerHTML","querySelectorAll","element","projectableNodes","Array","prototype","slice","call","childNodes","embeddedComponent","create","attr","attributes","instance","nodeName","nodeValue","push","ngDoCheck","comp","changeDetectorRef","detectChanges","destroy","length","ɵcmp","selectors","index","even","odd","first","last","ForDirective","templateRef","viewContainer","loop","num","clear","i","createEmbeddedView","Context","ɵdir","UtilsModule","ɵmod","ɵinj","CommonModule","ModuleLoaderService","compiler","loadedModules","loadModule","module","Observable","obs","then","m","indexOf","name","compileModuleAndAllComponentsAsync","mf","ngModuleFactory","next","complete","catch","ɵprov","StyleLoaderService","document","loadStyle","styleName","head","getElementsByTagName","themeLink","getElementById","href","style","createElement","id","rel","appendChild","DOCUMENT","entities","add","entity","of","delete","getAll","flat","v","getById","get","getWithQuery","params","update","upsert","AsyncApiCallHelperService","taskProcessor","MyAsyncTaskProcessor","doTask","promise","wrap","request","observer","task","scheduled","sub","savedResult","savedError","scheduleTask","_task","delegate","subscribe","res","err","Error","invoke","Zone","current","scheduleMacroTask","error","unsubscribe","zone","cancelTask","ZoneMacroTaskWrapper","super","result"],"sources":["./node_modules/number-string/dist/app.js","./node_modules/@rollthecloudinc/utils/fesm2020/rollthecloudinc-utils.mjs"],"sourcesContent":["\"use strict\";\nexports.__esModule = true;\nexports.toClosest = exports.toMoney = exports.toClean = exports.toNumber = exports.toNumberString = void 0;\n/**\n * Escape special RegExp characters in string\n */\nfunction regexpEscape(s) {\n    return s.replace(/[-[\\]/{}()*+?.\\\\^$]/g, \"\\\\$&\");\n}\n/**\n * Convert value to number string\n */\nfunction toNumberString(value, _a) {\n    var _b = _a === void 0 ? {} : _a, _c = _b.decimalMark, decimalMark = _c === void 0 ? \".\" : _c;\n    if (typeof value === \"number\") {\n        return value.toString();\n    }\n    if (typeof value !== \"string\") {\n        return \"NaN\";\n    }\n    var regexpDecimalMark = regexpEscape(decimalMark);\n    var n = value.trim();\n    var negative = n.match(/^\\(.*\\)$|^-/); //negative if matches '(...)' or '-...'\n    var getNumberRegexp = new RegExp(\"[^\\\\d\" + regexpDecimalMark + \"]|\" + regexpDecimalMark + \"(?=.*\" + regexpDecimalMark + \")|^\\\\D*\" + regexpDecimalMark + \"\\\\D*$\", \"g\");\n    n = n.replace(getNumberRegexp, \"\").replace(decimalMark, \".\"); //remove all except digits and last dot\n    if (n === \"\") {\n        n = \"NaN\";\n    }\n    else if (negative) {\n        n = \"-\" + n;\n    }\n    return n;\n}\nexports.toNumberString = toNumberString;\n/**\n * Convert value to number\n */\nfunction toNumber(value, _a) {\n    var _b = _a === void 0 ? {} : _a, _c = _b.decimalMark, decimalMark = _c === void 0 ? \".\" : _c;\n    var s = toNumberString(value, { decimalMark: decimalMark });\n    if (s === \"NaN\") {\n        return NaN;\n    }\n    return Number(s);\n}\nexports.toNumber = toNumber;\n/**\n * Like `toFixed` but removes trailing zeros\n */\nfunction toClean(value, _a) {\n    var _b = _a === void 0 ? {} : _a, _c = _b.decimalMark, decimalMark = _c === void 0 ? \".\" : _c, _d = _b.thousandSeperator, thousandSeperator = _d === void 0 ? null : _d, _e = _b.thousandSeparator, thousandSeparator = _e === void 0 ? \",\" : _e, _f = _b.maxPrecision, maxPrecision = _f === void 0 ? 100 : _f, _g = _b.minPrecision, minPrecision = _g === void 0 ? 0 : _g;\n    if (thousandSeperator) {\n        thousandSeparator = thousandSeperator;\n        console.error(\"`thousandSeperator` is deprecated use `thousandSeparator` instead.\");\n    }\n    value = toNumberString(value);\n    if (value === \"NaN\") {\n        return \"NaN\";\n    }\n    if (maxPrecision < 0) {\n        throw new Error(\"maxPrecision must be >= 0\");\n    }\n    if (minPrecision < 0) {\n        throw new Error(\"minPrecision must be >= 0\");\n    }\n    if (maxPrecision > 100) {\n        throw new Error(\"maxPrecision must be <= 100\");\n    }\n    if (minPrecision > 100) {\n        throw new Error(\"minPrecision must be <= 100\");\n    }\n    if (minPrecision > maxPrecision) {\n        throw new Error(\"minPrecision must be <= maxPrecision\");\n    }\n    var s = value;\n    // limit to maxPrecision\n    var dotIndex = s.lastIndexOf(\".\");\n    if (dotIndex > -1) {\n        var integer = (dotIndex === 0 ? \"0\" : s.slice(0, dotIndex));\n        var fraction = s.slice(dotIndex + 1, dotIndex + 1 + maxPrecision);\n        var remainder = s.slice(dotIndex + 1 + maxPrecision);\n        if (remainder.length > 0 && +remainder[0] > 4) {\n            // round up\n            var i = (BigInt(integer + fraction) + BigInt(1)).toString(10);\n            integer = i.slice(0, i.length - fraction.length);\n            fraction = i.slice(i.length - fraction.length);\n        }\n        s = integer + decimalMark + fraction;\n    }\n    else {\n        s += decimalMark;\n    }\n    // remove trailing 0s\n    var rmLen = 0;\n    for (var i = s.length - 1; i >= 0; i--) {\n        if (s[i] !== \"0\") {\n            break;\n        }\n        rmLen++;\n    }\n    s = s.slice(0, s.length - rmLen);\n    // limit to minPrecision\n    if (minPrecision > 0) {\n        var numZeros = void 0;\n        if (dotIndex > -1) {\n            numZeros = minPrecision - (s.length - dotIndex - 1);\n        }\n        else {\n            numZeros = minPrecision;\n        }\n        for (var i = 0; i < numZeros; i++) {\n            s += \"0\";\n        }\n    }\n    var regexpDecimalMark = regexpEscape(decimalMark);\n    var thousandSeparatorRegexp = new RegExp(\"\\\\d(?=(\\\\d{3})+\" + regexpDecimalMark + \")\", \"g\");\n    var trimRegexp = new RegExp(regexpDecimalMark + \"$\");\n    s = s.replace(thousandSeparatorRegexp, \"$&\" + thousandSeparator).replace(trimRegexp, \"\");\n    return s;\n}\nexports.toClean = toClean;\n/**\n * Convert string or number to currency string\n * modified from http://stackoverflow.com/a/149099/806777\\\n */\nfunction toMoney(value, _a) {\n    var _b = _a === void 0 ? {} : _a, _c = _b.decimalMark, decimalMark = _c === void 0 ? \".\" : _c, _d = _b.thousandSeperator, thousandSeperator = _d === void 0 ? null : _d, _e = _b.thousandSeparator, thousandSeparator = _e === void 0 ? \",\" : _e, _f = _b.maxPrecision, maxPrecision = _f === void 0 ? 2 : _f, _g = _b.minPrecision, minPrecision = _g === void 0 ? 2 : _g, _h = _b.symbol, symbol = _h === void 0 ? \"$\" : _h, _j = _b.symbolBehind, symbolBehind = _j === void 0 ? false : _j, _k = _b.useParens, useParens = _k === void 0 ? true : _k;\n    if (thousandSeperator) {\n        thousandSeparator = thousandSeperator;\n        console.error(\"`thousandSeperator` is deprecated use `thousandSeparator` instead.\");\n    }\n    var n = (typeof value === \"number\"\n        ? value\n        : toNumber(value, {\n            decimalMark: decimalMark\n        }));\n    var s = toNumberString(value, {\n        decimalMark: decimalMark\n    });\n    if (isNaN(n)) {\n        return \"NaN\";\n    }\n    if (n === Infinity) {\n        return \"Infinity\";\n    }\n    if (n === -Infinity) {\n        return (useParens ? \"(Infinity)\" : \"-Infinity\");\n    }\n    if (maxPrecision < 2 && typeof arguments[1].minPrecision === \"undefined\") {\n        minPrecision = maxPrecision;\n    }\n    if (minPrecision > 2 && typeof arguments[1].maxPrecision === \"undefined\") {\n        maxPrecision = minPrecision;\n    }\n    var negative = n < 0;\n    s = toClean(negative ? s.slice(1) : s, {\n        decimalMark: decimalMark,\n        thousandSeparator: thousandSeparator,\n        maxPrecision: maxPrecision,\n        minPrecision: minPrecision\n    });\n    s = (symbolBehind ? s + \" \" + symbol : symbol + s);\n    if (negative) {\n        s = (useParens ? \"(\" + s + \")\" : \"-\" + s);\n    }\n    return s;\n}\nexports.toMoney = toMoney;\n/**\n * Round number to closest multiple of number\n */\nfunction toClosest(value, roundTo) {\n    if (roundTo === void 0) { roundTo = 1; }\n    if (typeof value !== \"number\") {\n        value = toNumber(value);\n    }\n    if (isNaN(value)) {\n        return NaN;\n    }\n    if (value === Infinity || value === -Infinity) {\n        return value;\n    }\n    if (typeof roundTo !== \"number\") {\n        roundTo = toNumber(roundTo);\n    }\n    if (isNaN(roundTo)) {\n        throw Error(\"roundTo must be a number\");\n    }\n    if (roundTo === Infinity || roundTo === -Infinity) {\n        return roundTo;\n    }\n    var n = Math.round(value / roundTo) * roundTo;\n    var maxPrecision = 0;\n    while (!Number.isInteger(roundTo)) {\n        roundTo *= 10;\n        maxPrecision++;\n    }\n    n = +n.toFixed(maxPrecision);\n    return n;\n}\nexports.toClosest = toClosest;\n","import * as i0 from '@angular/core';\nimport { Pipe, InjectionToken, EventEmitter, Component, Inject, Input, Output, Directive, NgModule, Injectable } from '@angular/core';\nimport { CommonModule, DOCUMENT } from '@angular/common';\nimport { toNumber } from 'number-string';\nimport { Observable, of } from 'rxjs';\n\nclass NumeralPipe {\n    transform(value, format) {\n        if (value === undefined || value === '') {\n            return;\n        }\n        // @todo: reimplment format.\n        // return toNumber(`${value}`).format(format);\n        return toNumber(`${value}`);\n    }\n}\nNumeralPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: NumeralPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });\nNumeralPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: NumeralPipe, name: \"numeral\" });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: NumeralPipe, decorators: [{\n            type: Pipe,\n            args: [{\n                    name: 'numeral'\n                }]\n        }] });\n\nclass NotAvailablePipe {\n    transform(value, defaultValue) {\n        return !value || value === '' ? defaultValue : value;\n    }\n}\nNotAvailablePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: NotAvailablePipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });\nNotAvailablePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: NotAvailablePipe, name: \"na\" });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: NotAvailablePipe, decorators: [{\n            type: Pipe,\n            args: [{\n                    name: 'na'\n                }]\n        }] });\n\nconst EMBEDDABLE_COMPONENT = new InjectionToken('EmbeddableComponent');\nconst SITE_NAME = new InjectionToken('Site Name');\nconst HOST_NAME = new InjectionToken('Host Name');\nconst PROTOCOL = new InjectionToken('Request Protocol');\n\nclass DynamicContentViewer {\n    constructor(componentFactoryResolver, elementRef, embeddedComponents, injector) {\n        this.injector = injector;\n        this.embeddedComponentFactories = new Map();\n        this.embeddedComponents = [];\n        this.docRendered = new EventEmitter();\n        this.hostElement = elementRef.nativeElement;\n        embeddedComponents.forEach(component => {\n            const factory = componentFactoryResolver.resolveComponentFactory(component);\n            this.embeddedComponentFactories.set(factory.selector, factory);\n        });\n    }\n    set content(content) {\n        this.ngOnDestroy();\n        if (content) {\n            this.build(content);\n            this.docRendered.emit();\n        }\n    }\n    build(content) {\n        this.hostElement.innerHTML = content || '';\n        if (!content) {\n            return;\n        }\n        this.embeddedComponentFactories.forEach((factory, selector) => {\n            const embeddedComponentElements = this.hostElement.querySelectorAll(selector);\n            embeddedComponentElements.forEach(element => {\n                //convert NodeList into an array, since Angular dosen't like having a NodeList passed\n                //for projectableNodes\n                const projectableNodes = [Array.prototype.slice.call(element.childNodes)];\n                const embeddedComponent = factory.create(this.injector, projectableNodes, element);\n                //apply inputs into the dynamic component\n                //only static ones work here since this is the only time they're set\n                for (const attr of element.attributes) {\n                    embeddedComponent.instance[attr.nodeName] = attr.nodeValue;\n                }\n                this.embeddedComponents.push(embeddedComponent);\n            });\n        });\n    }\n    ngDoCheck() {\n        this.embeddedComponents.forEach(comp => comp.changeDetectorRef.detectChanges());\n    }\n    ngOnDestroy() {\n        // destroy these components else there will be memory leaks\n        this.embeddedComponents.forEach(comp => comp.destroy());\n        this.embeddedComponents.length = 0;\n    }\n}\nDynamicContentViewer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: DynamicContentViewer, deps: [{ token: i0.ComponentFactoryResolver }, { token: i0.ElementRef }, { token: EMBEDDABLE_COMPONENT }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Component });\nDynamicContentViewer.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.3\", type: DynamicContentViewer, selector: \"classifieds-ui-dynamic-content-viewer\", inputs: { data: \"data\", content: \"content\" }, outputs: { docRendered: \"docRendered\" }, ngImport: i0, template: '', isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: DynamicContentViewer, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'classifieds-ui-dynamic-content-viewer',\n                    template: '',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i0.ElementRef }, { type: Array, decorators: [{\n                    type: Inject,\n                    args: [EMBEDDABLE_COMPONENT]\n                }] }, { type: i0.Injector }]; }, propDecorators: { data: [{\n                type: Input\n            }], docRendered: [{\n                type: Output\n            }], content: [{\n                type: Input\n            }] } });\n\nclass Context {\n    constructor(index, length) {\n        this.index = index;\n        this.length = length;\n    }\n    get even() { return this.index % 2 === 0; }\n    get odd() { return this.index % 2 === 1; }\n    get first() { return this.index === 0; }\n    get last() { return this.index === this.length - 1; }\n}\nclass ForDirective {\n    constructor(templateRef, viewContainer) {\n        this.templateRef = templateRef;\n        this.viewContainer = viewContainer;\n    }\n    set loop(num) {\n        this.viewContainer.clear();\n        for (var i = 0; i < num; i++)\n            this.viewContainer.createEmbeddedView(this.templateRef, new Context(i, num));\n    }\n}\nForDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: ForDirective, deps: [{ token: i0.TemplateRef }, { token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive });\nForDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.3\", type: ForDirective, selector: \"[for]:not(label)\", inputs: { loop: [\"for\", \"loop\"] }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: ForDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[for]:not(label)'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }, { type: i0.ViewContainerRef }]; }, propDecorators: { loop: [{\n                type: Input,\n                args: ['for']\n            }] } });\n\nclass UtilsModule {\n}\nUtilsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: UtilsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nUtilsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: UtilsModule, declarations: [NumeralPipe, NotAvailablePipe, DynamicContentViewer, ForDirective], imports: [CommonModule], exports: [NumeralPipe, NotAvailablePipe, DynamicContentViewer, ForDirective] });\nUtilsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: UtilsModule, imports: [[CommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: UtilsModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [NumeralPipe, NotAvailablePipe, DynamicContentViewer, ForDirective],\n                    exports: [NumeralPipe, NotAvailablePipe, DynamicContentViewer, ForDirective]\n                }]\n        }] });\n\nclass ModuleLoaderService {\n    constructor(compiler, injector) {\n        this.compiler = compiler;\n        this.injector = injector;\n        this.loadedModules = [];\n    }\n    loadModule(module) {\n        return new Observable(obs => {\n            module().then(m => {\n                if (this.loadedModules.indexOf(name => name == m.name) !== -1) {\n                    throw '';\n                }\n                else {\n                    this.loadedModules.push(m.name);\n                    return m;\n                }\n            }).then(m => this.compiler.compileModuleAndAllComponentsAsync(m)).then(mf => {\n                const moduleRef = mf.ngModuleFactory.create(this.injector);\n                // moduleRef.componentFactoryResolver.resolveComponentFactory(LazyComponent);\n                obs.next(true);\n                obs.complete();\n            }).catch(() => {\n                obs.next(true);\n                obs.complete();\n            });\n        });\n        /*mport(module)module().then(m => {\n          this.compiler.compileModuleAndAllComponentsAsync(m);\n          console.log(`module imported: ${module}`);\n        });*/\n        /*import('./carousel/carousel.module').then(({ CarouselModule }) => {\n          const injector = createInjector(CarouselModule, this.injector);\n          const carouselModule = injector.get(CarouselModule);\n          const componentFactory = carouselModule.resolveCarouselComponentFactory();\n        });*/\n    }\n}\nModuleLoaderService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: ModuleLoaderService, deps: [{ token: i0.Compiler }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });\nModuleLoaderService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: ModuleLoaderService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: ModuleLoaderService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.Compiler }, { type: i0.Injector }]; } });\n\nclass StyleLoaderService {\n    constructor(document) {\n        this.document = document;\n    }\n    loadStyle(styleName) {\n        const head = this.document.getElementsByTagName('head')[0];\n        let themeLink = this.document.getElementById('client-theme');\n        if (themeLink) {\n            themeLink.href = styleName;\n        }\n        else {\n            const style = this.document.createElement('link');\n            style.id = 'client-theme';\n            style.rel = 'stylesheet';\n            style.href = `${styleName}`;\n            head.appendChild(style);\n        }\n    }\n}\nStyleLoaderService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: StyleLoaderService, deps: [{ token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nStyleLoaderService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: StyleLoaderService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: StyleLoaderService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: Document, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\nclass NoopDataService {\n    constructor(name) {\n        this.entities = new Map();\n        this.name = name;\n    }\n    add(entity) {\n        return of(entity);\n    }\n    delete(id) {\n        this.entities.delete(id);\n        return of(id);\n    }\n    getAll() {\n        const flat = [];\n        this.entities.forEach(v => {\n            flat.push(v);\n        });\n        return of(flat);\n    }\n    getById(id) {\n        return of(this.entities.get(id));\n    }\n    getWithQuery(params) {\n        const flat = [];\n        this.entities.forEach(v => {\n            flat.push(v);\n        });\n        return of(flat);\n    }\n    update(update) {\n        return of(undefined);\n    }\n    upsert(entity) {\n        //this.entities.set(entity.id, entity);\n        return of(entity);\n    }\n}\n\nclass AsyncApiCallHelperService {\n    constructor() {\n        this.taskProcessor = new MyAsyncTaskProcessor();\n    }\n    doTask(promise) {\n        return this.taskProcessor.doTask(promise);\n    }\n}\nAsyncApiCallHelperService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: AsyncApiCallHelperService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nAsyncApiCallHelperService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: AsyncApiCallHelperService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: AsyncApiCallHelperService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return []; } });\nclass ZoneMacroTaskWrapper {\n    wrap(request) {\n        return new Observable((observer) => {\n            let task;\n            let scheduled = false;\n            let sub = null;\n            let savedResult = null;\n            let savedError = null;\n            // tslint:disable-next-line:no-shadowed-variable\n            const scheduleTask = (_task) => {\n                task = _task;\n                scheduled = true;\n                const delegate = this.delegate(request);\n                sub = delegate.subscribe(res => savedResult = res, err => {\n                    if (!scheduled) {\n                        throw new Error('An http observable was completed twice. This shouldn\\'t happen, please file a bug.');\n                    }\n                    savedError = err;\n                    scheduled = false;\n                    task.invoke();\n                }, () => {\n                    if (!scheduled) {\n                        throw new Error('An http observable was completed twice. This shouldn\\'t happen, please file a bug.');\n                    }\n                    scheduled = false;\n                    task.invoke();\n                });\n            };\n            // tslint:disable-next-line:no-shadowed-variable\n            const cancelTask = (_task) => {\n                if (!scheduled) {\n                    return;\n                }\n                scheduled = false;\n                if (sub) {\n                    sub.unsubscribe();\n                    sub = null;\n                }\n            };\n            const onComplete = () => {\n                if (savedError !== null) {\n                    observer.error(savedError);\n                }\n                else {\n                    observer.next(savedResult);\n                    observer.complete();\n                }\n            };\n            // MockBackend for Http is synchronous, which means that if scheduleTask is by\n            // scheduleMacroTask, the request will hit MockBackend and the response will be\n            // sent, causing task.invoke() to be called.\n            const _task = Zone.current.scheduleMacroTask('ZoneMacroTaskWrapper.subscribe', onComplete, {}, () => null, cancelTask);\n            scheduleTask(_task);\n            return () => {\n                if (scheduled && task) {\n                    task.zone.cancelTask(task);\n                    scheduled = false;\n                }\n                if (sub) {\n                    sub.unsubscribe();\n                    sub = null;\n                }\n            };\n        });\n    }\n}\nclass MyAsyncTaskProcessor extends ZoneMacroTaskWrapper {\n    constructor() { super(); }\n    // your public task invocation method signature\n    doTask(request) {\n        // call via ZoneMacroTaskWrapper\n        return this.wrap(request);\n    }\n    // delegated raw implementation that will be called by ZoneMacroTaskWrapper\n    delegate(request) {\n        return new Observable((observer) => {\n            // calling observer.next / complete / error\n            request\n                .then(result => {\n                observer.next(result);\n                observer.complete();\n            }).catch(error => observer.error(error));\n        });\n    }\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AsyncApiCallHelperService, DynamicContentViewer, EMBEDDABLE_COMPONENT, ForDirective, HOST_NAME, ModuleLoaderService, MyAsyncTaskProcessor, NoopDataService, NotAvailablePipe, NumeralPipe, PROTOCOL, SITE_NAME, StyleLoaderService, UtilsModule, ZoneMacroTaskWrapper };\n"],"sourceRoot":"webpack:///","file":"435.8434f662b40c79df.js"}