{"version":3,"file":"5240.d62202b97623e461.js","mappings":"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","names":["concat","_len","arguments","length","args","Array","_key","concatAll","mergeAll","from","popScheduler","EMPTY","Observable","subscriber","complete","subscribeOn","scheduler","delay","undefined","operate","source","add","schedule","subscribe","scheduleAsyncIterable","input","Error","executeSchedule","iterator","Symbol","asyncIterator","next","then","result","done","value","scheduled","isInteropObservable","scheduleObservable","innerFrom","pipe","observeOn","isArrayLike","scheduleArray","i","closed","this","isPromise","schedulePromise","isAsyncIterable","isIterable","scheduleIterable","Symbol_iterator","_iterator$next","err","error","isFunction","return","isReadableStreamLike","scheduleReadableStreamLike","readableStreamLikeToAsyncGenerator","createInvalidObservableTypeError","merge","concurrent","popNumber","Infinity","sources","createOperatorSubscriber","destination","onNext","onComplete","onError","onFinalize","OperatorSubscriber","_Subscriber","_inherits","_super","_createSuper","shouldUnsubscribe","_thisSuper","_thisSuper2","_thisSuper3","_this","_classCallCheck","call","_next","_get","_assertThisInitialized","_getPrototypeOf","prototype","_error","unsubscribe","_complete","_createClass","key","_a","Subscriber","map","project","thisArg","index","mergeMap","identity","startWith","values","switchMap","resultSelector","innerSubscriber","isComplete","checkComplete","innerIndex","outerIndex","innerValue","take","count","seen","takeUntil","notifier","noop","tap","observerOrNext","tapObserver","isUnsub","_b","finalize","animationFrameProvider","callback","request","requestAnimationFrame","cancel","cancelAnimationFrame","delegate","handle","timestamp","Subscription","_requestAnimationFrame","apply","toString","_cancelAnimationFrame","AnimationFrameAction","_AsyncAction","work","id","actions","push","_scheduled","flush","AsyncAction","animationFrameScheduler","_AsyncScheduler","AnimationFrameScheduler","action","_active","flushId","shift","execute","state","AsyncScheduler","last","arr","popResultSelector","pop","isScheduler","defaultValue","parentSubscription","repeat","scheduleSubscription","hasLift","lift","init","liftedSource","TypeError","extendStyles","dest","importantProperties","hasOwnProperty","setProperty","has","removeProperty","toggleNativeDragInteractions","element","enable","userSelect","style","toggleVisibility","position","top","opacity","left","combineTransforms","transform","initialTransform","parseCssTimeUnitsToMs","multiplier","toLowerCase","indexOf","parseFloat","parseCssPropertyValue","computedStyle","name","getPropertyValue","split","part","trim","getMutableClientRect","clientRect","getBoundingClientRect","right","bottom","width","height","x","y","isInsideClientRect","adjustClientRect","isPointerNearClientRect","rect","threshold","pointerX","pointerY","xThreshold","yThreshold","ParentPositionTracker","_document","positions","Map","clear","elements","set","scrollPosition","getViewportScrollPosition","forEach","scrollTop","scrollLeft","event","target","_getEventTarget","cachedPosition","get","newTop","newLeft","viewportScrollPosition","topDifference","leftDifference","node","contains","window","scrollY","scrollX","deepCloneNode","clone","cloneNode","descendantsWithId","querySelectorAll","nodeName","removeAttribute","transferCanvasData","transferInputData","transferData","selector","descendantElements","cloneElements","cloneUniqueId","type","context","getContext","drawImage","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","activeEventListenerOptions","dragImportantProperties","Set","DragRef","_config","_ngZone","_viewportRuler","_dragDropRegistry","_this2","_passiveTransform","_activeTransform","_hasStartedDragging","_moveEvents","Subject","_pointerMoveSubscription","_pointerUpSubscription","_scrollSubscription","_resizeSubscription","_boundaryElement","_nativeInteractionsEnabled","_handles","_disabledHandles","_direction","dragStartDelay","_disabled","beforeStarted","started","released","ended","entered","exited","dropped","moved","_pointerDown","targetHandle","_getTargetHandle","disabled","_initializeDragSequence","_rootElement","_pointerMove","pointerPosition","_getPointerPositionOnPage","preventDefault","constrainedPointerPosition","_getConstrainedPointerPosition","_hasMoved","_lastKnownPointerPosition","_updatePointerDirectionDelta","_dropContainer","_updateActiveDropContainer","offset","constrainPosition","_initialClientRect","_pickupPositionOnPage","activeTransform","_applyRootElementTransform","observers","run","distance","_getDragDistance","delta","_pointerDirectionDelta","Math","abs","dragStartThreshold","isDelayElapsed","Date","now","_dragStartTime","_getDragStartDelay","container","_endDragSequence","isDragging","isReceiving","_startDragSequence","_pointerUp","_nativeDragStart","withRootElement","withParent","parentDragRef","_parentPositions","registerDragItem","newValue","coerceBooleanProperty","_toggleNativeDragInteractions","_placeholder","getPlaceholderElement","getRootElement","handles","_this3","coerceElement","disabledHandles","template","_previewTemplate","_placeholderTemplate","rootElement","_this4","_removeRootElementListeners","runOutsideAngular","addEventListener","_initialTransform","SVGElement","_ownerSVGElement","ownerSVGElement","boundaryElement","_this5","change","_containInsideBoundaryOnResize","parent","_parentDragRef","_this$_anchor","_this$_rootElement","remove","_anchor","_destroyPreview","_destroyPlaceholder","removeDragItem","_removeSubscriptions","delete","direction","_previewContainer","_this$_preview","_this$_previewRef","_preview","_previewRef","destroy","_this$_placeholder","_this$_placeholderRef","_placeholderRef","_this6","stopDragging","webkitTapHighlightColor","_rootElementTapHighlight","_stopScrolling","_animatePreviewToPlaceholder","_cleanupDragArtifacts","_cleanupCachedDimensions","dropPoint","isTouchEvent","_lastTouchEventTime","dropContainer","parentNode","placeholder","_createPlaceholderElement","anchor","createComment","shadowRoot","_getShadowRoot","insertBefore","_createPreviewElement","body","appendChild","replaceChild","_getPreviewInsertionPoint","start","_initialContainer","_initialIndex","getItemIndex","cache","getScrollableParents","referenceElement","_this7","stopPropagation","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","isFakeEvent","isFakeTouchstartFromScreenReader","isFakeMousedownFromScreenReader","draggable","rootStyles","pointerMove","pointerUp","scrolled","scrollEvent","_updateOnScroll","_boundaryRect","previewTemplate","_pickupPositionInElement","matchSize","_getPointerPositionInElement","_pointerPositionAtLastDirectionChange","startDragging","_this8","_previewRect","currentIndex","isPointerOverContainer","_isOverContainer","item","previousIndex","previousContainer","drop","_ref","_ref2","_this9","rawX","rawY","newContainer","_getSiblingContainerFromPosition","exit","enter","sortingDisabled","_startScrollingIfNecessary","_sortItem","_applyPreviewTransform","preview","previewConfig","previewClass","rootRect","viewRef","viewContainer","createEmbeddedView","detectChanges","getRootNode","matchElementSize","getTransform","margin","zIndex","classList","setAttribute","isArray","className","_this10","Promise","resolve","placeholderRect","duration","getTransformTransitionDurationInMs","getComputedStyle","transitionedProperties","property","find","prop","propertyIndex","rawDurations","rawDelays","handler","_this10$_preview","propertyName","removeEventListener","clearTimeout","timeout","setTimeout","placeholderConfig","placeholderTemplate","pointerEvents","elementRect","handleElement","referenceRect","point","targetTouches","_getViewportScrollPosition","pageX","pageY","touches","changedTouches","svgMatrix","getScreenCTM","svgPoint","createSVGPoint","matrixTransform","inverse","dropContainerLock","lockAxis","_ref3","_this$_pickupPosition","pickupX","pickupY","boundaryRect","_this$_getPreviewRect","_getPreviewRect","minY","maxY","clamp$1","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","pointerDirectionChangeThreshold","shouldEnable","styles","_this$_previewTemplat","currentPosition","pickupPosition","_this$_passiveTransfo","leftOverflow","rightOverflow","topOverflow","bottomOverflow","setFreeDragPosition","touch","mouse","scrollDifference","handleScroll","_this$_parentPosition","_cachedShadowRoot","initialParent","previewContainer","documentRef","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","round","min","max","rootNodes","nodeType","ELEMENT_NODE","wrapper","createElement","sourceRect","moveItemInArray","array","fromIndex","toIndex","clamp","to","transferArrayItem","currentArray","targetArray","targetIndex","splice","copyArrayItem","SingleAxisSortStrategy","_element","_itemPositions","orientation","_previousSwap","drag","overlaps","items","withItems","pointerDelta","siblings","newIndex","_getItemIndexFromPointerPosition","isHorizontal","findIndex","currentItem","siblingAtNewPosition","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","slice","sibling","isDraggedItem","elementToOffset","activeDraggables","_activeDraggables","newPositionReference","_shouldEnterAsFirstChild","parentElement","_cacheItemPositions","predicate","_sortPredicate","_this11","_this11$_itemPosition","p","reverse","_this12","_ref4","_ref5","_sortFromLastPointerPosition","elementToMeasure","getVisibleElement","sort","a","b","immediateSibling","end","itemPositions","lastItemRect","firstItemRect","_this13","_ref6","floor","SCROLL_PROXIMITY_THRESHOLD","DropListRef","_this14","autoScrollDisabled","autoScrollStep","enterPredicate","sortPredicate","sorted","receivingStarted","receivingStopped","_isDragging","_draggables","_siblings","_activeSiblings","_viewportScrollSubscription","_verticalScrollDirection","_horizontalScrollDirection","_stopScrollTimers","_startScrollInterval","interval","period","timer","asyncScheduler","_scrollNode","scrollStep","scrollBy","withScrollableParents","registerDropContainer","_sortStrategy","withSortPredicate","removeDropContainer","_draggingStarted","_notifyReceivingSiblings","_cacheParentPositions","_reset","_this15","previousItems","_withDropContainer","filter","every","connectedTo","_scrollableElements","_toConsumableArray","size","_clientRect","_this16","scrollNode","verticalScrollDirection","horizontalScrollDirection","_getElementScrollDire","getElementScrollDirections","computedVertical","getVerticalScrollDirection","computedHorizontal","getHorizontalScrollDirection","scrollHeight","clientHeight","scrollWidth","clientWidth","_getElementScrollDire2","_slicedToArray","_this$_viewportRuler$","getViewportSize","_initialScrollSnap","msScrollSnapType","scrollSnapType","_listenToScrollEvents","_this17","_stopReceiving","reset","_canReceive","elementFromPoint","nativeElement","_this18","activeSiblings","initiator","receiver","_this19","updateOnScroll","_this20","draggedItems","getActiveItemsSnapshot","_startReceiving","activeCapturingEventOptions","capture","DragDropRegistry","_this21","_dropInstances","_dragInstances","_activeDragInstances","_globalListeners","_draggingPredicate","scroll","_preventDefaultWhileDragging","_persistentTouchmoveListener","some","_this22","_this23","startsWith","e","options","config","_clearGlobalListeners","_this24","streams","observer","_this25","instance","_this26","ɵfac","t","i0","DOCUMENT","ɵprov","token","factory","providedIn","DEFAULT_CONFIG","DragDrop","i1","CDK_DRAG_PARENT","InjectionToken","CDK_DRAG_HANDLE","CdkDragHandle","parentDrag","_stateChanges","_parentDrag","ɵdir","selectors","hostAttrs","inputs","standalone","features","provide","useExisting","CDK_DRAG_PLACEHOLDER","CdkDragPlaceholder","templateRef","data","CDK_DRAG_PREVIEW","CdkDragPreview","_matchSize","CDK_DRAG_CONFIG","CDK_DROP_LIST","CdkDrag","_viewContainerRef","_dir","dragDrop","_changeDetectorRef","_selfHandle","_this27","_destroyed","EventEmitter","subscription","_dragRef","movedEvent","createDrag","_assignDefaults","_dropListRef","addItem","_syncInputs","_handleEvents","getFreeDragPosition","_this28","onStable","_updateRootElement","_setupHandlesListener","freeDragPosition","changes","rootSelectorChange","rootElementSelector","positionChange","firstChange","_this29","removeItem","dispose","_element$parentElemen","closest","boundary","ref","_this30","dir","coerceNumberProperty","withBoundaryElement","_getBoundaryElement","withPlaceholderTemplate","withPreviewTemplate","withPreviewContainer","withDirection","_CdkDrag$_dragInstanc","_this31","startEvent","emit","markForCheck","releaseEvent","endEvent","enterEvent","exitEvent","dropEvent","draggingDisabled","_this32","childHandleElements","withHandles","handleInstance","dragRef","disableHandle","enableHandle","i1$1","contentQueries","rf","ctx","dirIndex","_t","first","hostVars","hostBindings","outputs","exportAs","CDK_DROP_LIST_GROUP","CdkDropListGroup","_items","_uniqueIdCounter","CdkDropList","_scrollDispatcher","_group","_this33","_unsortedItems","createDropList","_setupInputSyncSubscription","_dropLists","_syncItemsWithRef","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","_this34","coerceArray","list","_scrollableParentsResolved","scrollableParents","getAncestorScrollContainers","scrollable","getElementRef","withOrientation","_this35","listAutoScrollDisabled","listOrientation","getSortedItems","useValue","DragDropModule","ɵmod","ɵinj","providers","imports","CdkScrollableModule","_arrayLikeToArray","len","arr2","_arrayWithHoles","self","ReferenceError","_createForOfIteratorHelper","o","allowArrayLike","it","_unsupportedIterableToArray_js__WEBPACK_IMPORTED_MODULE_0__","Z","F","s","n","_e","f","normalCompletion","didErr","step","_e2","Derived","hasNativeReflectConstruct","isNativeReflectConstruct","Super","getPrototypeOf","NewTarget","constructor","Reflect","construct","_possibleConstructorReturn","esm_typeof","assertThisInitialized","bind","base","_superPropBase","object","Object","desc","getOwnPropertyDescriptor","setPrototypeOf","__proto__","subClass","superClass","create","writable","configurable","defineProperty","_setPrototypeOf_js__WEBPACK_IMPORTED_MODULE_0__","_isNativeReflectConstruct","sham","Proxy","Boolean","valueOf","_iterableToArray","iter","_nonIterableRest","_setPrototypeOf","arrayWithHoles","_iterableToArrayLimit","_i","_s","_x","_r","_arr","_n","_d","unsupportedIterableToArray","nonIterableRest","_arrayWithoutHoles","arrayLikeToArray","iterableToArray","_nonIterableSpread","_unsupportedIterableToArray","minLen","_arrayLikeToArray_js__WEBPACK_IMPORTED_MODULE_0__","test"],"sourceRoot":"webpack:///","sources":["./node_modules/rxjs/dist/esm/internal/observable/concat.js","./node_modules/rxjs/dist/esm/internal/operators/concatAll.js","./node_modules/rxjs/dist/esm/internal/observable/empty.js","./node_modules/rxjs/dist/esm/internal/operators/subscribeOn.js","./node_modules/rxjs/dist/esm/internal/scheduled/scheduleAsyncIterable.js","./node_modules/rxjs/dist/esm/internal/observable/from.js","./node_modules/rxjs/dist/esm/internal/scheduled/scheduled.js","./node_modules/rxjs/dist/esm/internal/scheduled/scheduleObservable.js","./node_modules/rxjs/dist/esm/internal/scheduled/scheduleArray.js","./node_modules/rxjs/dist/esm/internal/scheduled/schedulePromise.js","./node_modules/rxjs/dist/esm/internal/scheduled/scheduleIterable.js","./node_modules/rxjs/dist/esm/internal/scheduled/scheduleReadableStreamLike.js","./node_modules/rxjs/dist/esm/internal/observable/merge.js","./node_modules/rxjs/dist/esm/internal/operators/OperatorSubscriber.js","./node_modules/rxjs/dist/esm/internal/operators/map.js","./node_modules/rxjs/dist/esm/internal/operators/mergeAll.js","./node_modules/rxjs/dist/esm/internal/operators/observeOn.js","./node_modules/rxjs/dist/esm/internal/operators/startWith.js","./node_modules/rxjs/dist/esm/internal/operators/switchMap.js","./node_modules/rxjs/dist/esm/internal/operators/take.js","./node_modules/rxjs/dist/esm/internal/operators/takeUntil.js","./node_modules/rxjs/dist/esm/internal/operators/tap.js","./node_modules/rxjs/dist/esm/internal/scheduler/animationFrameProvider.js","./node_modules/rxjs/dist/esm/internal/scheduler/AnimationFrameAction.js","./node_modules/rxjs/dist/esm/internal/scheduler/animationFrame.js","./node_modules/rxjs/dist/esm/internal/scheduler/AnimationFrameScheduler.js","./node_modules/rxjs/dist/esm/internal/util/args.js","./node_modules/rxjs/dist/esm/internal/util/executeSchedule.js","./node_modules/rxjs/dist/esm/internal/util/isScheduler.js","./node_modules/rxjs/dist/esm/internal/util/lift.js","./node_modules/@angular/cdk/fesm2022/drag-drop.mjs","./node_modules/rxjs/dist/esm/internal/observable/interval.js","./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","./node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","./node_modules/@babel/runtime/helpers/esm/createSuper.js","./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","./node_modules/@babel/runtime/helpers/esm/get.js","./node_modules/@babel/runtime/helpers/esm/superPropBase.js","./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","./node_modules/@babel/runtime/helpers/esm/inherits.js","./node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js","./node_modules/@babel/runtime/helpers/esm/iterableToArray.js","./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","./node_modules/@babel/runtime/helpers/esm/slicedToArray.js","./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js"],"sourcesContent":["import { concatAll } from '../operators/concatAll';\nimport { popScheduler } from '../util/args';\nimport { from } from './from';\nexport function concat(...args) {\n    return concatAll()(from(args, popScheduler(args)));\n}\n","import { mergeAll } from './mergeAll';\nexport function concatAll() {\n    return mergeAll(1);\n}\n","import { Observable } from '../Observable';\nexport const EMPTY = new Observable((subscriber) => subscriber.complete());\nexport function empty(scheduler) {\n    return scheduler ? emptyScheduled(scheduler) : EMPTY;\n}\nfunction emptyScheduled(scheduler) {\n    return new Observable((subscriber) => scheduler.schedule(() => subscriber.complete()));\n}\n","import { operate } from '../util/lift';\nexport function subscribeOn(scheduler, delay = 0) {\n    return operate((source, subscriber) => {\n        subscriber.add(scheduler.schedule(() => source.subscribe(subscriber), delay));\n    });\n}\n","import { Observable } from '../Observable';\nimport { executeSchedule } from '../util/executeSchedule';\nexport function scheduleAsyncIterable(input, scheduler) {\n    if (!input) {\n        throw new Error('Iterable cannot be null');\n    }\n    return new Observable((subscriber) => {\n        executeSchedule(subscriber, scheduler, () => {\n            const iterator = input[Symbol.asyncIterator]();\n            executeSchedule(subscriber, scheduler, () => {\n                iterator.next().then((result) => {\n                    if (result.done) {\n                        subscriber.complete();\n                    }\n                    else {\n                        subscriber.next(result.value);\n                    }\n                });\n            }, 0, true);\n        });\n    });\n}\n","import { scheduled } from '../scheduled/scheduled';\nimport { innerFrom } from './innerFrom';\nexport function from(input, scheduler) {\n    return scheduler ? scheduled(input, scheduler) : innerFrom(input);\n}\n","import { scheduleObservable } from './scheduleObservable';\nimport { schedulePromise } from './schedulePromise';\nimport { scheduleArray } from './scheduleArray';\nimport { scheduleIterable } from './scheduleIterable';\nimport { scheduleAsyncIterable } from './scheduleAsyncIterable';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isPromise } from '../util/isPromise';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isIterable } from '../util/isIterable';\nimport { isAsyncIterable } from '../util/isAsyncIterable';\nimport { createInvalidObservableTypeError } from '../util/throwUnobservableError';\nimport { isReadableStreamLike } from '../util/isReadableStreamLike';\nimport { scheduleReadableStreamLike } from './scheduleReadableStreamLike';\nexport function scheduled(input, scheduler) {\n    if (input != null) {\n        if (isInteropObservable(input)) {\n            return scheduleObservable(input, scheduler);\n        }\n        if (isArrayLike(input)) {\n            return scheduleArray(input, scheduler);\n        }\n        if (isPromise(input)) {\n            return schedulePromise(input, scheduler);\n        }\n        if (isAsyncIterable(input)) {\n            return scheduleAsyncIterable(input, scheduler);\n        }\n        if (isIterable(input)) {\n            return scheduleIterable(input, scheduler);\n        }\n        if (isReadableStreamLike(input)) {\n            return scheduleReadableStreamLike(input, scheduler);\n        }\n    }\n    throw createInvalidObservableTypeError(input);\n}\n","import { innerFrom } from '../observable/innerFrom';\nimport { observeOn } from '../operators/observeOn';\nimport { subscribeOn } from '../operators/subscribeOn';\nexport function scheduleObservable(input, scheduler) {\n    return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));\n}\n","import { Observable } from '../Observable';\nexport function scheduleArray(input, scheduler) {\n    return new Observable((subscriber) => {\n        let i = 0;\n        return scheduler.schedule(function () {\n            if (i === input.length) {\n                subscriber.complete();\n            }\n            else {\n                subscriber.next(input[i++]);\n                if (!subscriber.closed) {\n                    this.schedule();\n                }\n            }\n        });\n    });\n}\n","import { innerFrom } from '../observable/innerFrom';\nimport { observeOn } from '../operators/observeOn';\nimport { subscribeOn } from '../operators/subscribeOn';\nexport function schedulePromise(input, scheduler) {\n    return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));\n}\n","import { Observable } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { isFunction } from '../util/isFunction';\nimport { executeSchedule } from '../util/executeSchedule';\nexport function scheduleIterable(input, scheduler) {\n    return new Observable((subscriber) => {\n        let iterator;\n        executeSchedule(subscriber, scheduler, () => {\n            iterator = input[Symbol_iterator]();\n            executeSchedule(subscriber, scheduler, () => {\n                let value;\n                let done;\n                try {\n                    ({ value, done } = iterator.next());\n                }\n                catch (err) {\n                    subscriber.error(err);\n                    return;\n                }\n                if (done) {\n                    subscriber.complete();\n                }\n                else {\n                    subscriber.next(value);\n                }\n            }, 0, true);\n        });\n        return () => isFunction(iterator === null || iterator === void 0 ? void 0 : iterator.return) && iterator.return();\n    });\n}\n","import { scheduleAsyncIterable } from './scheduleAsyncIterable';\nimport { readableStreamLikeToAsyncGenerator } from '../util/isReadableStreamLike';\nexport function scheduleReadableStreamLike(input, scheduler) {\n    return scheduleAsyncIterable(readableStreamLikeToAsyncGenerator(input), scheduler);\n}\n","import { mergeAll } from '../operators/mergeAll';\nimport { innerFrom } from './innerFrom';\nimport { EMPTY } from './empty';\nimport { popNumber, popScheduler } from '../util/args';\nimport { from } from './from';\nexport function merge(...args) {\n    const scheduler = popScheduler(args);\n    const concurrent = popNumber(args, Infinity);\n    const sources = args;\n    return !sources.length\n        ?\n            EMPTY\n        : sources.length === 1\n            ?\n                innerFrom(sources[0])\n            :\n                mergeAll(concurrent)(from(sources, scheduler));\n}\n","import { Subscriber } from '../Subscriber';\nexport function createOperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {\n    return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);\n}\nexport class OperatorSubscriber extends Subscriber {\n    constructor(destination, onNext, onComplete, onError, onFinalize, shouldUnsubscribe) {\n        super(destination);\n        this.onFinalize = onFinalize;\n        this.shouldUnsubscribe = shouldUnsubscribe;\n        this._next = onNext\n            ? function (value) {\n                try {\n                    onNext(value);\n                }\n                catch (err) {\n                    destination.error(err);\n                }\n            }\n            : super._next;\n        this._error = onError\n            ? function (err) {\n                try {\n                    onError(err);\n                }\n                catch (err) {\n                    destination.error(err);\n                }\n                finally {\n                    this.unsubscribe();\n                }\n            }\n            : super._error;\n        this._complete = onComplete\n            ? function () {\n                try {\n                    onComplete();\n                }\n                catch (err) {\n                    destination.error(err);\n                }\n                finally {\n                    this.unsubscribe();\n                }\n            }\n            : super._complete;\n    }\n    unsubscribe() {\n        var _a;\n        if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {\n            const { closed } = this;\n            super.unsubscribe();\n            !closed && ((_a = this.onFinalize) === null || _a === void 0 ? void 0 : _a.call(this));\n        }\n    }\n}\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function map(project, thisArg) {\n    return operate((source, subscriber) => {\n        let index = 0;\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            subscriber.next(project.call(thisArg, value, index++));\n        }));\n    });\n}\n","import { mergeMap } from './mergeMap';\nimport { identity } from '../util/identity';\nexport function mergeAll(concurrent = Infinity) {\n    return mergeMap(identity, concurrent);\n}\n","import { executeSchedule } from '../util/executeSchedule';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function observeOn(scheduler, delay = 0) {\n    return operate((source, subscriber) => {\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => executeSchedule(subscriber, scheduler, () => subscriber.next(value), delay), () => executeSchedule(subscriber, scheduler, () => subscriber.complete(), delay), (err) => executeSchedule(subscriber, scheduler, () => subscriber.error(err), delay)));\n    });\n}\n","import { concat } from '../observable/concat';\nimport { popScheduler } from '../util/args';\nimport { operate } from '../util/lift';\nexport function startWith(...values) {\n    const scheduler = popScheduler(values);\n    return operate((source, subscriber) => {\n        (scheduler ? concat(values, source, scheduler) : concat(values, source)).subscribe(subscriber);\n    });\n}\n","import { innerFrom } from '../observable/innerFrom';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function switchMap(project, resultSelector) {\n    return operate((source, subscriber) => {\n        let innerSubscriber = null;\n        let index = 0;\n        let isComplete = false;\n        const checkComplete = () => isComplete && !innerSubscriber && subscriber.complete();\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            innerSubscriber === null || innerSubscriber === void 0 ? void 0 : innerSubscriber.unsubscribe();\n            let innerIndex = 0;\n            const outerIndex = index++;\n            innerFrom(project(value, outerIndex)).subscribe((innerSubscriber = createOperatorSubscriber(subscriber, (innerValue) => subscriber.next(resultSelector ? resultSelector(value, innerValue, outerIndex, innerIndex++) : innerValue), () => {\n                innerSubscriber = null;\n                checkComplete();\n            })));\n        }, () => {\n            isComplete = true;\n            checkComplete();\n        }));\n    });\n}\n","import { EMPTY } from '../observable/empty';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function take(count) {\n    return count <= 0\n        ?\n            () => EMPTY\n        : operate((source, subscriber) => {\n            let seen = 0;\n            source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n                if (++seen <= count) {\n                    subscriber.next(value);\n                    if (count <= seen) {\n                        subscriber.complete();\n                    }\n                }\n            }));\n        });\n}\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\nimport { noop } from '../util/noop';\nexport function takeUntil(notifier) {\n    return operate((source, subscriber) => {\n        innerFrom(notifier).subscribe(createOperatorSubscriber(subscriber, () => subscriber.complete(), noop));\n        !subscriber.closed && source.subscribe(subscriber);\n    });\n}\n","import { isFunction } from '../util/isFunction';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { identity } from '../util/identity';\nexport function tap(observerOrNext, error, complete) {\n    const tapObserver = isFunction(observerOrNext) || error || complete\n        ?\n            { next: observerOrNext, error, complete }\n        : observerOrNext;\n    return tapObserver\n        ? operate((source, subscriber) => {\n            var _a;\n            (_a = tapObserver.subscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);\n            let isUnsub = true;\n            source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n                var _a;\n                (_a = tapObserver.next) === null || _a === void 0 ? void 0 : _a.call(tapObserver, value);\n                subscriber.next(value);\n            }, () => {\n                var _a;\n                isUnsub = false;\n                (_a = tapObserver.complete) === null || _a === void 0 ? void 0 : _a.call(tapObserver);\n                subscriber.complete();\n            }, (err) => {\n                var _a;\n                isUnsub = false;\n                (_a = tapObserver.error) === null || _a === void 0 ? void 0 : _a.call(tapObserver, err);\n                subscriber.error(err);\n            }, () => {\n                var _a, _b;\n                if (isUnsub) {\n                    (_a = tapObserver.unsubscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);\n                }\n                (_b = tapObserver.finalize) === null || _b === void 0 ? void 0 : _b.call(tapObserver);\n            }));\n        })\n        :\n            identity;\n}\n","import { Subscription } from '../Subscription';\nexport const animationFrameProvider = {\n    schedule(callback) {\n        let request = requestAnimationFrame;\n        let cancel = cancelAnimationFrame;\n        const { delegate } = animationFrameProvider;\n        if (delegate) {\n            request = delegate.requestAnimationFrame;\n            cancel = delegate.cancelAnimationFrame;\n        }\n        const handle = request((timestamp) => {\n            cancel = undefined;\n            callback(timestamp);\n        });\n        return new Subscription(() => cancel === null || cancel === void 0 ? void 0 : cancel(handle));\n    },\n    requestAnimationFrame(...args) {\n        const { delegate } = animationFrameProvider;\n        return ((delegate === null || delegate === void 0 ? void 0 : delegate.requestAnimationFrame) || requestAnimationFrame)(...args);\n    },\n    cancelAnimationFrame(...args) {\n        const { delegate } = animationFrameProvider;\n        return ((delegate === null || delegate === void 0 ? void 0 : delegate.cancelAnimationFrame) || cancelAnimationFrame)(...args);\n    },\n    delegate: undefined,\n};\n","import { AsyncAction } from './AsyncAction';\nimport { animationFrameProvider } from './animationFrameProvider';\nexport class AnimationFrameAction extends AsyncAction {\n    constructor(scheduler, work) {\n        super(scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n    }\n    requestAsyncId(scheduler, id, delay = 0) {\n        if (delay !== null && delay > 0) {\n            return super.requestAsyncId(scheduler, id, delay);\n        }\n        scheduler.actions.push(this);\n        return scheduler._scheduled || (scheduler._scheduled = animationFrameProvider.requestAnimationFrame(() => scheduler.flush(undefined)));\n    }\n    recycleAsyncId(scheduler, id, delay = 0) {\n        var _a;\n        if (delay != null ? delay > 0 : this.delay > 0) {\n            return super.recycleAsyncId(scheduler, id, delay);\n        }\n        const { actions } = scheduler;\n        if (id != null && ((_a = actions[actions.length - 1]) === null || _a === void 0 ? void 0 : _a.id) !== id) {\n            animationFrameProvider.cancelAnimationFrame(id);\n            scheduler._scheduled = undefined;\n        }\n        return undefined;\n    }\n}\n","import { AnimationFrameAction } from './AnimationFrameAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\nexport const animationFrameScheduler = new AnimationFrameScheduler(AnimationFrameAction);\nexport const animationFrame = animationFrameScheduler;\n","import { AsyncScheduler } from './AsyncScheduler';\nexport class AnimationFrameScheduler extends AsyncScheduler {\n    flush(action) {\n        this._active = true;\n        const flushId = this._scheduled;\n        this._scheduled = undefined;\n        const { actions } = this;\n        let error;\n        action = action || actions.shift();\n        do {\n            if ((error = action.execute(action.state, action.delay))) {\n                break;\n            }\n        } while ((action = actions[0]) && action.id === flushId && actions.shift());\n        this._active = false;\n        if (error) {\n            while ((action = actions[0]) && action.id === flushId && actions.shift()) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    }\n}\n","import { isFunction } from './isFunction';\nimport { isScheduler } from './isScheduler';\nfunction last(arr) {\n    return arr[arr.length - 1];\n}\nexport function popResultSelector(args) {\n    return isFunction(last(args)) ? args.pop() : undefined;\n}\nexport function popScheduler(args) {\n    return isScheduler(last(args)) ? args.pop() : undefined;\n}\nexport function popNumber(args, defaultValue) {\n    return typeof last(args) === 'number' ? args.pop() : defaultValue;\n}\n","export function executeSchedule(parentSubscription, scheduler, work, delay = 0, repeat = false) {\n    const scheduleSubscription = scheduler.schedule(function () {\n        work();\n        if (repeat) {\n            parentSubscription.add(this.schedule(null, delay));\n        }\n        else {\n            this.unsubscribe();\n        }\n    }, delay);\n    parentSubscription.add(scheduleSubscription);\n    if (!repeat) {\n        return scheduleSubscription;\n    }\n}\n","import { isFunction } from './isFunction';\nexport function isScheduler(value) {\n    return value && isFunction(value.schedule);\n}\n","import { isFunction } from './isFunction';\nexport function hasLift(source) {\n    return isFunction(source === null || source === void 0 ? void 0 : source.lift);\n}\nexport function operate(init) {\n    return (source) => {\n        if (hasLift(source)) {\n            return source.lift(function (liftedSource) {\n                try {\n                    return init(liftedSource, this);\n                }\n                catch (err) {\n                    this.error(err);\n                }\n            });\n        }\n        throw new TypeError('Unable to lift unknown Observable type');\n    };\n}\n","import * as i0 from '@angular/core';\nimport { Injectable, Inject, InjectionToken, Directive, Optional, SkipSelf, Input, EventEmitter, Self, ContentChildren, ContentChild, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { _getEventTarget, normalizePassiveListenerOptions, _getShadowRoot } from '@angular/cdk/platform';\nimport { coerceBooleanProperty, coerceElement, coerceNumberProperty, coerceArray } from '@angular/cdk/coercion';\nimport { isFakeTouchstartFromScreenReader, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge } from 'rxjs';\nimport { takeUntil, map, take, startWith, tap, switchMap } from 'rxjs/operators';\nimport * as i1$1 from '@angular/cdk/bidi';\n\n/**\n * Shallow-extends a stylesheet object with another stylesheet-like object.\n * Note that the keys in `source` have to be dash-cased.\n * @docs-private\n */\nfunction extendStyles(dest, source, importantProperties) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            const value = source[key];\n            if (value) {\n                dest.setProperty(key, value, importantProperties?.has(key) ? 'important' : '');\n            }\n            else {\n                dest.removeProperty(key);\n            }\n        }\n    }\n    return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nfunction toggleNativeDragInteractions(element, enable) {\n    const userSelect = enable ? '' : 'none';\n    extendStyles(element.style, {\n        'touch-action': enable ? '' : 'none',\n        '-webkit-user-drag': enable ? '' : 'none',\n        '-webkit-tap-highlight-color': enable ? '' : 'transparent',\n        'user-select': userSelect,\n        '-ms-user-select': userSelect,\n        '-webkit-user-select': userSelect,\n        '-moz-user-select': userSelect,\n    });\n}\n/**\n * Toggles whether an element is visible while preserving its dimensions.\n * @param element Element whose visibility to toggle\n * @param enable Whether the element should be visible.\n * @param importantProperties Properties to be set as `!important`.\n * @docs-private\n */\nfunction toggleVisibility(element, enable, importantProperties) {\n    extendStyles(element.style, {\n        position: enable ? '' : 'fixed',\n        top: enable ? '' : '0',\n        opacity: enable ? '' : '0',\n        left: enable ? '' : '-999em',\n    }, importantProperties);\n}\n/**\n * Combines a transform string with an optional other transform\n * that exited before the base transform was applied.\n */\nfunction combineTransforms(transform, initialTransform) {\n    return initialTransform && initialTransform != 'none'\n        ? transform + ' ' + initialTransform\n        : transform;\n}\n\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value) {\n    // Some browsers will return it in seconds, whereas others will return milliseconds.\n    const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n    return parseFloat(value) * multiplier;\n}\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nfunction getTransformTransitionDurationInMs(element) {\n    const computedStyle = getComputedStyle(element);\n    const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n    const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n    // If there's no transition for `all` or `transform`, we shouldn't do anything.\n    if (!property) {\n        return 0;\n    }\n    // Get the index of the property that we're interested in and match\n    // it up to the same index in `transition-delay` and `transition-duration`.\n    const propertyIndex = transitionedProperties.indexOf(property);\n    const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n    const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n    return (parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n        parseCssTimeUnitsToMs(rawDelays[propertyIndex]));\n}\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle, name) {\n    const value = computedStyle.getPropertyValue(name);\n    return value.split(',').map(part => part.trim());\n}\n\n/** Gets a mutable version of an element's bounding `ClientRect`. */\nfunction getMutableClientRect(element) {\n    const clientRect = element.getBoundingClientRect();\n    // We need to clone the `clientRect` here, because all the values on it are readonly\n    // and we need to be able to update them. Also we can't use a spread here, because\n    // the values on a `ClientRect` aren't own properties. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n    return {\n        top: clientRect.top,\n        right: clientRect.right,\n        bottom: clientRect.bottom,\n        left: clientRect.left,\n        width: clientRect.width,\n        height: clientRect.height,\n        x: clientRect.x,\n        y: clientRect.y,\n    };\n}\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param clientRect ClientRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nfunction isInsideClientRect(clientRect, x, y) {\n    const { top, bottom, left, right } = clientRect;\n    return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param clientRect `ClientRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\nfunction adjustClientRect(clientRect, top, left) {\n    clientRect.top += top;\n    clientRect.bottom = clientRect.top + clientRect.height;\n    clientRect.left += left;\n    clientRect.right = clientRect.left + clientRect.width;\n}\n/**\n * Checks whether the pointer coordinates are close to a ClientRect.\n * @param rect ClientRect to check against.\n * @param threshold Threshold around the ClientRect.\n * @param pointerX Coordinates along the X axis.\n * @param pointerY Coordinates along the Y axis.\n */\nfunction isPointerNearClientRect(rect, threshold, pointerX, pointerY) {\n    const { top, right, bottom, left, width, height } = rect;\n    const xThreshold = width * threshold;\n    const yThreshold = height * threshold;\n    return (pointerY > top - yThreshold &&\n        pointerY < bottom + yThreshold &&\n        pointerX > left - xThreshold &&\n        pointerX < right + xThreshold);\n}\n\n/** Keeps track of the scroll position and dimensions of the parents of an element. */\nclass ParentPositionTracker {\n    constructor(_document) {\n        this._document = _document;\n        /** Cached positions of the scrollable parent elements. */\n        this.positions = new Map();\n    }\n    /** Clears the cached positions. */\n    clear() {\n        this.positions.clear();\n    }\n    /** Caches the positions. Should be called at the beginning of a drag sequence. */\n    cache(elements) {\n        this.clear();\n        this.positions.set(this._document, {\n            scrollPosition: this.getViewportScrollPosition(),\n        });\n        elements.forEach(element => {\n            this.positions.set(element, {\n                scrollPosition: { top: element.scrollTop, left: element.scrollLeft },\n                clientRect: getMutableClientRect(element),\n            });\n        });\n    }\n    /** Handles scrolling while a drag is taking place. */\n    handleScroll(event) {\n        const target = _getEventTarget(event);\n        const cachedPosition = this.positions.get(target);\n        if (!cachedPosition) {\n            return null;\n        }\n        const scrollPosition = cachedPosition.scrollPosition;\n        let newTop;\n        let newLeft;\n        if (target === this._document) {\n            const viewportScrollPosition = this.getViewportScrollPosition();\n            newTop = viewportScrollPosition.top;\n            newLeft = viewportScrollPosition.left;\n        }\n        else {\n            newTop = target.scrollTop;\n            newLeft = target.scrollLeft;\n        }\n        const topDifference = scrollPosition.top - newTop;\n        const leftDifference = scrollPosition.left - newLeft;\n        // Go through and update the cached positions of the scroll\n        // parents that are inside the element that was scrolled.\n        this.positions.forEach((position, node) => {\n            if (position.clientRect && target !== node && target.contains(node)) {\n                adjustClientRect(position.clientRect, topDifference, leftDifference);\n            }\n        });\n        scrollPosition.top = newTop;\n        scrollPosition.left = newLeft;\n        return { top: topDifference, left: leftDifference };\n    }\n    /**\n     * Gets the scroll position of the viewport. Note that we use the scrollX and scrollY directly,\n     * instead of going through the `ViewportRuler`, because the first value the ruler looks at is\n     * the top/left offset of the `document.documentElement` which works for most cases, but breaks\n     * if the element is offset by something like the `BlockScrollStrategy`.\n     */\n    getViewportScrollPosition() {\n        return { top: window.scrollY, left: window.scrollX };\n    }\n}\n\n/** Creates a deep clone of an element. */\nfunction deepCloneNode(node) {\n    const clone = node.cloneNode(true);\n    const descendantsWithId = clone.querySelectorAll('[id]');\n    const nodeName = node.nodeName.toLowerCase();\n    // Remove the `id` to avoid having multiple elements with the same id on the page.\n    clone.removeAttribute('id');\n    for (let i = 0; i < descendantsWithId.length; i++) {\n        descendantsWithId[i].removeAttribute('id');\n    }\n    if (nodeName === 'canvas') {\n        transferCanvasData(node, clone);\n    }\n    else if (nodeName === 'input' || nodeName === 'select' || nodeName === 'textarea') {\n        transferInputData(node, clone);\n    }\n    transferData('canvas', node, clone, transferCanvasData);\n    transferData('input, textarea, select', node, clone, transferInputData);\n    return clone;\n}\n/** Matches elements between an element and its clone and allows for their data to be cloned. */\nfunction transferData(selector, node, clone, callback) {\n    const descendantElements = node.querySelectorAll(selector);\n    if (descendantElements.length) {\n        const cloneElements = clone.querySelectorAll(selector);\n        for (let i = 0; i < descendantElements.length; i++) {\n            callback(descendantElements[i], cloneElements[i]);\n        }\n    }\n}\n// Counter for unique cloned radio button names.\nlet cloneUniqueId = 0;\n/** Transfers the data of one input element to another. */\nfunction transferInputData(source, clone) {\n    // Browsers throw an error when assigning the value of a file input programmatically.\n    if (clone.type !== 'file') {\n        clone.value = source.value;\n    }\n    // Radio button `name` attributes must be unique for radio button groups\n    // otherwise original radio buttons can lose their checked state\n    // once the clone is inserted in the DOM.\n    if (clone.type === 'radio' && clone.name) {\n        clone.name = `mat-clone-${clone.name}-${cloneUniqueId++}`;\n    }\n}\n/** Transfers the data of one canvas element to another. */\nfunction transferCanvasData(source, clone) {\n    const context = clone.getContext('2d');\n    if (context) {\n        // In some cases `drawImage` can throw (e.g. if the canvas size is 0x0).\n        // We can't do much about it so just ignore the error.\n        try {\n            context.drawImage(source, 0, 0);\n        }\n        catch { }\n    }\n}\n\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({ passive: false });\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n/** Inline styles to be set as `!important` while dragging. */\nconst dragImportantProperties = new Set([\n    // Needs to be important, because some `mat-table` sets `position: sticky !important`. See #22781.\n    'position',\n]);\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n */\nclass DragRef {\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n    }\n    set disabled(value) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._toggleNativeDragInteractions();\n            this._handles.forEach(handle => toggleNativeDragInteractions(handle, newValue));\n        }\n    }\n    constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._config = _config;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n        /**\n         * CSS `transform` applied to the element when it isn't being dragged. We need a\n         * passive transform in order for the dragged element to retain its new position\n         * after the user has stopped dragging and because we need to know the relative\n         * position in case they start dragging again. This corresponds to `element.style.transform`.\n         */\n        this._passiveTransform = { x: 0, y: 0 };\n        /** CSS `transform` that is applied to the element while it's being dragged. */\n        this._activeTransform = { x: 0, y: 0 };\n        /**\n         * Whether the dragging sequence has been started. Doesn't\n         * necessarily mean that the element has been moved.\n         */\n        this._hasStartedDragging = false;\n        /** Emits when the item is being moved. */\n        this._moveEvents = new Subject();\n        /** Subscription to pointer movement events. */\n        this._pointerMoveSubscription = Subscription.EMPTY;\n        /** Subscription to the event that is dispatched when the user lifts their pointer. */\n        this._pointerUpSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being scrolled. */\n        this._scrollSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being resized. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Cached reference to the boundary element. */\n        this._boundaryElement = null;\n        /** Whether the native dragging interactions have been enabled on the root element. */\n        this._nativeInteractionsEnabled = true;\n        /** Elements that can be used to drag the draggable item. */\n        this._handles = [];\n        /** Registered handles that are currently disabled. */\n        this._disabledHandles = new Set();\n        /** Layout direction of the item. */\n        this._direction = 'ltr';\n        /**\n         * Amount of milliseconds to wait after the user has put their\n         * pointer down before starting to drag the element.\n         */\n        this.dragStartDelay = 0;\n        this._disabled = false;\n        /** Emits as the drag sequence is being prepared. */\n        this.beforeStarted = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new Subject();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new Subject();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new Subject();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new Subject();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new Subject();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = this._moveEvents;\n        /** Handler for the `mousedown`/`touchstart` events. */\n        this._pointerDown = (event) => {\n            this.beforeStarted.next();\n            // Delegate the event based on whether it started from a handle or the element itself.\n            if (this._handles.length) {\n                const targetHandle = this._getTargetHandle(event);\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    this._initializeDragSequence(targetHandle, event);\n                }\n            }\n            else if (!this.disabled) {\n                this._initializeDragSequence(this._rootElement, event);\n            }\n        };\n        /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n        this._pointerMove = (event) => {\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            if (!this._hasStartedDragging) {\n                const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n                const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n                const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n                // Only start dragging after the user has moved more than the minimum distance in either\n                // direction. Note that this is preferable over doing something like `skip(minimumDistance)`\n                // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n                // per pixel of movement (e.g. if the user moves their pointer quickly).\n                if (isOverThreshold) {\n                    const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\n                    const container = this._dropContainer;\n                    if (!isDelayElapsed) {\n                        this._endDragSequence(event);\n                        return;\n                    }\n                    // Prevent other drag sequences from starting while something in the container is still\n                    // being dragged. This can happen while we're waiting for the drop animation to finish\n                    // and can cause errors, because some elements might still be moving around.\n                    if (!container || (!container.isDragging() && !container.isReceiving())) {\n                        // Prevent the default action as soon as the dragging sequence is considered as\n                        // \"started\" since waiting for the next event can allow the device to begin scrolling.\n                        event.preventDefault();\n                        this._hasStartedDragging = true;\n                        this._ngZone.run(() => this._startDragSequence(event));\n                    }\n                }\n                return;\n            }\n            // We prevent the default action down here so that we know that dragging has started. This is\n            // important for touch devices where doing this too early can unnecessarily block scrolling,\n            // if there's a dragging delay.\n            event.preventDefault();\n            const constrainedPointerPosition = this._getConstrainedPointerPosition(pointerPosition);\n            this._hasMoved = true;\n            this._lastKnownPointerPosition = pointerPosition;\n            this._updatePointerDirectionDelta(constrainedPointerPosition);\n            if (this._dropContainer) {\n                this._updateActiveDropContainer(constrainedPointerPosition, pointerPosition);\n            }\n            else {\n                // If there's a position constraint function, we want the element's top/left to be at the\n                // specific position on the page. Use the initial position as a reference if that's the case.\n                const offset = this.constrainPosition ? this._initialClientRect : this._pickupPositionOnPage;\n                const activeTransform = this._activeTransform;\n                activeTransform.x = constrainedPointerPosition.x - offset.x + this._passiveTransform.x;\n                activeTransform.y = constrainedPointerPosition.y - offset.y + this._passiveTransform.y;\n                this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n            }\n            // Since this event gets fired for every pixel while dragging, we only\n            // want to fire it if the consumer opted into it. Also we have to\n            // re-enter the zone because we run all of the events on the outside.\n            if (this._moveEvents.observers.length) {\n                this._ngZone.run(() => {\n                    this._moveEvents.next({\n                        source: this,\n                        pointerPosition: constrainedPointerPosition,\n                        event,\n                        distance: this._getDragDistance(constrainedPointerPosition),\n                        delta: this._pointerDirectionDelta,\n                    });\n                });\n            }\n        };\n        /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n        this._pointerUp = (event) => {\n            this._endDragSequence(event);\n        };\n        /** Handles a native `dragstart` event. */\n        this._nativeDragStart = (event) => {\n            if (this._handles.length) {\n                const targetHandle = this._getTargetHandle(event);\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    event.preventDefault();\n                }\n            }\n            else if (!this.disabled) {\n                // Usually this isn't necessary since the we prevent the default action in `pointerDown`,\n                // but some cases like dragging of links can slip through (see #24403).\n                event.preventDefault();\n            }\n        };\n        this.withRootElement(element).withParent(_config.parentDragRef || null);\n        this._parentPositions = new ParentPositionTracker(_document);\n        _dragDropRegistry.registerDragItem(this);\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._placeholder;\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._rootElement;\n    }\n    /**\n     * Gets the currently-visible element that represents the drag item.\n     * While dragging this is the placeholder, otherwise it's the root element.\n     */\n    getVisibleElement() {\n        return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n    }\n    /** Registers the handles that can be used to drag the element. */\n    withHandles(handles) {\n        this._handles = handles.map(handle => coerceElement(handle));\n        this._handles.forEach(handle => toggleNativeDragInteractions(handle, this.disabled));\n        this._toggleNativeDragInteractions();\n        // Delete any lingering disabled handles that may have been destroyed. Note that we re-create\n        // the set, rather than iterate over it and filter out the destroyed handles, because while\n        // the ES spec allows for sets to be modified while they're being iterated over, some polyfills\n        // use an array internally which may throw an error.\n        const disabledHandles = new Set();\n        this._disabledHandles.forEach(handle => {\n            if (this._handles.indexOf(handle) > -1) {\n                disabledHandles.add(handle);\n            }\n        });\n        this._disabledHandles = disabledHandles;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @param template Template that from which to stamp out the preview.\n     */\n    withPreviewTemplate(template) {\n        this._previewTemplate = template;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @param template Template that from which to stamp out the placeholder.\n     */\n    withPlaceholderTemplate(template) {\n        this._placeholderTemplate = template;\n        return this;\n    }\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     */\n    withRootElement(rootElement) {\n        const element = coerceElement(rootElement);\n        if (element !== this._rootElement) {\n            if (this._rootElement) {\n                this._removeRootElementListeners(this._rootElement);\n            }\n            this._ngZone.runOutsideAngular(() => {\n                element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n                element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n                element.addEventListener('dragstart', this._nativeDragStart, activeEventListenerOptions);\n            });\n            this._initialTransform = undefined;\n            this._rootElement = element;\n        }\n        if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n            this._ownerSVGElement = this._rootElement.ownerSVGElement;\n        }\n        return this;\n    }\n    /**\n     * Element to which the draggable's position will be constrained.\n     */\n    withBoundaryElement(boundaryElement) {\n        this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n        this._resizeSubscription.unsubscribe();\n        if (boundaryElement) {\n            this._resizeSubscription = this._viewportRuler\n                .change(10)\n                .subscribe(() => this._containInsideBoundaryOnResize());\n        }\n        return this;\n    }\n    /** Sets the parent ref that the ref is nested in.  */\n    withParent(parent) {\n        this._parentDragRef = parent;\n        return this;\n    }\n    /** Removes the dragging functionality from the DOM element. */\n    dispose() {\n        this._removeRootElementListeners(this._rootElement);\n        // Do this check before removing from the registry since it'll\n        // stop being considered as dragged once it is removed.\n        if (this.isDragging()) {\n            // Since we move out the element to the end of the body while it's being\n            // dragged, we have to make sure that it's removed if it gets destroyed.\n            this._rootElement?.remove();\n        }\n        this._anchor?.remove();\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._dragDropRegistry.removeDragItem(this);\n        this._removeSubscriptions();\n        this.beforeStarted.complete();\n        this.started.complete();\n        this.released.complete();\n        this.ended.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this._moveEvents.complete();\n        this._handles = [];\n        this._disabledHandles.clear();\n        this._dropContainer = undefined;\n        this._resizeSubscription.unsubscribe();\n        this._parentPositions.clear();\n        this._boundaryElement =\n            this._rootElement =\n                this._ownerSVGElement =\n                    this._placeholderTemplate =\n                        this._previewTemplate =\n                            this._anchor =\n                                this._parentDragRef =\n                                    null;\n    }\n    /** Checks whether the element is currently being dragged. */\n    isDragging() {\n        return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._rootElement.style.transform = this._initialTransform || '';\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform = { x: 0, y: 0 };\n    }\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param handle Handle element that should be disabled.\n     */\n    disableHandle(handle) {\n        if (!this._disabledHandles.has(handle) && this._handles.indexOf(handle) > -1) {\n            this._disabledHandles.add(handle);\n            toggleNativeDragInteractions(handle, true);\n        }\n    }\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param handle Handle element to be enabled.\n     */\n    enableHandle(handle) {\n        if (this._disabledHandles.has(handle)) {\n            this._disabledHandles.delete(handle);\n            toggleNativeDragInteractions(handle, this.disabled);\n        }\n    }\n    /** Sets the layout direction of the draggable item. */\n    withDirection(direction) {\n        this._direction = direction;\n        return this;\n    }\n    /** Sets the container that the item is part of. */\n    _withDropContainer(container) {\n        this._dropContainer = container;\n    }\n    /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n        return { x: position.x, y: position.y };\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform.x = value.x;\n        this._passiveTransform.y = value.y;\n        if (!this._dropContainer) {\n            this._applyRootElementTransform(value.x, value.y);\n        }\n        return this;\n    }\n    /**\n     * Sets the container into which to insert the preview element.\n     * @param value Container into which to insert the preview.\n     */\n    withPreviewContainer(value) {\n        this._previewContainer = value;\n        return this;\n    }\n    /** Updates the item's sort order based on the last-known pointer position. */\n    _sortFromLastPointerPosition() {\n        const position = this._lastKnownPointerPosition;\n        if (position && this._dropContainer) {\n            this._updateActiveDropContainer(this._getConstrainedPointerPosition(position), position);\n        }\n    }\n    /** Unsubscribes from the global subscriptions. */\n    _removeSubscriptions() {\n        this._pointerMoveSubscription.unsubscribe();\n        this._pointerUpSubscription.unsubscribe();\n        this._scrollSubscription.unsubscribe();\n    }\n    /** Destroys the preview element and its ViewRef. */\n    _destroyPreview() {\n        this._preview?.remove();\n        this._previewRef?.destroy();\n        this._preview = this._previewRef = null;\n    }\n    /** Destroys the placeholder element and its ViewRef. */\n    _destroyPlaceholder() {\n        this._placeholder?.remove();\n        this._placeholderRef?.destroy();\n        this._placeholder = this._placeholderRef = null;\n    }\n    /**\n     * Clears subscriptions and stops the dragging sequence.\n     * @param event Browser event object that ended the sequence.\n     */\n    _endDragSequence(event) {\n        // Note that here we use `isDragging` from the service, rather than from `this`.\n        // The difference is that the one from the service reflects whether a dragging sequence\n        // has been initiated, whereas the one on `this` includes whether the user has passed\n        // the minimum dragging threshold.\n        if (!this._dragDropRegistry.isDragging(this)) {\n            return;\n        }\n        this._removeSubscriptions();\n        this._dragDropRegistry.stopDragging(this);\n        this._toggleNativeDragInteractions();\n        if (this._handles) {\n            this._rootElement.style.webkitTapHighlightColor =\n                this._rootElementTapHighlight;\n        }\n        if (!this._hasStartedDragging) {\n            return;\n        }\n        this.released.next({ source: this, event });\n        if (this._dropContainer) {\n            // Stop scrolling immediately, instead of waiting for the animation to finish.\n            this._dropContainer._stopScrolling();\n            this._animatePreviewToPlaceholder().then(() => {\n                this._cleanupDragArtifacts(event);\n                this._cleanupCachedDimensions();\n                this._dragDropRegistry.stopDragging(this);\n            });\n        }\n        else {\n            // Convert the active transform into a passive one. This means that next time\n            // the user starts dragging the item, its position will be calculated relatively\n            // to the new passive transform.\n            this._passiveTransform.x = this._activeTransform.x;\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            this._passiveTransform.y = this._activeTransform.y;\n            this._ngZone.run(() => {\n                this.ended.next({\n                    source: this,\n                    distance: this._getDragDistance(pointerPosition),\n                    dropPoint: pointerPosition,\n                    event,\n                });\n            });\n            this._cleanupCachedDimensions();\n            this._dragDropRegistry.stopDragging(this);\n        }\n    }\n    /** Starts the dragging sequence. */\n    _startDragSequence(event) {\n        if (isTouchEvent(event)) {\n            this._lastTouchEventTime = Date.now();\n        }\n        this._toggleNativeDragInteractions();\n        const dropContainer = this._dropContainer;\n        if (dropContainer) {\n            const element = this._rootElement;\n            const parent = element.parentNode;\n            const placeholder = (this._placeholder = this._createPlaceholderElement());\n            const anchor = (this._anchor = this._anchor || this._document.createComment(''));\n            // Needs to happen before the root element is moved.\n            const shadowRoot = this._getShadowRoot();\n            // Insert an anchor node so that we can restore the element's position in the DOM.\n            parent.insertBefore(anchor, element);\n            // There's no risk of transforms stacking when inside a drop container so\n            // we can keep the initial transform up to date any time dragging starts.\n            this._initialTransform = element.style.transform || '';\n            // Create the preview after the initial transform has\n            // been cached, because it can be affected by the transform.\n            this._preview = this._createPreviewElement();\n            // We move the element out at the end of the body and we make it hidden, because keeping it in\n            // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n            // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n            toggleVisibility(element, false, dragImportantProperties);\n            this._document.body.appendChild(parent.replaceChild(placeholder, element));\n            this._getPreviewInsertionPoint(parent, shadowRoot).appendChild(this._preview);\n            this.started.next({ source: this, event }); // Emit before notifying the container.\n            dropContainer.start();\n            this._initialContainer = dropContainer;\n            this._initialIndex = dropContainer.getItemIndex(this);\n        }\n        else {\n            this.started.next({ source: this, event });\n            this._initialContainer = this._initialIndex = undefined;\n        }\n        // Important to run after we've called `start` on the parent container\n        // so that it has had time to resolve its scrollable parents.\n        this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);\n    }\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @param referenceElement Element that started the drag sequence.\n     * @param event Browser event object that started the sequence.\n     */\n    _initializeDragSequence(referenceElement, event) {\n        // Stop propagation if the item is inside another\n        // draggable so we don't start multiple drag sequences.\n        if (this._parentDragRef) {\n            event.stopPropagation();\n        }\n        const isDragging = this.isDragging();\n        const isTouchSequence = isTouchEvent(event);\n        const isAuxiliaryMouseButton = !isTouchSequence && event.button !== 0;\n        const rootElement = this._rootElement;\n        const target = _getEventTarget(event);\n        const isSyntheticEvent = !isTouchSequence &&\n            this._lastTouchEventTime &&\n            this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n        const isFakeEvent = isTouchSequence\n            ? isFakeTouchstartFromScreenReader(event)\n            : isFakeMousedownFromScreenReader(event);\n        // If the event started from an element with the native HTML drag&drop, it'll interfere\n        // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n        // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n        // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n        // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n        // events from firing on touch devices.\n        if (target && target.draggable && event.type === 'mousedown') {\n            event.preventDefault();\n        }\n        // Abort if the user is already dragging or is using a mouse button other than the primary one.\n        if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent || isFakeEvent) {\n            return;\n        }\n        // If we've got handles, we need to disable the tap highlight on the entire root element,\n        // otherwise iOS will still add it, even though all the drag interactions on the handle\n        // are disabled.\n        if (this._handles.length) {\n            const rootStyles = rootElement.style;\n            this._rootElementTapHighlight = rootStyles.webkitTapHighlightColor || '';\n            rootStyles.webkitTapHighlightColor = 'transparent';\n        }\n        this._hasStartedDragging = this._hasMoved = false;\n        // Avoid multiple subscriptions and memory leaks when multi touch\n        // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n        this._removeSubscriptions();\n        this._initialClientRect = this._rootElement.getBoundingClientRect();\n        this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n        this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n        this._scrollSubscription = this._dragDropRegistry\n            .scrolled(this._getShadowRoot())\n            .subscribe(scrollEvent => this._updateOnScroll(scrollEvent));\n        if (this._boundaryElement) {\n            this._boundaryRect = getMutableClientRect(this._boundaryElement);\n        }\n        // If we have a custom preview we can't know ahead of time how large it'll be so we position\n        // it next to the cursor. The exception is when the consumer has opted into making the preview\n        // the same size as the root element, in which case we do know the size.\n        const previewTemplate = this._previewTemplate;\n        this._pickupPositionInElement =\n            previewTemplate && previewTemplate.template && !previewTemplate.matchSize\n                ? { x: 0, y: 0 }\n                : this._getPointerPositionInElement(this._initialClientRect, referenceElement, event);\n        const pointerPosition = (this._pickupPositionOnPage =\n            this._lastKnownPointerPosition =\n                this._getPointerPositionOnPage(event));\n        this._pointerDirectionDelta = { x: 0, y: 0 };\n        this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\n        this._dragStartTime = Date.now();\n        this._dragDropRegistry.startDragging(this, event);\n    }\n    /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n    _cleanupDragArtifacts(event) {\n        // Restore the element's visibility and insert it at its old position in the DOM.\n        // It's important that we maintain the position, because moving the element around in the DOM\n        // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n        // while moving the existing elements in all other cases.\n        toggleVisibility(this._rootElement, true, dragImportantProperties);\n        this._anchor.parentNode.replaceChild(this._rootElement, this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._initialClientRect =\n            this._boundaryRect =\n                this._previewRect =\n                    this._initialTransform =\n                        undefined;\n        // Re-enter the NgZone since we bound `document` events on the outside.\n        this._ngZone.run(() => {\n            const container = this._dropContainer;\n            const currentIndex = container.getItemIndex(this);\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            const distance = this._getDragDistance(pointerPosition);\n            const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n            this.ended.next({ source: this, distance, dropPoint: pointerPosition, event });\n            this.dropped.next({\n                item: this,\n                currentIndex,\n                previousIndex: this._initialIndex,\n                container: container,\n                previousContainer: this._initialContainer,\n                isPointerOverContainer,\n                distance,\n                dropPoint: pointerPosition,\n                event,\n            });\n            container.drop(this, currentIndex, this._initialIndex, this._initialContainer, isPointerOverContainer, distance, pointerPosition, event);\n            this._dropContainer = this._initialContainer;\n        });\n    }\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     */\n    _updateActiveDropContainer({ x, y }, { x: rawX, y: rawY }) {\n        // Drop container that draggable has been moved into.\n        let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n        // If we couldn't find a new container to move the item into, and the item has left its\n        // initial container, check whether the it's over the initial container. This handles the\n        // case where two containers are connected one way and the user tries to undo dragging an\n        // item into a new container.\n        if (!newContainer &&\n            this._dropContainer !== this._initialContainer &&\n            this._initialContainer._isOverContainer(x, y)) {\n            newContainer = this._initialContainer;\n        }\n        if (newContainer && newContainer !== this._dropContainer) {\n            this._ngZone.run(() => {\n                // Notify the old container that the item has left.\n                this.exited.next({ item: this, container: this._dropContainer });\n                this._dropContainer.exit(this);\n                // Notify the new container that the item has entered.\n                this._dropContainer = newContainer;\n                this._dropContainer.enter(this, x, y, newContainer === this._initialContainer &&\n                    // If we're re-entering the initial container and sorting is disabled,\n                    // put item the into its starting index to begin with.\n                    newContainer.sortingDisabled\n                    ? this._initialIndex\n                    : undefined);\n                this.entered.next({\n                    item: this,\n                    container: newContainer,\n                    currentIndex: newContainer.getItemIndex(this),\n                });\n            });\n        }\n        // Dragging may have been interrupted as a result of the events above.\n        if (this.isDragging()) {\n            this._dropContainer._startScrollingIfNecessary(rawX, rawY);\n            this._dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\n            if (this.constrainPosition) {\n                this._applyPreviewTransform(x, y);\n            }\n            else {\n                this._applyPreviewTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n            }\n        }\n    }\n    /**\n     * Creates the element that will be rendered next to the user's pointer\n     * and will be used as a preview of the element that is being dragged.\n     */\n    _createPreviewElement() {\n        const previewConfig = this._previewTemplate;\n        const previewClass = this.previewClass;\n        const previewTemplate = previewConfig ? previewConfig.template : null;\n        let preview;\n        if (previewTemplate && previewConfig) {\n            // Measure the element before we've inserted the preview\n            // since the insertion could throw off the measurement.\n            const rootRect = previewConfig.matchSize ? this._initialClientRect : null;\n            const viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);\n            viewRef.detectChanges();\n            preview = getRootNode(viewRef, this._document);\n            this._previewRef = viewRef;\n            if (previewConfig.matchSize) {\n                matchElementSize(preview, rootRect);\n            }\n            else {\n                preview.style.transform = getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n            }\n        }\n        else {\n            preview = deepCloneNode(this._rootElement);\n            matchElementSize(preview, this._initialClientRect);\n            if (this._initialTransform) {\n                preview.style.transform = this._initialTransform;\n            }\n        }\n        extendStyles(preview.style, {\n            // It's important that we disable the pointer events on the preview, because\n            // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n            'pointer-events': 'none',\n            // We have to reset the margin, because it can throw off positioning relative to the viewport.\n            'margin': '0',\n            'position': 'fixed',\n            'top': '0',\n            'left': '0',\n            'z-index': `${this._config.zIndex || 1000}`,\n        }, dragImportantProperties);\n        toggleNativeDragInteractions(preview, false);\n        preview.classList.add('cdk-drag-preview');\n        preview.setAttribute('dir', this._direction);\n        if (previewClass) {\n            if (Array.isArray(previewClass)) {\n                previewClass.forEach(className => preview.classList.add(className));\n            }\n            else {\n                preview.classList.add(previewClass);\n            }\n        }\n        return preview;\n    }\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @returns Promise that resolves when the animation completes.\n     */\n    _animatePreviewToPlaceholder() {\n        // If the user hasn't moved yet, the transitionend event won't fire.\n        if (!this._hasMoved) {\n            return Promise.resolve();\n        }\n        const placeholderRect = this._placeholder.getBoundingClientRect();\n        // Apply the class that adds a transition to the preview.\n        this._preview.classList.add('cdk-drag-animating');\n        // Move the preview to the placeholder position.\n        this._applyPreviewTransform(placeholderRect.left, placeholderRect.top);\n        // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n        // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n        // apply its style, we take advantage of the available info to figure out whether we need to\n        // bind the event in the first place.\n        const duration = getTransformTransitionDurationInMs(this._preview);\n        if (duration === 0) {\n            return Promise.resolve();\n        }\n        return this._ngZone.runOutsideAngular(() => {\n            return new Promise(resolve => {\n                const handler = ((event) => {\n                    if (!event ||\n                        (_getEventTarget(event) === this._preview && event.propertyName === 'transform')) {\n                        this._preview?.removeEventListener('transitionend', handler);\n                        resolve();\n                        clearTimeout(timeout);\n                    }\n                });\n                // If a transition is short enough, the browser might not fire the `transitionend` event.\n                // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n                // fire if the transition hasn't completed when it was supposed to.\n                const timeout = setTimeout(handler, duration * 1.5);\n                this._preview.addEventListener('transitionend', handler);\n            });\n        });\n    }\n    /** Creates an element that will be shown instead of the current element while dragging. */\n    _createPlaceholderElement() {\n        const placeholderConfig = this._placeholderTemplate;\n        const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n        let placeholder;\n        if (placeholderTemplate) {\n            this._placeholderRef = placeholderConfig.viewContainer.createEmbeddedView(placeholderTemplate, placeholderConfig.context);\n            this._placeholderRef.detectChanges();\n            placeholder = getRootNode(this._placeholderRef, this._document);\n        }\n        else {\n            placeholder = deepCloneNode(this._rootElement);\n        }\n        // Stop pointer events on the preview so the user can't\n        // interact with it while the preview is animating.\n        placeholder.style.pointerEvents = 'none';\n        placeholder.classList.add('cdk-drag-placeholder');\n        return placeholder;\n    }\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @param referenceElement Element that initiated the dragging.\n     * @param event Event that initiated the dragging.\n     */\n    _getPointerPositionInElement(elementRect, referenceElement, event) {\n        const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n        const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n        const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n        const scrollPosition = this._getViewportScrollPosition();\n        const x = point.pageX - referenceRect.left - scrollPosition.left;\n        const y = point.pageY - referenceRect.top - scrollPosition.top;\n        return {\n            x: referenceRect.left - elementRect.left + x,\n            y: referenceRect.top - elementRect.top + y,\n        };\n    }\n    /** Determines the point of the page that was touched by the user. */\n    _getPointerPositionOnPage(event) {\n        const scrollPosition = this._getViewportScrollPosition();\n        const point = isTouchEvent(event)\n            ? // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n                // Also note that on real devices we're guaranteed for either `touches` or `changedTouches`\n                // to have a value, but Firefox in device emulation mode has a bug where both can be empty\n                // for `touchstart` and `touchend` so we fall back to a dummy object in order to avoid\n                // throwing an error. The value returned here will be incorrect, but since this only\n                // breaks inside a developer tool and the value is only used for secondary information,\n                // we can get away with it. See https://bugzilla.mozilla.org/show_bug.cgi?id=1615824.\n                event.touches[0] || event.changedTouches[0] || { pageX: 0, pageY: 0 }\n            : event;\n        const x = point.pageX - scrollPosition.left;\n        const y = point.pageY - scrollPosition.top;\n        // if dragging SVG element, try to convert from the screen coordinate system to the SVG\n        // coordinate system\n        if (this._ownerSVGElement) {\n            const svgMatrix = this._ownerSVGElement.getScreenCTM();\n            if (svgMatrix) {\n                const svgPoint = this._ownerSVGElement.createSVGPoint();\n                svgPoint.x = x;\n                svgPoint.y = y;\n                return svgPoint.matrixTransform(svgMatrix.inverse());\n            }\n        }\n        return { x, y };\n    }\n    /** Gets the pointer position on the page, accounting for any position constraints. */\n    _getConstrainedPointerPosition(point) {\n        const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n        let { x, y } = this.constrainPosition\n            ? this.constrainPosition(point, this, this._initialClientRect, this._pickupPositionInElement)\n            : point;\n        if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n            y = this._pickupPositionOnPage.y;\n        }\n        else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n            x = this._pickupPositionOnPage.x;\n        }\n        if (this._boundaryRect) {\n            const { x: pickupX, y: pickupY } = this._pickupPositionInElement;\n            const boundaryRect = this._boundaryRect;\n            const { width: previewWidth, height: previewHeight } = this._getPreviewRect();\n            const minY = boundaryRect.top + pickupY;\n            const maxY = boundaryRect.bottom - (previewHeight - pickupY);\n            const minX = boundaryRect.left + pickupX;\n            const maxX = boundaryRect.right - (previewWidth - pickupX);\n            x = clamp$1(x, minX, maxX);\n            y = clamp$1(y, minY, maxY);\n        }\n        return { x, y };\n    }\n    /** Updates the current drag delta, based on the user's current pointer position on the page. */\n    _updatePointerDirectionDelta(pointerPositionOnPage) {\n        const { x, y } = pointerPositionOnPage;\n        const delta = this._pointerDirectionDelta;\n        const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n        // Amount of pixels the user has dragged since the last time the direction changed.\n        const changeX = Math.abs(x - positionSinceLastChange.x);\n        const changeY = Math.abs(y - positionSinceLastChange.y);\n        // Because we handle pointer events on a per-pixel basis, we don't want the delta\n        // to change for every pixel, otherwise anything that depends on it can look erratic.\n        // To make the delta more consistent, we track how much the user has moved since the last\n        // delta change and we only update it after it has reached a certain threshold.\n        if (changeX > this._config.pointerDirectionChangeThreshold) {\n            delta.x = x > positionSinceLastChange.x ? 1 : -1;\n            positionSinceLastChange.x = x;\n        }\n        if (changeY > this._config.pointerDirectionChangeThreshold) {\n            delta.y = y > positionSinceLastChange.y ? 1 : -1;\n            positionSinceLastChange.y = y;\n        }\n        return delta;\n    }\n    /** Toggles the native drag interactions, based on how many handles are registered. */\n    _toggleNativeDragInteractions() {\n        if (!this._rootElement || !this._handles) {\n            return;\n        }\n        const shouldEnable = this._handles.length > 0 || !this.isDragging();\n        if (shouldEnable !== this._nativeInteractionsEnabled) {\n            this._nativeInteractionsEnabled = shouldEnable;\n            toggleNativeDragInteractions(this._rootElement, shouldEnable);\n        }\n    }\n    /** Removes the manually-added event listeners from the root element. */\n    _removeRootElementListeners(element) {\n        element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n        element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n        element.removeEventListener('dragstart', this._nativeDragStart, activeEventListenerOptions);\n    }\n    /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyRootElementTransform(x, y) {\n        const transform = getTransform(x, y);\n        const styles = this._rootElement.style;\n        // Cache the previous transform amount only after the first drag sequence, because\n        // we don't want our own transforms to stack on top of each other.\n        // Should be excluded none because none + translate3d(x, y, x) is invalid css\n        if (this._initialTransform == null) {\n            this._initialTransform =\n                styles.transform && styles.transform != 'none' ? styles.transform : '';\n        }\n        // Preserve the previous `transform` value, if there was one. Note that we apply our own\n        // transform before the user's, because things like rotation can affect which direction\n        // the element will be translated towards.\n        styles.transform = combineTransforms(transform, this._initialTransform);\n    }\n    /**\n     * Applies a `transform` to the preview, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyPreviewTransform(x, y) {\n        // Only apply the initial transform if the preview is a clone of the original element, otherwise\n        // it could be completely different and the transform might not make sense anymore.\n        const initialTransform = this._previewTemplate?.template ? undefined : this._initialTransform;\n        const transform = getTransform(x, y);\n        this._preview.style.transform = combineTransforms(transform, initialTransform);\n    }\n    /**\n     * Gets the distance that the user has dragged during the current drag sequence.\n     * @param currentPosition Current position of the user's pointer.\n     */\n    _getDragDistance(currentPosition) {\n        const pickupPosition = this._pickupPositionOnPage;\n        if (pickupPosition) {\n            return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\n        }\n        return { x: 0, y: 0 };\n    }\n    /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */\n    _cleanupCachedDimensions() {\n        this._boundaryRect = this._previewRect = undefined;\n        this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the element is still inside its boundary after the viewport has been resized.\n     * If not, the position is adjusted so that the element fits again.\n     */\n    _containInsideBoundaryOnResize() {\n        let { x, y } = this._passiveTransform;\n        if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\n            return;\n        }\n        // Note: don't use `_clientRectAtStart` here, because we want the latest position.\n        const elementRect = this._rootElement.getBoundingClientRect();\n        const boundaryRect = this._boundaryElement.getBoundingClientRect();\n        // It's possible that the element got hidden away after dragging (e.g. by switching to a\n        // different tab). Don't do anything in this case so we don't clear the user's position.\n        if ((boundaryRect.width === 0 && boundaryRect.height === 0) ||\n            (elementRect.width === 0 && elementRect.height === 0)) {\n            return;\n        }\n        const leftOverflow = boundaryRect.left - elementRect.left;\n        const rightOverflow = elementRect.right - boundaryRect.right;\n        const topOverflow = boundaryRect.top - elementRect.top;\n        const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n        // If the element has become wider than the boundary, we can't\n        // do much to make it fit so we just anchor it to the left.\n        if (boundaryRect.width > elementRect.width) {\n            if (leftOverflow > 0) {\n                x += leftOverflow;\n            }\n            if (rightOverflow > 0) {\n                x -= rightOverflow;\n            }\n        }\n        else {\n            x = 0;\n        }\n        // If the element has become taller than the boundary, we can't\n        // do much to make it fit so we just anchor it to the top.\n        if (boundaryRect.height > elementRect.height) {\n            if (topOverflow > 0) {\n                y += topOverflow;\n            }\n            if (bottomOverflow > 0) {\n                y -= bottomOverflow;\n            }\n        }\n        else {\n            y = 0;\n        }\n        if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n            this.setFreeDragPosition({ y, x });\n        }\n    }\n    /** Gets the drag start delay, based on the event type. */\n    _getDragStartDelay(event) {\n        const value = this.dragStartDelay;\n        if (typeof value === 'number') {\n            return value;\n        }\n        else if (isTouchEvent(event)) {\n            return value.touch;\n        }\n        return value ? value.mouse : 0;\n    }\n    /** Updates the internal state of the draggable element when scrolling has occurred. */\n    _updateOnScroll(event) {\n        const scrollDifference = this._parentPositions.handleScroll(event);\n        if (scrollDifference) {\n            const target = _getEventTarget(event);\n            // ClientRect dimensions are based on the scroll position of the page and its parent\n            // node so we have to update the cached boundary ClientRect if the user has scrolled.\n            if (this._boundaryRect &&\n                target !== this._boundaryElement &&\n                target.contains(this._boundaryElement)) {\n                adjustClientRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);\n            }\n            this._pickupPositionOnPage.x += scrollDifference.left;\n            this._pickupPositionOnPage.y += scrollDifference.top;\n            // If we're in free drag mode, we have to update the active transform, because\n            // it isn't relative to the viewport like the preview inside a drop list.\n            if (!this._dropContainer) {\n                this._activeTransform.x -= scrollDifference.left;\n                this._activeTransform.y -= scrollDifference.top;\n                this._applyRootElementTransform(this._activeTransform.x, this._activeTransform.y);\n            }\n        }\n    }\n    /** Gets the scroll position of the viewport. */\n    _getViewportScrollPosition() {\n        return (this._parentPositions.positions.get(this._document)?.scrollPosition ||\n            this._parentPositions.getViewportScrollPosition());\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (this._cachedShadowRoot === undefined) {\n            this._cachedShadowRoot = _getShadowRoot(this._rootElement);\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Gets the element into which the drag preview should be inserted. */\n    _getPreviewInsertionPoint(initialParent, shadowRoot) {\n        const previewContainer = this._previewContainer || 'global';\n        if (previewContainer === 'parent') {\n            return initialParent;\n        }\n        if (previewContainer === 'global') {\n            const documentRef = this._document;\n            // We can't use the body if the user is in fullscreen mode,\n            // because the preview will render under the fullscreen element.\n            // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n            return (shadowRoot ||\n                documentRef.fullscreenElement ||\n                documentRef.webkitFullscreenElement ||\n                documentRef.mozFullScreenElement ||\n                documentRef.msFullscreenElement ||\n                documentRef.body);\n        }\n        return coerceElement(previewContainer);\n    }\n    /** Lazily resolves and returns the dimensions of the preview. */\n    _getPreviewRect() {\n        // Cache the preview element rect if we haven't cached it already or if\n        // we cached it too early before the element dimensions were computed.\n        if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n            this._previewRect = this._preview\n                ? this._preview.getBoundingClientRect()\n                : this._initialClientRect;\n        }\n        return this._previewRect;\n    }\n    /** Gets a handle that is the target of an event. */\n    _getTargetHandle(event) {\n        return this._handles.find(handle => {\n            return event.target && (event.target === handle || handle.contains(event.target));\n        });\n    }\n}\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nfunction getTransform(x, y) {\n    // Round the transforms since some browsers will\n    // blur the elements for sub-pixel transforms.\n    return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n/** Clamps a value between a minimum and a maximum. */\nfunction clamp$1(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/** Determines whether an event is a touch event. */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n */\nfunction getRootNode(viewRef, _document) {\n    const rootNodes = viewRef.rootNodes;\n    if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {\n        return rootNodes[0];\n    }\n    const wrapper = _document.createElement('div');\n    rootNodes.forEach(node => wrapper.appendChild(node));\n    return wrapper;\n}\n/**\n * Matches the target element's size to the source's size.\n * @param target Element that needs to be resized.\n * @param sourceRect Dimensions of the source element.\n */\nfunction matchElementSize(target, sourceRect) {\n    target.style.width = `${sourceRect.width}px`;\n    target.style.height = `${sourceRect.height}px`;\n    target.style.transform = getTransform(sourceRect.left, sourceRect.top);\n}\n\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nfunction moveItemInArray(array, fromIndex, toIndex) {\n    const from = clamp(fromIndex, array.length - 1);\n    const to = clamp(toIndex, array.length - 1);\n    if (from === to) {\n        return;\n    }\n    const target = array[from];\n    const delta = to < from ? -1 : 1;\n    for (let i = from; i !== to; i += delta) {\n        array[i] = array[i + delta];\n    }\n    array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const from = clamp(currentIndex, currentArray.length - 1);\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n    }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray[currentIndex]);\n    }\n}\n/** Clamps a number between zero and a maximum. */\nfunction clamp(value, max) {\n    return Math.max(0, Math.min(max, value));\n}\n\n/**\n * Strategy that only supports sorting along a single axis.\n * Items are reordered using CSS transforms which allows for sorting to be animated.\n * @docs-private\n */\nclass SingleAxisSortStrategy {\n    constructor(_element, _dragDropRegistry) {\n        this._element = _element;\n        this._dragDropRegistry = _dragDropRegistry;\n        /** Cache of the dimensions of all the items inside the container. */\n        this._itemPositions = [];\n        /** Direction in which the list is oriented. */\n        this.orientation = 'vertical';\n        /**\n         * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n         * the pointer was moving in when the swap occurred and whether the user's pointer continued to\n         * overlap with the swapped item after the swapping occurred.\n         */\n        this._previousSwap = {\n            drag: null,\n            delta: 0,\n            overlaps: false,\n        };\n    }\n    /**\n     * To be called when the drag sequence starts.\n     * @param items Items that are currently in the list.\n     */\n    start(items) {\n        this.withItems(items);\n    }\n    /**\n     * To be called when an item is being sorted.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    sort(item, pointerX, pointerY, pointerDelta) {\n        const siblings = this._itemPositions;\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n        if (newIndex === -1 && siblings.length > 0) {\n            return null;\n        }\n        const isHorizontal = this.orientation === 'horizontal';\n        const currentIndex = siblings.findIndex(currentItem => currentItem.drag === item);\n        const siblingAtNewPosition = siblings[newIndex];\n        const currentPosition = siblings[currentIndex].clientRect;\n        const newPosition = siblingAtNewPosition.clientRect;\n        const delta = currentIndex > newIndex ? 1 : -1;\n        // How many pixels the item's placeholder should be offset.\n        const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n        // How many pixels all the other items should be offset.\n        const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n        // Save the previous order of the items before moving the item to its new index.\n        // We use this to check whether an item has been moved as a result of the sorting.\n        const oldOrder = siblings.slice();\n        // Shuffle the array in place.\n        moveItemInArray(siblings, currentIndex, newIndex);\n        siblings.forEach((sibling, index) => {\n            // Don't do anything if the position hasn't changed.\n            if (oldOrder[index] === sibling) {\n                return;\n            }\n            const isDraggedItem = sibling.drag === item;\n            const offset = isDraggedItem ? itemOffset : siblingOffset;\n            const elementToOffset = isDraggedItem\n                ? item.getPlaceholderElement()\n                : sibling.drag.getRootElement();\n            // Update the offset to reflect the new position.\n            sibling.offset += offset;\n            // Since we're moving the items with a `transform`, we need to adjust their cached\n            // client rects to reflect their new position, as well as swap their positions in the cache.\n            // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n            // elements may be mid-animation which will give us a wrong result.\n            if (isHorizontal) {\n                // Round the transforms since some browsers will\n                // blur the elements, for sub-pixel transforms.\n                elementToOffset.style.transform = combineTransforms(`translate3d(${Math.round(sibling.offset)}px, 0, 0)`, sibling.initialTransform);\n                adjustClientRect(sibling.clientRect, 0, offset);\n            }\n            else {\n                elementToOffset.style.transform = combineTransforms(`translate3d(0, ${Math.round(sibling.offset)}px, 0)`, sibling.initialTransform);\n                adjustClientRect(sibling.clientRect, offset, 0);\n            }\n        });\n        // Note that it's important that we do this after the client rects have been adjusted.\n        this._previousSwap.overlaps = isInsideClientRect(newPosition, pointerX, pointerY);\n        this._previousSwap.drag = siblingAtNewPosition.drag;\n        this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n        return { previousIndex: currentIndex, currentIndex: newIndex };\n    }\n    /**\n     * Called when an item is being moved into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        const newIndex = index == null || index < 0\n            ? // We use the coordinates of where the item entered the drop\n                // zone to figure out at which index it should be inserted.\n                this._getItemIndexFromPointerPosition(item, pointerX, pointerY)\n            : index;\n        const activeDraggables = this._activeDraggables;\n        const currentIndex = activeDraggables.indexOf(item);\n        const placeholder = item.getPlaceholderElement();\n        let newPositionReference = activeDraggables[newIndex];\n        // If the item at the new position is the same as the item that is being dragged,\n        // it means that we're trying to restore the item to its initial position. In this\n        // case we should use the next item from the list as the reference.\n        if (newPositionReference === item) {\n            newPositionReference = activeDraggables[newIndex + 1];\n        }\n        // If we didn't find a new position reference, it means that either the item didn't start off\n        // in this container, or that the item requested to be inserted at the end of the list.\n        if (!newPositionReference &&\n            (newIndex == null || newIndex === -1 || newIndex < activeDraggables.length - 1) &&\n            this._shouldEnterAsFirstChild(pointerX, pointerY)) {\n            newPositionReference = activeDraggables[0];\n        }\n        // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n        // into another container and back again), we have to ensure that it isn't duplicated.\n        if (currentIndex > -1) {\n            activeDraggables.splice(currentIndex, 1);\n        }\n        // Don't use items that are being dragged as a reference, because\n        // their element has been moved down to the bottom of the body.\n        if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n            const element = newPositionReference.getRootElement();\n            element.parentElement.insertBefore(placeholder, element);\n            activeDraggables.splice(newIndex, 0, item);\n        }\n        else {\n            coerceElement(this._element).appendChild(placeholder);\n            activeDraggables.push(item);\n        }\n        // The transform needs to be cleared so it doesn't throw off the measurements.\n        placeholder.style.transform = '';\n        // Note that usually `start` is called together with `enter` when an item goes into a new\n        // container. This will cache item positions, but we need to refresh them since the amount\n        // of items has changed.\n        this._cacheItemPositions();\n    }\n    /** Sets the items that are currently part of the list. */\n    withItems(items) {\n        this._activeDraggables = items.slice();\n        this._cacheItemPositions();\n    }\n    /** Assigns a sort predicate to the strategy. */\n    withSortPredicate(predicate) {\n        this._sortPredicate = predicate;\n    }\n    /** Resets the strategy to its initial state before dragging was started. */\n    reset() {\n        // TODO(crisbeto): may have to wait for the animations to finish.\n        this._activeDraggables.forEach(item => {\n            const rootElement = item.getRootElement();\n            if (rootElement) {\n                const initialTransform = this._itemPositions.find(p => p.drag === item)?.initialTransform;\n                rootElement.style.transform = initialTransform || '';\n            }\n        });\n        this._itemPositions = [];\n        this._activeDraggables = [];\n        this._previousSwap.drag = null;\n        this._previousSwap.delta = 0;\n        this._previousSwap.overlaps = false;\n    }\n    /**\n     * Gets a snapshot of items currently in the list.\n     * Can include items that we dragged in from another list.\n     */\n    getActiveItemsSnapshot() {\n        return this._activeDraggables;\n    }\n    /** Gets the index of a specific item. */\n    getItemIndex(item) {\n        // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n        // The rest of the logic still stands no matter what orientation we're in, however\n        // we need to invert the array when determining the index.\n        const items = this.orientation === 'horizontal' && this.direction === 'rtl'\n            ? this._itemPositions.slice().reverse()\n            : this._itemPositions;\n        return items.findIndex(currentItem => currentItem.drag === item);\n    }\n    /** Used to notify the strategy that the scroll position has changed. */\n    updateOnScroll(topDifference, leftDifference) {\n        // Since we know the amount that the user has scrolled we can shift all of the\n        // client rectangles ourselves. This is cheaper than re-measuring everything and\n        // we can avoid inconsistent behavior where we might be measuring the element before\n        // its position has changed.\n        this._itemPositions.forEach(({ clientRect }) => {\n            adjustClientRect(clientRect, topDifference, leftDifference);\n        });\n        // We need two loops for this, because we want all of the cached\n        // positions to be up-to-date before we re-sort the item.\n        this._itemPositions.forEach(({ drag }) => {\n            if (this._dragDropRegistry.isDragging(drag)) {\n                // We need to re-sort the item manually, because the pointer move\n                // events won't be dispatched while the user is scrolling.\n                drag._sortFromLastPointerPosition();\n            }\n        });\n    }\n    /** Refreshes the position cache of the items and sibling containers. */\n    _cacheItemPositions() {\n        const isHorizontal = this.orientation === 'horizontal';\n        this._itemPositions = this._activeDraggables\n            .map(drag => {\n            const elementToMeasure = drag.getVisibleElement();\n            return {\n                drag,\n                offset: 0,\n                initialTransform: elementToMeasure.style.transform || '',\n                clientRect: getMutableClientRect(elementToMeasure),\n            };\n        })\n            .sort((a, b) => {\n            return isHorizontal\n                ? a.clientRect.left - b.clientRect.left\n                : a.clientRect.top - b.clientRect.top;\n        });\n    }\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @param currentPosition Current position of the item.\n     * @param newPosition Position of the item where the current item should be moved.\n     * @param delta Direction in which the user is moving.\n     */\n    _getItemOffsetPx(currentPosition, newPosition, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        let itemOffset = isHorizontal\n            ? newPosition.left - currentPosition.left\n            : newPosition.top - currentPosition.top;\n        // Account for differences in the item width/height.\n        if (delta === -1) {\n            itemOffset += isHorizontal\n                ? newPosition.width - currentPosition.width\n                : newPosition.height - currentPosition.height;\n        }\n        return itemOffset;\n    }\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @param currentIndex Index of the item currently being dragged.\n     * @param siblings All of the items in the list.\n     * @param delta Direction in which the user is moving.\n     */\n    _getSiblingOffsetPx(currentIndex, siblings, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        const currentPosition = siblings[currentIndex].clientRect;\n        const immediateSibling = siblings[currentIndex + delta * -1];\n        let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n        if (immediateSibling) {\n            const start = isHorizontal ? 'left' : 'top';\n            const end = isHorizontal ? 'right' : 'bottom';\n            // Get the spacing between the start of the current item and the end of the one immediately\n            // after it in the direction in which the user is dragging, or vice versa. We add it to the\n            // offset in order to push the element to where it will be when it's inline and is influenced\n            // by the `margin` of its siblings.\n            if (delta === -1) {\n                siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n            }\n            else {\n                siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n            }\n        }\n        return siblingOffset;\n    }\n    /**\n     * Checks if pointer is entering in the first position\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     */\n    _shouldEnterAsFirstChild(pointerX, pointerY) {\n        if (!this._activeDraggables.length) {\n            return false;\n        }\n        const itemPositions = this._itemPositions;\n        const isHorizontal = this.orientation === 'horizontal';\n        // `itemPositions` are sorted by position while `activeDraggables` are sorted by child index\n        // check if container is using some sort of \"reverse\" ordering (eg: flex-direction: row-reverse)\n        const reversed = itemPositions[0].drag !== this._activeDraggables[0];\n        if (reversed) {\n            const lastItemRect = itemPositions[itemPositions.length - 1].clientRect;\n            return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;\n        }\n        else {\n            const firstItemRect = itemPositions[0].clientRect;\n            return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;\n        }\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @param item Item that is being sorted.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     * @param delta Direction in which the user is moving their pointer.\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        const index = this._itemPositions.findIndex(({ drag, clientRect }) => {\n            // Skip the item itself.\n            if (drag === item) {\n                return false;\n            }\n            if (delta) {\n                const direction = isHorizontal ? delta.x : delta.y;\n                // If the user is still hovering over the same item as last time, their cursor hasn't left\n                // the item after we made the swap, and they didn't change the direction in which they're\n                // dragging, we don't consider it a direction swap.\n                if (drag === this._previousSwap.drag &&\n                    this._previousSwap.overlaps &&\n                    direction === this._previousSwap.delta) {\n                    return false;\n                }\n            }\n            return isHorizontal\n                ? // Round these down since most browsers report client rects with\n                    // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n                    pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right)\n                : pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);\n        });\n        return index === -1 || !this._sortPredicate(index, item) ? -1 : index;\n    }\n}\n\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n */\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n */\nclass DropListRef {\n    constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n        this._dragDropRegistry = _dragDropRegistry;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        /** Whether starting a dragging sequence from this container is disabled. */\n        this.disabled = false;\n        /** Whether sorting items within the list is disabled. */\n        this.sortingDisabled = false;\n        /**\n         * Whether auto-scrolling the view when the user\n         * moves their pointer close to the edges is disabled.\n         */\n        this.autoScrollDisabled = false;\n        /** Number of pixels to scroll for each frame when auto-scrolling an element. */\n        this.autoScrollStep = 2;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Function that is used to determine whether an item can be sorted into a particular index. */\n        this.sortPredicate = () => true;\n        /** Emits right before dragging has started. */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new Subject();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new Subject();\n        /** Emits when a dragging sequence is started in a list connected to the current one. */\n        this.receivingStarted = new Subject();\n        /** Emits when a dragging sequence is stopped from a list connected to the current one. */\n        this.receivingStopped = new Subject();\n        /** Whether an item in the list is being dragged. */\n        this._isDragging = false;\n        /** Draggable items in the container. */\n        this._draggables = [];\n        /** Drop lists that are connected to the current one. */\n        this._siblings = [];\n        /** Connected siblings that currently have a dragged item. */\n        this._activeSiblings = new Set();\n        /** Subscription to the window being scrolled. */\n        this._viewportScrollSubscription = Subscription.EMPTY;\n        /** Vertical direction in which the list is currently scrolling. */\n        this._verticalScrollDirection = 0 /* AutoScrollVerticalDirection.NONE */;\n        /** Horizontal direction in which the list is currently scrolling. */\n        this._horizontalScrollDirection = 0 /* AutoScrollHorizontalDirection.NONE */;\n        /** Used to signal to the current auto-scroll sequence when to stop. */\n        this._stopScrollTimers = new Subject();\n        /** Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly. */\n        this._cachedShadowRoot = null;\n        /** Starts the interval that'll auto-scroll the element. */\n        this._startScrollInterval = () => {\n            this._stopScrolling();\n            interval(0, animationFrameScheduler)\n                .pipe(takeUntil(this._stopScrollTimers))\n                .subscribe(() => {\n                const node = this._scrollNode;\n                const scrollStep = this.autoScrollStep;\n                if (this._verticalScrollDirection === 1 /* AutoScrollVerticalDirection.UP */) {\n                    node.scrollBy(0, -scrollStep);\n                }\n                else if (this._verticalScrollDirection === 2 /* AutoScrollVerticalDirection.DOWN */) {\n                    node.scrollBy(0, scrollStep);\n                }\n                if (this._horizontalScrollDirection === 1 /* AutoScrollHorizontalDirection.LEFT */) {\n                    node.scrollBy(-scrollStep, 0);\n                }\n                else if (this._horizontalScrollDirection === 2 /* AutoScrollHorizontalDirection.RIGHT */) {\n                    node.scrollBy(scrollStep, 0);\n                }\n            });\n        };\n        this.element = coerceElement(element);\n        this._document = _document;\n        this.withScrollableParents([this.element]);\n        _dragDropRegistry.registerDropContainer(this);\n        this._parentPositions = new ParentPositionTracker(_document);\n        this._sortStrategy = new SingleAxisSortStrategy(this.element, _dragDropRegistry);\n        this._sortStrategy.withSortPredicate((index, item) => this.sortPredicate(index, item, this));\n    }\n    /** Removes the drop list functionality from the DOM element. */\n    dispose() {\n        this._stopScrolling();\n        this._stopScrollTimers.complete();\n        this._viewportScrollSubscription.unsubscribe();\n        this.beforeStarted.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this.sorted.complete();\n        this.receivingStarted.complete();\n        this.receivingStopped.complete();\n        this._activeSiblings.clear();\n        this._scrollNode = null;\n        this._parentPositions.clear();\n        this._dragDropRegistry.removeDropContainer(this);\n    }\n    /** Whether an item from this list is currently being dragged. */\n    isDragging() {\n        return this._isDragging;\n    }\n    /** Starts dragging an item. */\n    start() {\n        this._draggingStarted();\n        this._notifyReceivingSiblings();\n    }\n    /**\n     * Attempts to move an item into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        this._draggingStarted();\n        // If sorting is disabled, we want the item to return to its starting\n        // position if the user is returning it to its initial container.\n        if (index == null && this.sortingDisabled) {\n            index = this._draggables.indexOf(item);\n        }\n        this._sortStrategy.enter(item, pointerX, pointerY, index);\n        // Note that this usually happens inside `_draggingStarted` as well, but the dimensions\n        // can change when the sort strategy moves the item around inside `enter`.\n        this._cacheParentPositions();\n        // Notify siblings at the end so that the item has been inserted into the `activeDraggables`.\n        this._notifyReceivingSiblings();\n        this.entered.next({ item, container: this, currentIndex: this.getItemIndex(item) });\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param item Item that was dragged out.\n     */\n    exit(item) {\n        this._reset();\n        this.exited.next({ item, container: this });\n    }\n    /**\n     * Drops an item into this container.\n     * @param item Item being dropped into the container.\n     * @param currentIndex Index at which the item should be inserted.\n     * @param previousIndex Index of the item when dragging started.\n     * @param previousContainer Container from which the item got dragged in.\n     * @param isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @param distance Distance the user has dragged since the start of the dragging sequence.\n     * @param event Event that triggered the dropping sequence.\n     *\n     * @breaking-change 15.0.0 `previousIndex` and `event` parameters to become required.\n     */\n    drop(item, currentIndex, previousIndex, previousContainer, isPointerOverContainer, distance, dropPoint, event = {}) {\n        this._reset();\n        this.dropped.next({\n            item,\n            currentIndex,\n            previousIndex,\n            container: this,\n            previousContainer,\n            isPointerOverContainer,\n            distance,\n            dropPoint,\n            event,\n        });\n    }\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @param items Items that are a part of this list.\n     */\n    withItems(items) {\n        const previousItems = this._draggables;\n        this._draggables = items;\n        items.forEach(item => item._withDropContainer(this));\n        if (this.isDragging()) {\n            const draggedItems = previousItems.filter(item => item.isDragging());\n            // If all of the items being dragged were removed\n            // from the list, abort the current drag sequence.\n            if (draggedItems.every(item => items.indexOf(item) === -1)) {\n                this._reset();\n            }\n            else {\n                this._sortStrategy.withItems(this._draggables);\n            }\n        }\n        return this;\n    }\n    /** Sets the layout direction of the drop list. */\n    withDirection(direction) {\n        this._sortStrategy.direction = direction;\n        return this;\n    }\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @param connectedTo Other containers that the current containers should be connected to.\n     */\n    connectedTo(connectedTo) {\n        this._siblings = connectedTo.slice();\n        return this;\n    }\n    /**\n     * Sets the orientation of the container.\n     * @param orientation New orientation for the container.\n     */\n    withOrientation(orientation) {\n        // TODO(crisbeto): eventually we should be constructing the new sort strategy here based on\n        // the new orientation. For now we can assume that it'll always be `SingleAxisSortStrategy`.\n        this._sortStrategy.orientation = orientation;\n        return this;\n    }\n    /**\n     * Sets which parent elements are can be scrolled while the user is dragging.\n     * @param elements Elements that can be scrolled.\n     */\n    withScrollableParents(elements) {\n        const element = coerceElement(this.element);\n        // We always allow the current element to be scrollable\n        // so we need to ensure that it's in the array.\n        this._scrollableElements =\n            elements.indexOf(element) === -1 ? [element, ...elements] : elements.slice();\n        return this;\n    }\n    /** Gets the scrollable parents that are registered with this drop container. */\n    getScrollableParents() {\n        return this._scrollableElements;\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @param item Item whose index should be determined.\n     */\n    getItemIndex(item) {\n        return this._isDragging\n            ? this._sortStrategy.getItemIndex(item)\n            : this._draggables.indexOf(item);\n    }\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     */\n    isReceiving() {\n        return this._activeSiblings.size > 0;\n    }\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    _sortItem(item, pointerX, pointerY, pointerDelta) {\n        // Don't sort the item if sorting is disabled or it's out of range.\n        if (this.sortingDisabled ||\n            !this._clientRect ||\n            !isPointerNearClientRect(this._clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n            return;\n        }\n        const result = this._sortStrategy.sort(item, pointerX, pointerY, pointerDelta);\n        if (result) {\n            this.sorted.next({\n                previousIndex: result.previousIndex,\n                currentIndex: result.currentIndex,\n                container: this,\n                item,\n            });\n        }\n    }\n    /**\n     * Checks whether the user's pointer is close to the edges of either the\n     * viewport or the drop list and starts the auto-scroll sequence.\n     * @param pointerX User's pointer position along the x axis.\n     * @param pointerY User's pointer position along the y axis.\n     */\n    _startScrollingIfNecessary(pointerX, pointerY) {\n        if (this.autoScrollDisabled) {\n            return;\n        }\n        let scrollNode;\n        let verticalScrollDirection = 0 /* AutoScrollVerticalDirection.NONE */;\n        let horizontalScrollDirection = 0 /* AutoScrollHorizontalDirection.NONE */;\n        // Check whether we should start scrolling any of the parent containers.\n        this._parentPositions.positions.forEach((position, element) => {\n            // We have special handling for the `document` below. Also this would be\n            // nicer with a  for...of loop, but it requires changing a compiler flag.\n            if (element === this._document || !position.clientRect || scrollNode) {\n                return;\n            }\n            if (isPointerNearClientRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n                [verticalScrollDirection, horizontalScrollDirection] = getElementScrollDirections(element, position.clientRect, pointerX, pointerY);\n                if (verticalScrollDirection || horizontalScrollDirection) {\n                    scrollNode = element;\n                }\n            }\n        });\n        // Otherwise check if we can start scrolling the viewport.\n        if (!verticalScrollDirection && !horizontalScrollDirection) {\n            const { width, height } = this._viewportRuler.getViewportSize();\n            const clientRect = {\n                width,\n                height,\n                top: 0,\n                right: width,\n                bottom: height,\n                left: 0,\n            };\n            verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);\n            horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);\n            scrollNode = window;\n        }\n        if (scrollNode &&\n            (verticalScrollDirection !== this._verticalScrollDirection ||\n                horizontalScrollDirection !== this._horizontalScrollDirection ||\n                scrollNode !== this._scrollNode)) {\n            this._verticalScrollDirection = verticalScrollDirection;\n            this._horizontalScrollDirection = horizontalScrollDirection;\n            this._scrollNode = scrollNode;\n            if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n                this._ngZone.runOutsideAngular(this._startScrollInterval);\n            }\n            else {\n                this._stopScrolling();\n            }\n        }\n    }\n    /** Stops any currently-running auto-scroll sequences. */\n    _stopScrolling() {\n        this._stopScrollTimers.next();\n    }\n    /** Starts the dragging sequence within the list. */\n    _draggingStarted() {\n        const styles = coerceElement(this.element).style;\n        this.beforeStarted.next();\n        this._isDragging = true;\n        // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n        // scrolling. The browser seems to round the value based on the snapping points which means\n        // that we can't increment/decrement the scroll position.\n        this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || '';\n        styles.scrollSnapType = styles.msScrollSnapType = 'none';\n        this._sortStrategy.start(this._draggables);\n        this._cacheParentPositions();\n        this._viewportScrollSubscription.unsubscribe();\n        this._listenToScrollEvents();\n    }\n    /** Caches the positions of the configured scrollable parents. */\n    _cacheParentPositions() {\n        const element = coerceElement(this.element);\n        this._parentPositions.cache(this._scrollableElements);\n        // The list element is always in the `scrollableElements`\n        // so we can take advantage of the cached `ClientRect`.\n        this._clientRect = this._parentPositions.positions.get(element).clientRect;\n    }\n    /** Resets the container to its initial state. */\n    _reset() {\n        this._isDragging = false;\n        const styles = coerceElement(this.element).style;\n        styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;\n        this._siblings.forEach(sibling => sibling._stopReceiving(this));\n        this._sortStrategy.reset();\n        this._stopScrolling();\n        this._viewportScrollSubscription.unsubscribe();\n        this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param x Pointer position along the X axis.\n     * @param y Pointer position along the Y axis.\n     */\n    _isOverContainer(x, y) {\n        return this._clientRect != null && isInsideClientRect(this._clientRect, x, y);\n    }\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param item Drag item that is being moved.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _getSiblingContainerFromPosition(item, x, y) {\n        return this._siblings.find(sibling => sibling._canReceive(item, x, y));\n    }\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param item Item that is being dragged into the list.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _canReceive(item, x, y) {\n        if (!this._clientRect ||\n            !isInsideClientRect(this._clientRect, x, y) ||\n            !this.enterPredicate(item, this)) {\n            return false;\n        }\n        const elementFromPoint = this._getShadowRoot().elementFromPoint(x, y);\n        // If there's no element at the pointer position, then\n        // the client rect is probably scrolled out of the view.\n        if (!elementFromPoint) {\n            return false;\n        }\n        const nativeElement = coerceElement(this.element);\n        // The `ClientRect`, that we're using to find the container over which the user is\n        // hovering, doesn't give us any information on whether the element has been scrolled\n        // out of the view or whether it's overlapping with other containers. This means that\n        // we could end up transferring the item into a container that's invisible or is positioned\n        // below another one. We use the result from `elementFromPoint` to get the top-most element\n        // at the pointer position and to find whether it's one of the intersecting drop containers.\n        return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\n    }\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param sibling Sibling in which dragging has started.\n     */\n    _startReceiving(sibling, items) {\n        const activeSiblings = this._activeSiblings;\n        if (!activeSiblings.has(sibling) &&\n            items.every(item => {\n                // Note that we have to add an exception to the `enterPredicate` for items that started off\n                // in this drop list. The drag ref has logic that allows an item to return to its initial\n                // container, if it has left the initial container and none of the connected containers\n                // allow it to enter. See `DragRef._updateActiveDropContainer` for more context.\n                return this.enterPredicate(item, this) || this._draggables.indexOf(item) > -1;\n            })) {\n            activeSiblings.add(sibling);\n            this._cacheParentPositions();\n            this._listenToScrollEvents();\n            this.receivingStarted.next({\n                initiator: sibling,\n                receiver: this,\n                items,\n            });\n        }\n    }\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param sibling Sibling whose dragging has stopped.\n     */\n    _stopReceiving(sibling) {\n        this._activeSiblings.delete(sibling);\n        this._viewportScrollSubscription.unsubscribe();\n        this.receivingStopped.next({ initiator: sibling, receiver: this });\n    }\n    /**\n     * Starts listening to scroll events on the viewport.\n     * Used for updating the internal state of the list.\n     */\n    _listenToScrollEvents() {\n        this._viewportScrollSubscription = this._dragDropRegistry\n            .scrolled(this._getShadowRoot())\n            .subscribe(event => {\n            if (this.isDragging()) {\n                const scrollDifference = this._parentPositions.handleScroll(event);\n                if (scrollDifference) {\n                    this._sortStrategy.updateOnScroll(scrollDifference.top, scrollDifference.left);\n                }\n            }\n            else if (this.isReceiving()) {\n                this._cacheParentPositions();\n            }\n        });\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (!this._cachedShadowRoot) {\n            const shadowRoot = _getShadowRoot(coerceElement(this.element));\n            this._cachedShadowRoot = (shadowRoot || this._document);\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Notifies any siblings that may potentially receive the item. */\n    _notifyReceivingSiblings() {\n        const draggedItems = this._sortStrategy\n            .getActiveItemsSnapshot()\n            .filter(item => item.isDragging());\n        this._siblings.forEach(sibling => sibling._startReceiving(this, draggedItems));\n    }\n}\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n    const { top, bottom, height } = clientRect;\n    const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n        return 1 /* AutoScrollVerticalDirection.UP */;\n    }\n    else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n        return 2 /* AutoScrollVerticalDirection.DOWN */;\n    }\n    return 0 /* AutoScrollVerticalDirection.NONE */;\n}\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerX Position of the user's pointer along the x axis.\n */\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n    const { left, right, width } = clientRect;\n    const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n        return 1 /* AutoScrollHorizontalDirection.LEFT */;\n    }\n    else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n        return 2 /* AutoScrollHorizontalDirection.RIGHT */;\n    }\n    return 0 /* AutoScrollHorizontalDirection.NONE */;\n}\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param element Element for which we should calculate the scroll direction.\n * @param clientRect Bounding client rectangle of the element.\n * @param pointerX Position of the user's pointer along the x axis.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getElementScrollDirections(element, clientRect, pointerX, pointerY) {\n    const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n    const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n    let verticalScrollDirection = 0 /* AutoScrollVerticalDirection.NONE */;\n    let horizontalScrollDirection = 0 /* AutoScrollHorizontalDirection.NONE */;\n    // Note that we here we do some extra checks for whether the element is actually scrollable in\n    // a certain direction and we only assign the scroll direction if it is. We do this so that we\n    // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n    // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n    if (computedVertical) {\n        const scrollTop = element.scrollTop;\n        if (computedVertical === 1 /* AutoScrollVerticalDirection.UP */) {\n            if (scrollTop > 0) {\n                verticalScrollDirection = 1 /* AutoScrollVerticalDirection.UP */;\n            }\n        }\n        else if (element.scrollHeight - scrollTop > element.clientHeight) {\n            verticalScrollDirection = 2 /* AutoScrollVerticalDirection.DOWN */;\n        }\n    }\n    if (computedHorizontal) {\n        const scrollLeft = element.scrollLeft;\n        if (computedHorizontal === 1 /* AutoScrollHorizontalDirection.LEFT */) {\n            if (scrollLeft > 0) {\n                horizontalScrollDirection = 1 /* AutoScrollHorizontalDirection.LEFT */;\n            }\n        }\n        else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n            horizontalScrollDirection = 2 /* AutoScrollHorizontalDirection.RIGHT */;\n        }\n    }\n    return [verticalScrollDirection, horizontalScrollDirection];\n}\n\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n    passive: false,\n    capture: true,\n});\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\nclass DragDropRegistry {\n    constructor(_ngZone, _document) {\n        this._ngZone = _ngZone;\n        /** Registered drop container instances. */\n        this._dropInstances = new Set();\n        /** Registered drag item instances. */\n        this._dragInstances = new Set();\n        /** Drag item instances that are currently being dragged. */\n        this._activeDragInstances = [];\n        /** Keeps track of the event listeners that we've bound to the `document`. */\n        this._globalListeners = new Map();\n        /**\n         * Predicate function to check if an item is being dragged.  Moved out into a property,\n         * because it'll be called a lot and we don't want to create a new function every time.\n         */\n        this._draggingPredicate = (item) => item.isDragging();\n        /**\n         * Emits the `touchmove` or `mousemove` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerMove = new Subject();\n        /**\n         * Emits the `touchend` or `mouseup` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerUp = new Subject();\n        /**\n         * Emits when the viewport has been scrolled while the user is dragging an item.\n         * @deprecated To be turned into a private member. Use the `scrolled` method instead.\n         * @breaking-change 13.0.0\n         */\n        this.scroll = new Subject();\n        /**\n         * Event listener that will prevent the default browser action while the user is dragging.\n         * @param event Event whose default action should be prevented.\n         */\n        this._preventDefaultWhileDragging = (event) => {\n            if (this._activeDragInstances.length > 0) {\n                event.preventDefault();\n            }\n        };\n        /** Event listener for `touchmove` that is bound even if no dragging is happening. */\n        this._persistentTouchmoveListener = (event) => {\n            if (this._activeDragInstances.length > 0) {\n                // Note that we only want to prevent the default action after dragging has actually started.\n                // Usually this is the same time at which the item is added to the `_activeDragInstances`,\n                // but it could be pushed back if the user has set up a drag delay or threshold.\n                if (this._activeDragInstances.some(this._draggingPredicate)) {\n                    event.preventDefault();\n                }\n                this.pointerMove.next(event);\n            }\n        };\n        this._document = _document;\n    }\n    /** Adds a drop container to the registry. */\n    registerDropContainer(drop) {\n        if (!this._dropInstances.has(drop)) {\n            this._dropInstances.add(drop);\n        }\n    }\n    /** Adds a drag item instance to the registry. */\n    registerDragItem(drag) {\n        this._dragInstances.add(drag);\n        // The `touchmove` event gets bound once, ahead of time, because WebKit\n        // won't preventDefault on a dynamically-added `touchmove` listener.\n        // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n        if (this._dragInstances.size === 1) {\n            this._ngZone.runOutsideAngular(() => {\n                // The event handler has to be explicitly active,\n                // because newer browsers make it passive by default.\n                this._document.addEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n            });\n        }\n    }\n    /** Removes a drop container from the registry. */\n    removeDropContainer(drop) {\n        this._dropInstances.delete(drop);\n    }\n    /** Removes a drag item instance from the registry. */\n    removeDragItem(drag) {\n        this._dragInstances.delete(drag);\n        this.stopDragging(drag);\n        if (this._dragInstances.size === 0) {\n            this._document.removeEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n        }\n    }\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param drag Drag instance which is being dragged.\n     * @param event Event that initiated the dragging.\n     */\n    startDragging(drag, event) {\n        // Do not process the same drag twice to avoid memory leaks and redundant listeners\n        if (this._activeDragInstances.indexOf(drag) > -1) {\n            return;\n        }\n        this._activeDragInstances.push(drag);\n        if (this._activeDragInstances.length === 1) {\n            const isTouchEvent = event.type.startsWith('touch');\n            // We explicitly bind __active__ listeners here, because newer browsers will default to\n            // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n            // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n            this._globalListeners\n                .set(isTouchEvent ? 'touchend' : 'mouseup', {\n                handler: (e) => this.pointerUp.next(e),\n                options: true,\n            })\n                .set('scroll', {\n                handler: (e) => this.scroll.next(e),\n                // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n                // the document. See https://github.com/angular/components/issues/17144.\n                options: true,\n            })\n                // Preventing the default action on `mousemove` isn't enough to disable text selection\n                // on Safari so we need to prevent the selection event as well. Alternatively this can\n                // be done by setting `user-select: none` on the `body`, however it has causes a style\n                // recalculation which can be expensive on pages with a lot of elements.\n                .set('selectstart', {\n                handler: this._preventDefaultWhileDragging,\n                options: activeCapturingEventOptions,\n            });\n            // We don't have to bind a move event for touch drag sequences, because\n            // we already have a persistent global one bound from `registerDragItem`.\n            if (!isTouchEvent) {\n                this._globalListeners.set('mousemove', {\n                    handler: (e) => this.pointerMove.next(e),\n                    options: activeCapturingEventOptions,\n                });\n            }\n            this._ngZone.runOutsideAngular(() => {\n                this._globalListeners.forEach((config, name) => {\n                    this._document.addEventListener(name, config.handler, config.options);\n                });\n            });\n        }\n    }\n    /** Stops dragging a drag item instance. */\n    stopDragging(drag) {\n        const index = this._activeDragInstances.indexOf(drag);\n        if (index > -1) {\n            this._activeDragInstances.splice(index, 1);\n            if (this._activeDragInstances.length === 0) {\n                this._clearGlobalListeners();\n            }\n        }\n    }\n    /** Gets whether a drag item instance is currently being dragged. */\n    isDragging(drag) {\n        return this._activeDragInstances.indexOf(drag) > -1;\n    }\n    /**\n     * Gets a stream that will emit when any element on the page is scrolled while an item is being\n     * dragged.\n     * @param shadowRoot Optional shadow root that the current dragging sequence started from.\n     *   Top-level listeners won't pick up events coming from the shadow DOM so this parameter can\n     *   be used to include an additional top-level listener at the shadow root level.\n     */\n    scrolled(shadowRoot) {\n        const streams = [this.scroll];\n        if (shadowRoot && shadowRoot !== this._document) {\n            // Note that this is basically the same as `fromEvent` from rxjs, but we do it ourselves,\n            // because we want to guarantee that the event is bound outside of the `NgZone`. With\n            // `fromEvent` it'll only happen if the subscription is outside the `NgZone`.\n            streams.push(new Observable((observer) => {\n                return this._ngZone.runOutsideAngular(() => {\n                    const eventOptions = true;\n                    const callback = (event) => {\n                        if (this._activeDragInstances.length) {\n                            observer.next(event);\n                        }\n                    };\n                    shadowRoot.addEventListener('scroll', callback, eventOptions);\n                    return () => {\n                        shadowRoot.removeEventListener('scroll', callback, eventOptions);\n                    };\n                });\n            }));\n        }\n        return merge(...streams);\n    }\n    ngOnDestroy() {\n        this._dragInstances.forEach(instance => this.removeDragItem(instance));\n        this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n        this._clearGlobalListeners();\n        this.pointerMove.complete();\n        this.pointerUp.complete();\n    }\n    /** Clears out the global event listeners from the `document`. */\n    _clearGlobalListeners() {\n        this._globalListeners.forEach((config, name) => {\n            this._document.removeEventListener(name, config.handler, config.options);\n        });\n        this._globalListeners.clear();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: DragDropRegistry, deps: [{ token: i0.NgZone }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: DragDropRegistry, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: DragDropRegistry, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\n/** Default configuration to be used when creating a `DragRef`. */\nconst DEFAULT_CONFIG = {\n    dragStartThreshold: 5,\n    pointerDirectionChangeThreshold: 5,\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\nclass DragDrop {\n    constructor(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * Turns an element into a draggable item.\n     * @param element Element to which to attach the dragging functionality.\n     * @param config Object used to configure the dragging behavior.\n     */\n    createDrag(element, config = DEFAULT_CONFIG) {\n        return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n    }\n    /**\n     * Turns an element into a drop list.\n     * @param element Element to which to attach the drop list functionality.\n     */\n    createDropList(element) {\n        return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: DragDrop, deps: [{ token: DOCUMENT }, { token: i0.NgZone }, { token: i1.ViewportRuler }, { token: DragDropRegistry }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: DragDrop, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: DragDrop, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.NgZone }, { type: i1.ViewportRuler }, { type: DragDropRegistry }]; } });\n\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nconst CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n\n/**\n * Asserts that a particular node is an element.\n * @param node Node to be checked.\n * @param name Name to attach to the error message.\n */\nfunction assertElementNode(node, name) {\n    if (node.nodeType !== 1) {\n        throw Error(`${name} must be attached to an element node. ` + `Currently attached to \"${node.nodeName}\".`);\n    }\n}\n\n/**\n * Injection token that can be used to reference instances of `CdkDragHandle`. It serves as\n * alternative token to the actual `CdkDragHandle` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_HANDLE = new InjectionToken('CdkDragHandle');\n/** Handle that can be used to drag a CdkDrag instance. */\nclass CdkDragHandle {\n    /** Whether starting to drag through this handle is disabled. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._stateChanges.next(this);\n    }\n    constructor(element, parentDrag) {\n        this.element = element;\n        /** Emits when the state of the handle has changed. */\n        this._stateChanges = new Subject();\n        this._disabled = false;\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(element.nativeElement, 'cdkDragHandle');\n        }\n        this._parentDrag = parentDrag;\n    }\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkDragHandle, deps: [{ token: i0.ElementRef }, { token: CDK_DRAG_PARENT, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: CdkDragHandle, isStandalone: true, selector: \"[cdkDragHandle]\", inputs: { disabled: [\"cdkDragHandleDisabled\", \"disabled\"] }, host: { classAttribute: \"cdk-drag-handle\" }, providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkDragHandle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDragHandle]',\n                    standalone: true,\n                    host: {\n                        'class': 'cdk-drag-handle',\n                    },\n                    providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_DRAG_PARENT]\n                }, {\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }]; }, propDecorators: { disabled: [{\n                type: Input,\n                args: ['cdkDragHandleDisabled']\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDragPlaceholder`. It serves as\n * alternative token to the actual `CdkDragPlaceholder` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PLACEHOLDER = new InjectionToken('CdkDragPlaceholder');\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\nclass CdkDragPlaceholder {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkDragPlaceholder, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: CdkDragPlaceholder, isStandalone: true, selector: \"ng-template[cdkDragPlaceholder]\", inputs: { data: \"data\" }, providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkDragPlaceholder, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkDragPlaceholder]',\n                    standalone: true,\n                    providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; }, propDecorators: { data: [{\n                type: Input\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDragPreview`. It serves as\n * alternative token to the actual `CdkDragPreview` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PREVIEW = new InjectionToken('CdkDragPreview');\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\nclass CdkDragPreview {\n    /** Whether the preview should preserve the same size as the item that is being dragged. */\n    get matchSize() {\n        return this._matchSize;\n    }\n    set matchSize(value) {\n        this._matchSize = coerceBooleanProperty(value);\n    }\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n        this._matchSize = false;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkDragPreview, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: CdkDragPreview, isStandalone: true, selector: \"ng-template[cdkDragPreview]\", inputs: { data: \"data\", matchSize: \"matchSize\" }, providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkDragPreview, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkDragPreview]',\n                    standalone: true,\n                    providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; }, propDecorators: { data: [{\n                type: Input\n            }], matchSize: [{\n                type: Input\n            }] } });\n\n/**\n * Injection token that can be used to configure the\n * behavior of the drag&drop-related components.\n */\nconst CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG');\n\nconst DRAG_HOST_CLASS = 'cdk-drag';\n/**\n * Injection token that can be used to reference instances of `CdkDropList`. It serves as\n * alternative token to the actual `CdkDropList` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST = new InjectionToken('CdkDropList');\n/** Element that can be moved inside a CdkDropList container. */\nclass CdkDrag {\n    static { this._dragInstances = []; }\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._dragRef.disabled = this._disabled;\n    }\n    constructor(\n    /** Element that the draggable is attached to. */\n    element, \n    /** Droppable container that the draggable is a part of. */\n    dropContainer, \n    /**\n     * @deprecated `_document` parameter no longer being used and will be removed.\n     * @breaking-change 12.0.0\n     */\n    _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef, _selfHandle, _parentDrag) {\n        this.element = element;\n        this.dropContainer = dropContainer;\n        this._ngZone = _ngZone;\n        this._viewContainerRef = _viewContainerRef;\n        this._dir = _dir;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._selfHandle = _selfHandle;\n        this._parentDrag = _parentDrag;\n        this._destroyed = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new EventEmitter();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new EventEmitter();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new EventEmitter();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new EventEmitter();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new EventEmitter();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = new Observable((observer) => {\n            const subscription = this._dragRef.moved\n                .pipe(map(movedEvent => ({\n                source: this,\n                pointerPosition: movedEvent.pointerPosition,\n                event: movedEvent.event,\n                delta: movedEvent.delta,\n                distance: movedEvent.distance,\n            })))\n                .subscribe(observer);\n            return () => {\n                subscription.unsubscribe();\n            };\n        });\n        this._dragRef = dragDrop.createDrag(element, {\n            dragStartThreshold: config && config.dragStartThreshold != null ? config.dragStartThreshold : 5,\n            pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null\n                ? config.pointerDirectionChangeThreshold\n                : 5,\n            zIndex: config?.zIndex,\n        });\n        this._dragRef.data = this;\n        // We have to keep track of the drag instances in order to be able to match an element to\n        // a drag instance. We can't go through the global registry of `DragRef`, because the root\n        // element could be different.\n        CdkDrag._dragInstances.push(this);\n        if (config) {\n            this._assignDefaults(config);\n        }\n        // Note that usually the container is assigned when the drop list is picks up the item, but in\n        // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n        // where there are no items on the first change detection pass, but the items get picked up as\n        // soon as the user triggers another pass by dragging. This is a problem, because the item would\n        // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n        // is too late since the two modes save different kinds of information. We work around it by\n        // assigning the drop container both from here and the list.\n        if (dropContainer) {\n            this._dragRef._withDropContainer(dropContainer._dropListRef);\n            dropContainer.addItem(this);\n        }\n        this._syncInputs(this._dragRef);\n        this._handleEvents(this._dragRef);\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._dragRef.getPlaceholderElement();\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._dragRef.getRootElement();\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._dragRef.reset();\n    }\n    /**\n     * Gets the pixel coordinates of the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        return this._dragRef.getFreeDragPosition();\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._dragRef.setFreeDragPosition(value);\n    }\n    ngAfterViewInit() {\n        // Normally this isn't in the zone, but it can cause major performance regressions for apps\n        // using `zone-patch-rxjs` because it'll trigger a change detection when it unsubscribes.\n        this._ngZone.runOutsideAngular(() => {\n            // We need to wait for the zone to stabilize, in order for the reference\n            // element to be in the proper place in the DOM. This is mostly relevant\n            // for draggable elements inside portals since they get stamped out in\n            // their original DOM position and then they get transferred to the portal.\n            this._ngZone.onStable.pipe(take(1), takeUntil(this._destroyed)).subscribe(() => {\n                this._updateRootElement();\n                this._setupHandlesListener();\n                if (this.freeDragPosition) {\n                    this._dragRef.setFreeDragPosition(this.freeDragPosition);\n                }\n            });\n        });\n    }\n    ngOnChanges(changes) {\n        const rootSelectorChange = changes['rootElementSelector'];\n        const positionChange = changes['freeDragPosition'];\n        // We don't have to react to the first change since it's being\n        // handled in `ngAfterViewInit` where it needs to be deferred.\n        if (rootSelectorChange && !rootSelectorChange.firstChange) {\n            this._updateRootElement();\n        }\n        // Skip the first change since it's being handled in `ngAfterViewInit`.\n        if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n            this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n    }\n    ngOnDestroy() {\n        if (this.dropContainer) {\n            this.dropContainer.removeItem(this);\n        }\n        const index = CdkDrag._dragInstances.indexOf(this);\n        if (index > -1) {\n            CdkDrag._dragInstances.splice(index, 1);\n        }\n        // Unnecessary in most cases, but used to avoid extra change detections with `zone-paths-rxjs`.\n        this._ngZone.runOutsideAngular(() => {\n            this._destroyed.next();\n            this._destroyed.complete();\n            this._dragRef.dispose();\n        });\n    }\n    /** Syncs the root element with the `DragRef`. */\n    _updateRootElement() {\n        const element = this.element.nativeElement;\n        let rootElement = element;\n        if (this.rootElementSelector) {\n            rootElement =\n                element.closest !== undefined\n                    ? element.closest(this.rootElementSelector)\n                    : // Comment tag doesn't have closest method, so use parent's one.\n                        element.parentElement?.closest(this.rootElementSelector);\n        }\n        if (rootElement && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            assertElementNode(rootElement, 'cdkDrag');\n        }\n        this._dragRef.withRootElement(rootElement || element);\n    }\n    /** Gets the boundary element, based on the `boundaryElement` value. */\n    _getBoundaryElement() {\n        const boundary = this.boundaryElement;\n        if (!boundary) {\n            return null;\n        }\n        if (typeof boundary === 'string') {\n            return this.element.nativeElement.closest(boundary);\n        }\n        return coerceElement(boundary);\n    }\n    /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n    _syncInputs(ref) {\n        ref.beforeStarted.subscribe(() => {\n            if (!ref.isDragging()) {\n                const dir = this._dir;\n                const dragStartDelay = this.dragStartDelay;\n                const placeholder = this._placeholderTemplate\n                    ? {\n                        template: this._placeholderTemplate.templateRef,\n                        context: this._placeholderTemplate.data,\n                        viewContainer: this._viewContainerRef,\n                    }\n                    : null;\n                const preview = this._previewTemplate\n                    ? {\n                        template: this._previewTemplate.templateRef,\n                        context: this._previewTemplate.data,\n                        matchSize: this._previewTemplate.matchSize,\n                        viewContainer: this._viewContainerRef,\n                    }\n                    : null;\n                ref.disabled = this.disabled;\n                ref.lockAxis = this.lockAxis;\n                ref.dragStartDelay =\n                    typeof dragStartDelay === 'object' && dragStartDelay\n                        ? dragStartDelay\n                        : coerceNumberProperty(dragStartDelay);\n                ref.constrainPosition = this.constrainPosition;\n                ref.previewClass = this.previewClass;\n                ref\n                    .withBoundaryElement(this._getBoundaryElement())\n                    .withPlaceholderTemplate(placeholder)\n                    .withPreviewTemplate(preview)\n                    .withPreviewContainer(this.previewContainer || 'global');\n                if (dir) {\n                    ref.withDirection(dir.value);\n                }\n            }\n        });\n        // This only needs to be resolved once.\n        ref.beforeStarted.pipe(take(1)).subscribe(() => {\n            // If we managed to resolve a parent through DI, use it.\n            if (this._parentDrag) {\n                ref.withParent(this._parentDrag._dragRef);\n                return;\n            }\n            // Otherwise fall back to resolving the parent by looking up the DOM. This can happen if\n            // the item was projected into another item by something like `ngTemplateOutlet`.\n            let parent = this.element.nativeElement.parentElement;\n            while (parent) {\n                if (parent.classList.contains(DRAG_HOST_CLASS)) {\n                    ref.withParent(CdkDrag._dragInstances.find(drag => {\n                        return drag.element.nativeElement === parent;\n                    })?._dragRef || null);\n                    break;\n                }\n                parent = parent.parentElement;\n            }\n        });\n    }\n    /** Handles the events from the underlying `DragRef`. */\n    _handleEvents(ref) {\n        ref.started.subscribe(startEvent => {\n            this.started.emit({ source: this, event: startEvent.event });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.released.subscribe(releaseEvent => {\n            this.released.emit({ source: this, event: releaseEvent.event });\n        });\n        ref.ended.subscribe(endEvent => {\n            this.ended.emit({\n                source: this,\n                distance: endEvent.distance,\n                dropPoint: endEvent.dropPoint,\n                event: endEvent.event,\n            });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(enterEvent => {\n            this.entered.emit({\n                container: enterEvent.container.data,\n                item: this,\n                currentIndex: enterEvent.currentIndex,\n            });\n        });\n        ref.exited.subscribe(exitEvent => {\n            this.exited.emit({\n                container: exitEvent.container.data,\n                item: this,\n            });\n        });\n        ref.dropped.subscribe(dropEvent => {\n            this.dropped.emit({\n                previousIndex: dropEvent.previousIndex,\n                currentIndex: dropEvent.currentIndex,\n                previousContainer: dropEvent.previousContainer.data,\n                container: dropEvent.container.data,\n                isPointerOverContainer: dropEvent.isPointerOverContainer,\n                item: this,\n                distance: dropEvent.distance,\n                dropPoint: dropEvent.dropPoint,\n                event: dropEvent.event,\n            });\n        });\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, dragStartDelay, constrainPosition, previewClass, boundaryElement, draggingDisabled, rootElementSelector, previewContainer, } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.dragStartDelay = dragStartDelay || 0;\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n        if (constrainPosition) {\n            this.constrainPosition = constrainPosition;\n        }\n        if (previewClass) {\n            this.previewClass = previewClass;\n        }\n        if (boundaryElement) {\n            this.boundaryElement = boundaryElement;\n        }\n        if (rootElementSelector) {\n            this.rootElementSelector = rootElementSelector;\n        }\n        if (previewContainer) {\n            this.previewContainer = previewContainer;\n        }\n    }\n    /** Sets up the listener that syncs the handles with the drag ref. */\n    _setupHandlesListener() {\n        // Listen for any newly-added handles.\n        this._handles.changes\n            .pipe(startWith(this._handles), \n        // Sync the new handles with the DragRef.\n        tap((handles) => {\n            const childHandleElements = handles\n                .filter(handle => handle._parentDrag === this)\n                .map(handle => handle.element);\n            // Usually handles are only allowed to be a descendant of the drag element, but if\n            // the consumer defined a different drag root, we should allow the drag element\n            // itself to be a handle too.\n            if (this._selfHandle && this.rootElementSelector) {\n                childHandleElements.push(this.element);\n            }\n            this._dragRef.withHandles(childHandleElements);\n        }), \n        // Listen if the state of any of the handles changes.\n        switchMap((handles) => {\n            return merge(...handles.map(item => {\n                return item._stateChanges.pipe(startWith(item));\n            }));\n        }), takeUntil(this._destroyed))\n            .subscribe(handleInstance => {\n            // Enabled/disable the handle that changed in the DragRef.\n            const dragRef = this._dragRef;\n            const handle = handleInstance.element.nativeElement;\n            handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkDrag, deps: [{ token: i0.ElementRef }, { token: CDK_DROP_LIST, optional: true, skipSelf: true }, { token: DOCUMENT }, { token: i0.NgZone }, { token: i0.ViewContainerRef }, { token: CDK_DRAG_CONFIG, optional: true }, { token: i1$1.Directionality, optional: true }, { token: DragDrop }, { token: i0.ChangeDetectorRef }, { token: CDK_DRAG_HANDLE, optional: true, self: true }, { token: CDK_DRAG_PARENT, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: CdkDrag, isStandalone: true, selector: \"[cdkDrag]\", inputs: { data: [\"cdkDragData\", \"data\"], lockAxis: [\"cdkDragLockAxis\", \"lockAxis\"], rootElementSelector: [\"cdkDragRootElement\", \"rootElementSelector\"], boundaryElement: [\"cdkDragBoundary\", \"boundaryElement\"], dragStartDelay: [\"cdkDragStartDelay\", \"dragStartDelay\"], freeDragPosition: [\"cdkDragFreeDragPosition\", \"freeDragPosition\"], disabled: [\"cdkDragDisabled\", \"disabled\"], constrainPosition: [\"cdkDragConstrainPosition\", \"constrainPosition\"], previewClass: [\"cdkDragPreviewClass\", \"previewClass\"], previewContainer: [\"cdkDragPreviewContainer\", \"previewContainer\"] }, outputs: { started: \"cdkDragStarted\", released: \"cdkDragReleased\", ended: \"cdkDragEnded\", entered: \"cdkDragEntered\", exited: \"cdkDragExited\", dropped: \"cdkDragDropped\", moved: \"cdkDragMoved\" }, host: { properties: { \"class.cdk-drag-disabled\": \"disabled\", \"class.cdk-drag-dragging\": \"_dragRef.isDragging()\" }, classAttribute: \"cdk-drag\" }, providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }], queries: [{ propertyName: \"_previewTemplate\", first: true, predicate: CDK_DRAG_PREVIEW, descendants: true }, { propertyName: \"_placeholderTemplate\", first: true, predicate: CDK_DRAG_PLACEHOLDER, descendants: true }, { propertyName: \"_handles\", predicate: CDK_DRAG_HANDLE, descendants: true }], exportAs: [\"cdkDrag\"], usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkDrag, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDrag]',\n                    exportAs: 'cdkDrag',\n                    standalone: true,\n                    host: {\n                        'class': DRAG_HOST_CLASS,\n                        '[class.cdk-drag-disabled]': 'disabled',\n                        '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n                    },\n                    providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_DROP_LIST]\n                }, {\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.NgZone }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_CONFIG]\n                }] }, { type: i1$1.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: DragDrop }, { type: i0.ChangeDetectorRef }, { type: CdkDragHandle, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_HANDLE]\n                }] }, { type: CdkDrag, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_PARENT]\n                }] }]; }, propDecorators: { _handles: [{\n                type: ContentChildren,\n                args: [CDK_DRAG_HANDLE, { descendants: true }]\n            }], _previewTemplate: [{\n                type: ContentChild,\n                args: [CDK_DRAG_PREVIEW]\n            }], _placeholderTemplate: [{\n                type: ContentChild,\n                args: [CDK_DRAG_PLACEHOLDER]\n            }], data: [{\n                type: Input,\n                args: ['cdkDragData']\n            }], lockAxis: [{\n                type: Input,\n                args: ['cdkDragLockAxis']\n            }], rootElementSelector: [{\n                type: Input,\n                args: ['cdkDragRootElement']\n            }], boundaryElement: [{\n                type: Input,\n                args: ['cdkDragBoundary']\n            }], dragStartDelay: [{\n                type: Input,\n                args: ['cdkDragStartDelay']\n            }], freeDragPosition: [{\n                type: Input,\n                args: ['cdkDragFreeDragPosition']\n            }], disabled: [{\n                type: Input,\n                args: ['cdkDragDisabled']\n            }], constrainPosition: [{\n                type: Input,\n                args: ['cdkDragConstrainPosition']\n            }], previewClass: [{\n                type: Input,\n                args: ['cdkDragPreviewClass']\n            }], previewContainer: [{\n                type: Input,\n                args: ['cdkDragPreviewContainer']\n            }], started: [{\n                type: Output,\n                args: ['cdkDragStarted']\n            }], released: [{\n                type: Output,\n                args: ['cdkDragReleased']\n            }], ended: [{\n                type: Output,\n                args: ['cdkDragEnded']\n            }], entered: [{\n                type: Output,\n                args: ['cdkDragEntered']\n            }], exited: [{\n                type: Output,\n                args: ['cdkDragExited']\n            }], dropped: [{\n                type: Output,\n                args: ['cdkDragDropped']\n            }], moved: [{\n                type: Output,\n                args: ['cdkDragMoved']\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDropListGroup`. It serves as\n * alternative token to the actual `CdkDropListGroup` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST_GROUP = new InjectionToken('CdkDropListGroup');\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\nclass CdkDropListGroup {\n    constructor() {\n        /** Drop lists registered inside the group. */\n        this._items = new Set();\n        this._disabled = false;\n    }\n    /** Whether starting a dragging sequence from inside this group is disabled. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    ngOnDestroy() {\n        this._items.clear();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkDropListGroup, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: CdkDropListGroup, isStandalone: true, selector: \"[cdkDropListGroup]\", inputs: { disabled: [\"cdkDropListGroupDisabled\", \"disabled\"] }, providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }], exportAs: [\"cdkDropListGroup\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkDropListGroup, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDropListGroup]',\n                    exportAs: 'cdkDropListGroup',\n                    standalone: true,\n                    providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }],\n                }]\n        }], propDecorators: { disabled: [{\n                type: Input,\n                args: ['cdkDropListGroupDisabled']\n            }] } });\n\n/** Counter used to generate unique ids for drop zones. */\nlet _uniqueIdCounter = 0;\n/** Container that wraps a set of draggable items. */\nclass CdkDropList {\n    /** Keeps track of the drop lists that are currently on the page. */\n    static { this._dropLists = []; }\n    /** Whether starting a dragging sequence from this container is disabled. */\n    get disabled() {\n        return this._disabled || (!!this._group && this._group.disabled);\n    }\n    set disabled(value) {\n        // Usually we sync the directive and ref state right before dragging starts, in order to have\n        // a single point of failure and to avoid having to use setters for everything. `disabled` is\n        // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n        // the user in a disabled state, so we also need to sync it as it's being set.\n        this._dropListRef.disabled = this._disabled = coerceBooleanProperty(value);\n    }\n    constructor(\n    /** Element that the drop list is attached to. */\n    element, dragDrop, _changeDetectorRef, _scrollDispatcher, _dir, _group, config) {\n        this.element = element;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._dir = _dir;\n        this._group = _group;\n        /** Emits when the list has been destroyed. */\n        this._destroyed = new Subject();\n        /**\n         * Other draggable containers that this container is connected to and into which the\n         * container's items can be transferred. Can either be references to other drop containers,\n         * or their unique IDs.\n         */\n        this.connectedTo = [];\n        /**\n         * Unique ID for the drop zone. Can be used as a reference\n         * in the `connectedTo` of another `CdkDropList`.\n         */\n        this.id = `cdk-drop-list-${_uniqueIdCounter++}`;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Functions that is used to determine whether an item can be sorted into a particular index. */\n        this.sortPredicate = () => true;\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new EventEmitter();\n        /**\n         * Keeps track of the items that are registered with this container. Historically we used to\n         * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n         * well which means that we can't handle cases like dragging the headers of a `mat-table`\n         * correctly. What we do instead is to have the items register themselves with the container\n         * and then we sort them based on their position in the DOM.\n         */\n        this._unsortedItems = new Set();\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(element.nativeElement, 'cdkDropList');\n        }\n        this._dropListRef = dragDrop.createDropList(element);\n        this._dropListRef.data = this;\n        if (config) {\n            this._assignDefaults(config);\n        }\n        this._dropListRef.enterPredicate = (drag, drop) => {\n            return this.enterPredicate(drag.data, drop.data);\n        };\n        this._dropListRef.sortPredicate = (index, drag, drop) => {\n            return this.sortPredicate(index, drag.data, drop.data);\n        };\n        this._setupInputSyncSubscription(this._dropListRef);\n        this._handleEvents(this._dropListRef);\n        CdkDropList._dropLists.push(this);\n        if (_group) {\n            _group._items.add(this);\n        }\n    }\n    /** Registers an items with the drop list. */\n    addItem(item) {\n        this._unsortedItems.add(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Removes an item from the drop list. */\n    removeItem(item) {\n        this._unsortedItems.delete(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Gets the registered items in the list, sorted by their position in the DOM. */\n    getSortedItems() {\n        return Array.from(this._unsortedItems).sort((a, b) => {\n            const documentPosition = a._dragRef\n                .getVisibleElement()\n                .compareDocumentPosition(b._dragRef.getVisibleElement());\n            // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n            // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n            // tslint:disable-next-line:no-bitwise\n            return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n        });\n    }\n    ngOnDestroy() {\n        const index = CdkDropList._dropLists.indexOf(this);\n        if (index > -1) {\n            CdkDropList._dropLists.splice(index, 1);\n        }\n        if (this._group) {\n            this._group._items.delete(this);\n        }\n        this._unsortedItems.clear();\n        this._dropListRef.dispose();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n    _setupInputSyncSubscription(ref) {\n        if (this._dir) {\n            this._dir.change\n                .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n                .subscribe(value => ref.withDirection(value));\n        }\n        ref.beforeStarted.subscribe(() => {\n            const siblings = coerceArray(this.connectedTo).map(drop => {\n                if (typeof drop === 'string') {\n                    const correspondingDropList = CdkDropList._dropLists.find(list => list.id === drop);\n                    if (!correspondingDropList && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                        console.warn(`CdkDropList could not find connected drop list with id \"${drop}\"`);\n                    }\n                    return correspondingDropList;\n                }\n                return drop;\n            });\n            if (this._group) {\n                this._group._items.forEach(drop => {\n                    if (siblings.indexOf(drop) === -1) {\n                        siblings.push(drop);\n                    }\n                });\n            }\n            // Note that we resolve the scrollable parents here so that we delay the resolution\n            // as long as possible, ensuring that the element is in its final place in the DOM.\n            if (!this._scrollableParentsResolved) {\n                const scrollableParents = this._scrollDispatcher\n                    .getAncestorScrollContainers(this.element)\n                    .map(scrollable => scrollable.getElementRef().nativeElement);\n                this._dropListRef.withScrollableParents(scrollableParents);\n                // Only do this once since it involves traversing the DOM and the parents\n                // shouldn't be able to change without the drop list being destroyed.\n                this._scrollableParentsResolved = true;\n            }\n            ref.disabled = this.disabled;\n            ref.lockAxis = this.lockAxis;\n            ref.sortingDisabled = coerceBooleanProperty(this.sortingDisabled);\n            ref.autoScrollDisabled = coerceBooleanProperty(this.autoScrollDisabled);\n            ref.autoScrollStep = coerceNumberProperty(this.autoScrollStep, 2);\n            ref\n                .connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef))\n                .withOrientation(this.orientation);\n        });\n    }\n    /** Handles events from the underlying DropListRef. */\n    _handleEvents(ref) {\n        ref.beforeStarted.subscribe(() => {\n            this._syncItemsWithRef();\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(event => {\n            this.entered.emit({\n                container: this,\n                item: event.item.data,\n                currentIndex: event.currentIndex,\n            });\n        });\n        ref.exited.subscribe(event => {\n            this.exited.emit({\n                container: this,\n                item: event.item.data,\n            });\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.sorted.subscribe(event => {\n            this.sorted.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                container: this,\n                item: event.item.data,\n            });\n        });\n        ref.dropped.subscribe(dropEvent => {\n            this.dropped.emit({\n                previousIndex: dropEvent.previousIndex,\n                currentIndex: dropEvent.currentIndex,\n                previousContainer: dropEvent.previousContainer.data,\n                container: dropEvent.container.data,\n                item: dropEvent.item.data,\n                isPointerOverContainer: dropEvent.isPointerOverContainer,\n                distance: dropEvent.distance,\n                dropPoint: dropEvent.dropPoint,\n                event: dropEvent.event,\n            });\n            // Mark for check since all of these events run outside of change\n            // detection and we're not guaranteed for something else to have triggered it.\n            this._changeDetectorRef.markForCheck();\n        });\n        merge(ref.receivingStarted, ref.receivingStopped).subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, draggingDisabled, sortingDisabled, listAutoScrollDisabled, listOrientation } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n        this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n        this.orientation = listOrientation || 'vertical';\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n    }\n    /** Syncs up the registered drag items with underlying drop list ref. */\n    _syncItemsWithRef() {\n        this._dropListRef.withItems(this.getSortedItems().map(item => item._dragRef));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkDropList, deps: [{ token: i0.ElementRef }, { token: DragDrop }, { token: i0.ChangeDetectorRef }, { token: i1.ScrollDispatcher }, { token: i1$1.Directionality, optional: true }, { token: CDK_DROP_LIST_GROUP, optional: true, skipSelf: true }, { token: CDK_DRAG_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: CdkDropList, isStandalone: true, selector: \"[cdkDropList], cdk-drop-list\", inputs: { connectedTo: [\"cdkDropListConnectedTo\", \"connectedTo\"], data: [\"cdkDropListData\", \"data\"], orientation: [\"cdkDropListOrientation\", \"orientation\"], id: \"id\", lockAxis: [\"cdkDropListLockAxis\", \"lockAxis\"], disabled: [\"cdkDropListDisabled\", \"disabled\"], sortingDisabled: [\"cdkDropListSortingDisabled\", \"sortingDisabled\"], enterPredicate: [\"cdkDropListEnterPredicate\", \"enterPredicate\"], sortPredicate: [\"cdkDropListSortPredicate\", \"sortPredicate\"], autoScrollDisabled: [\"cdkDropListAutoScrollDisabled\", \"autoScrollDisabled\"], autoScrollStep: [\"cdkDropListAutoScrollStep\", \"autoScrollStep\"] }, outputs: { dropped: \"cdkDropListDropped\", entered: \"cdkDropListEntered\", exited: \"cdkDropListExited\", sorted: \"cdkDropListSorted\" }, host: { properties: { \"attr.id\": \"id\", \"class.cdk-drop-list-disabled\": \"disabled\", \"class.cdk-drop-list-dragging\": \"_dropListRef.isDragging()\", \"class.cdk-drop-list-receiving\": \"_dropListRef.isReceiving()\" }, classAttribute: \"cdk-drop-list\" }, providers: [\n            // Prevent child drop lists from picking up the same group as their parent.\n            { provide: CDK_DROP_LIST_GROUP, useValue: undefined },\n            { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n        ], exportAs: [\"cdkDropList\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkDropList, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDropList], cdk-drop-list',\n                    exportAs: 'cdkDropList',\n                    standalone: true,\n                    providers: [\n                        // Prevent child drop lists from picking up the same group as their parent.\n                        { provide: CDK_DROP_LIST_GROUP, useValue: undefined },\n                        { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n                    ],\n                    host: {\n                        'class': 'cdk-drop-list',\n                        '[attr.id]': 'id',\n                        '[class.cdk-drop-list-disabled]': 'disabled',\n                        '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n                        '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: DragDrop }, { type: i0.ChangeDetectorRef }, { type: i1.ScrollDispatcher }, { type: i1$1.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: CdkDropListGroup, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_DROP_LIST_GROUP]\n                }, {\n                    type: SkipSelf\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_CONFIG]\n                }] }]; }, propDecorators: { connectedTo: [{\n                type: Input,\n                args: ['cdkDropListConnectedTo']\n            }], data: [{\n                type: Input,\n                args: ['cdkDropListData']\n            }], orientation: [{\n                type: Input,\n                args: ['cdkDropListOrientation']\n            }], id: [{\n                type: Input\n            }], lockAxis: [{\n                type: Input,\n                args: ['cdkDropListLockAxis']\n            }], disabled: [{\n                type: Input,\n                args: ['cdkDropListDisabled']\n            }], sortingDisabled: [{\n                type: Input,\n                args: ['cdkDropListSortingDisabled']\n            }], enterPredicate: [{\n                type: Input,\n                args: ['cdkDropListEnterPredicate']\n            }], sortPredicate: [{\n                type: Input,\n                args: ['cdkDropListSortPredicate']\n            }], autoScrollDisabled: [{\n                type: Input,\n                args: ['cdkDropListAutoScrollDisabled']\n            }], autoScrollStep: [{\n                type: Input,\n                args: ['cdkDropListAutoScrollStep']\n            }], dropped: [{\n                type: Output,\n                args: ['cdkDropListDropped']\n            }], entered: [{\n                type: Output,\n                args: ['cdkDropListEntered']\n            }], exited: [{\n                type: Output,\n                args: ['cdkDropListExited']\n            }], sorted: [{\n                type: Output,\n                args: ['cdkDropListSorted']\n            }] } });\n\nconst DRAG_DROP_DIRECTIVES = [\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n];\nclass DragDropModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: DragDropModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.0\", ngImport: i0, type: DragDropModule, imports: [CdkDropList,\n            CdkDropListGroup,\n            CdkDrag,\n            CdkDragHandle,\n            CdkDragPreview,\n            CdkDragPlaceholder], exports: [CdkScrollableModule, CdkDropList,\n            CdkDropListGroup,\n            CdkDrag,\n            CdkDragHandle,\n            CdkDragPreview,\n            CdkDragPlaceholder] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: DragDropModule, providers: [DragDrop], imports: [CdkScrollableModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: DragDropModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: DRAG_DROP_DIRECTIVES,\n                    exports: [CdkScrollableModule, ...DRAG_DROP_DIRECTIVES],\n                    providers: [DragDrop],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_DRAG_CONFIG, CDK_DRAG_HANDLE, CDK_DRAG_PARENT, CDK_DRAG_PLACEHOLDER, CDK_DRAG_PREVIEW, CDK_DROP_LIST, CDK_DROP_LIST_GROUP, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem };\n","import { asyncScheduler } from '../scheduler/async';\nimport { timer } from './timer';\nexport function interval(period = 0, scheduler = asyncScheduler) {\n    if (period < 0) {\n        period = 0;\n    }\n    return timer(period, period, scheduler);\n}\n","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import getPrototypeOf from \"./getPrototypeOf.js\";\nimport isNativeReflectConstruct from \"./isNativeReflectConstruct.js\";\nimport possibleConstructorReturn from \"./possibleConstructorReturn.js\";\nexport default function _createSuper(Derived) {\n  var hasNativeReflectConstruct = isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return possibleConstructorReturn(this, result);\n  };\n}","import _typeof from \"./typeof.js\";\nimport assertThisInitialized from \"./assertThisInitialized.js\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return assertThisInitialized(self);\n}","import superPropBase from \"./superPropBase.js\";\nexport default function _get() {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get.bind();\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n      if (desc.get) {\n        return desc.get.call(arguments.length < 3 ? target : receiver);\n      }\n      return desc.value;\n    };\n  }\n  return _get.apply(this, arguments);\n}","import getPrototypeOf from \"./getPrototypeOf.js\";\nexport default function _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = getPrototypeOf(object);\n    if (object === null) break;\n  }\n  return object;\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","export default function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (null != _i) {\n    var _s,\n      _e,\n      _x,\n      _r,\n      _arr = [],\n      _n = !0,\n      _d = !1;\n    try {\n      if (_x = (_i = _i.call(arr)).next, 0 === i) {\n        if (Object(_i) !== _i) return;\n        _n = !1;\n      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);\n    } catch (err) {\n      _d = !0, _e = err;\n    } finally {\n      try {\n        if (!_n && null != _i[\"return\"] && (_r = _i[\"return\"](), Object(_r) !== _r)) return;\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}"],"x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51]}