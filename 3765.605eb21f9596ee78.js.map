{"version":3,"file":"3765.605eb21f9596ee78.js","mappings":"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","names":["EMPTY","Observable","subscriber","complete","subscribeOn","scheduler","delay","arguments","length","undefined","operate","source","add","schedule","subscribe","scheduleAsyncIterable","input","Error","executeSchedule","iterator","Symbol","asyncIterator","next","then","result","done","value","from","scheduled","isInteropObservable","scheduleObservable","innerFrom","pipe","observeOn","isArrayLike","scheduleArray","i","closed","this","isPromise","schedulePromise","isAsyncIterable","isIterable","scheduleIterable","Symbol_iterator","_iterator$next","err","error","isFunction","return","isReadableStreamLike","scheduleReadableStreamLike","readableStreamLikeToAsyncGenerator","createInvalidObservableTypeError","of","_len","args","Array","_key","popScheduler","createOperatorSubscriber","destination","onNext","onComplete","onError","onFinalize","OperatorSubscriber","_Subscriber","_inherits","_super","_createSuper","shouldUnsubscribe","_thisSuper","_thisSuper2","_thisSuper3","_this","_classCallCheck","call","_next","_get","_assertThisInitialized","_getPrototypeOf","prototype","_error","unsubscribe","_complete","_createClass","key","_a","Subscriber","concatMap","project","resultSelector","mergeMap","defaultIfEmpty","defaultValue","hasValue","filter","predicate","thisArg","index","finalize","callback","first","hasDefaultValue","v","identity","take","throwIfEmpty","EmptyError","map","concurrent","Infinity","a","b","ii","mergeInternals","onBeforeNext","expand","innerSubScheduler","additionalFinalizer","buffer","active","isComplete","checkComplete","outerNext","doInnerSub","push","innerComplete","innerValue","_loop","bufferedValue","shift","switchMap","innerSubscriber","innerIndex","outerIndex","count","seen","tap","observerOrNext","tapObserver","isUnsub","_b","errorFactory","defaultErrorFactory","createErrorClass","name","message","last","arr","popResultSelector","pop","isScheduler","popNumber","parentSubscription","work","repeat","scheduleSubscription","hasLift","lift","init","liftedSource","TypeError","HttpHandler","HttpBackend","HttpHeaders","headers","normalizedNames","Map","lazyUpdate","lazyInit","split","forEach","line","indexOf","slice","toLowerCase","trim","maybeSetNormalizedName","has","get","set","Object","entries","_ref","headerValues","_ref2","_slicedToArray","values","toString","clone","op","lcName","_this2","copyFrom","update","applyUpdate","other","_this3","keys","concat","base","apply","_toConsumableArray","toDelete","existing","delete","fn","_this4","HttpUrlEncodingCodec","standardEncoding","decodeURIComponent","STANDARD_ENCODING_REGEX","STANDARD_ENCODING_REPLACEMENTS","encodeURIComponent","replace","s","t","_STANDARD_ENCODING_RE","valueToString","HttpParams","_this5","options","updates","cloneFrom","encoder","fromString","fromObject","paramParser","rawParams","codec","param","eqIdx","_ref3","decodeKey","decodeValue","_ref4","val","list","isArray","res","params","_value","_this6","eKey","encodeKey","encodeValue","join","_this7","idx","splice","HttpContextToken","HttpContext","token","isArrayBuffer","ArrayBuffer","isBlob","Blob","isFormData","FormData","HttpRequest","method","url","third","fourth","body","reportProgress","withCredentials","responseType","toUpperCase","mightHaveBody","context","urlWithParams","qIdx","isUrlSearchParams","URLSearchParams","JSON","stringify","type","_update$context","setHeaders","reduce","setParams","HttpEventType","Sent","UploadProgress","ResponseHeader","DownloadProgress","Response","User","HttpResponseBase","defaultStatus","defaultStatusText","status","statusText","ok","HttpHeaderResponse","_HttpResponseBase","_this8","HttpResponse","_HttpResponseBase2","_super2","_this9","HttpErrorResponse","_HttpResponseBase3","_super3","_this10","addBody","observe","HttpClient","handler","req","_this11","events$","handle","res$","event","request","callbackParam","append","ɵfac","i0","ɵprov","factory","interceptorChainEndFn","finalHandlerFn","adaptLegacyInterceptorToChain","chainTailFn","interceptor","initialRequest","intercept","downstreamRequest","HTTP_INTERCEPTORS","InjectionToken","HTTP_INTERCEPTOR_FNS","HTTP_ROOT_INTERCEPTOR_FNS","legacyInterceptorFnFactory","chain","_inject","interceptors","inject","optional","reduceRight","pendingTasks","ɵInitialRenderPendingTasks","taskId","remove","foreignDocument","HttpInterceptorHandler","_HttpHandler","_super4","backend","injector","_this12","_this13","dedupedInterceptorFns","Set","nextSequencedFn","interceptorFn","chainedInterceptorFn","runInContext","nextRequestId","JsonpCallbackContext","jsonpCallbackContext","window","JsonpClientBackend","callbackMap","document","resolvedPromise","Promise","resolve","_this14","observer","nextCallback","node","createElement","src","finished","data","cleanup","parentNode","removeChild","addEventListener","appendChild","removeListeners","script","implementation","createHTMLDocument","adoptNode","DOCUMENT","jsonpInterceptorFn","JsonpInterceptor","XSSI_PREFIX","HttpXhrBackend","xhrFactory","ɵRuntimeError","ngDevMode","ɵloadImpl","xhr","build","open","setRequestHeader","detectedType","detectContentTypeHeader","reqBody","serializeBody","headerResponse","partialFromXhr","getAllResponseHeaders","getResponseUrl","responseURL","test","getResponseHeader","onLoad","_partialFromXhr","response","responseText","originalBody","parse","text","_partialFromXhr2","sentHeaders","onDownProgress","progressEvent","loaded","lengthComputable","total","partialText","onUpProgress","progress","upload","send","removeEventListener","readyState","DONE","abort","i1","XSRF_ENABLED","XSRF_DEFAULT_COOKIE_NAME","XSRF_COOKIE_NAME","providedIn","XSRF_DEFAULT_HEADER_NAME","XSRF_HEADER_NAME","HttpXsrfTokenExtractor","HttpXsrfCookieExtractor","doc","platform","cookieName","lastCookieString","lastToken","parseCount","cookieString","cookie","ɵparseCookieValue","PLATFORM_ID","xsrfInterceptorFn","lcUrl","startsWith","getToken","headerName","HttpXsrfInterceptor","HttpFeatureKind","Interceptors","LegacyInterceptors","CustomXsrfConfiguration","NoXsrfProtection","JsonpSupport","RequestsMadeViaParent","makeHttpFeature","kind","providers","ɵkind","ɵproviders","provideHttpClient","features","provide","useExisting","useValue","multi","useClass","_i2","_features","makeEnvironmentProviders","withInterceptors","interceptorFns","LEGACY_INTERCEPTOR_FN","withInterceptorsFromDi","useFactory","withXsrfConfiguration","_ref5","withNoXsrfProtection","withJsonpSupport","withRequestsMadeViaParent","handlerFromParent","skipSelf","HttpClientXsrfModule","ngModule","ɵmod","ɵinj","HttpClientModule","HttpClientJsonpModule","CACHE_STATE","ALLOWED_METHODS","transferCacheInterceptorFn","_inject2","isCacheActive","includes","transferState","TransferState","storeKey","makeCacheKey","hash","generateHash","_step2","_iterator2","_createForOfIteratorHelper","n","char","Math","imul","charCodeAt","e","f","sort","k","getAll","makeStateKey","TextEncoder","encode","getHeadersMap","_step","headersMap","_iterator","withHttpTransferCache","ɵENABLED_SSR_FEATURES","deps","APP_BOOTSTRAP_LISTENER","appRef","ApplicationRef","cacheState","isStable","toPromise","_arrayWithHoles","_nonIterableRest","arrayWithHoles","Z","_iterableToArrayLimit","_i","_s","_e","_x","_r","_arr","_n","_d","unsupportedIterableToArray","nonIterableRest"],"sourceRoot":"webpack:///","sources":["./node_modules/rxjs/dist/esm/internal/observable/empty.js","./node_modules/rxjs/dist/esm/internal/operators/subscribeOn.js","./node_modules/rxjs/dist/esm/internal/scheduled/scheduleAsyncIterable.js","./node_modules/rxjs/dist/esm/internal/observable/from.js","./node_modules/rxjs/dist/esm/internal/scheduled/scheduled.js","./node_modules/rxjs/dist/esm/internal/scheduled/scheduleObservable.js","./node_modules/rxjs/dist/esm/internal/scheduled/scheduleArray.js","./node_modules/rxjs/dist/esm/internal/scheduled/schedulePromise.js","./node_modules/rxjs/dist/esm/internal/scheduled/scheduleIterable.js","./node_modules/rxjs/dist/esm/internal/scheduled/scheduleReadableStreamLike.js","./node_modules/rxjs/dist/esm/internal/observable/of.js","./node_modules/rxjs/dist/esm/internal/operators/OperatorSubscriber.js","./node_modules/rxjs/dist/esm/internal/operators/concatMap.js","./node_modules/rxjs/dist/esm/internal/operators/defaultIfEmpty.js","./node_modules/rxjs/dist/esm/internal/operators/filter.js","./node_modules/rxjs/dist/esm/internal/operators/finalize.js","./node_modules/rxjs/dist/esm/internal/operators/first.js","./node_modules/rxjs/dist/esm/internal/operators/map.js","./node_modules/rxjs/dist/esm/internal/operators/mergeMap.js","./node_modules/rxjs/dist/esm/internal/operators/mergeInternals.js","./node_modules/rxjs/dist/esm/internal/operators/observeOn.js","./node_modules/rxjs/dist/esm/internal/operators/switchMap.js","./node_modules/rxjs/dist/esm/internal/operators/take.js","./node_modules/rxjs/dist/esm/internal/operators/tap.js","./node_modules/rxjs/dist/esm/internal/operators/throwIfEmpty.js","./node_modules/rxjs/dist/esm/internal/util/EmptyError.js","./node_modules/rxjs/dist/esm/internal/util/args.js","./node_modules/rxjs/dist/esm/internal/util/executeSchedule.js","./node_modules/rxjs/dist/esm/internal/util/isScheduler.js","./node_modules/rxjs/dist/esm/internal/util/lift.js","./node_modules/@angular/common/fesm2022/http.mjs","./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","./node_modules/@babel/runtime/helpers/esm/slicedToArray.js","./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js"],"sourcesContent":["import { Observable } from '../Observable';\nexport const EMPTY = new Observable((subscriber) => subscriber.complete());\nexport function empty(scheduler) {\n    return scheduler ? emptyScheduled(scheduler) : EMPTY;\n}\nfunction emptyScheduled(scheduler) {\n    return new Observable((subscriber) => scheduler.schedule(() => subscriber.complete()));\n}\n","import { operate } from '../util/lift';\nexport function subscribeOn(scheduler, delay = 0) {\n    return operate((source, subscriber) => {\n        subscriber.add(scheduler.schedule(() => source.subscribe(subscriber), delay));\n    });\n}\n","import { Observable } from '../Observable';\nimport { executeSchedule } from '../util/executeSchedule';\nexport function scheduleAsyncIterable(input, scheduler) {\n    if (!input) {\n        throw new Error('Iterable cannot be null');\n    }\n    return new Observable((subscriber) => {\n        executeSchedule(subscriber, scheduler, () => {\n            const iterator = input[Symbol.asyncIterator]();\n            executeSchedule(subscriber, scheduler, () => {\n                iterator.next().then((result) => {\n                    if (result.done) {\n                        subscriber.complete();\n                    }\n                    else {\n                        subscriber.next(result.value);\n                    }\n                });\n            }, 0, true);\n        });\n    });\n}\n","import { scheduled } from '../scheduled/scheduled';\nimport { innerFrom } from './innerFrom';\nexport function from(input, scheduler) {\n    return scheduler ? scheduled(input, scheduler) : innerFrom(input);\n}\n","import { scheduleObservable } from './scheduleObservable';\nimport { schedulePromise } from './schedulePromise';\nimport { scheduleArray } from './scheduleArray';\nimport { scheduleIterable } from './scheduleIterable';\nimport { scheduleAsyncIterable } from './scheduleAsyncIterable';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isPromise } from '../util/isPromise';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isIterable } from '../util/isIterable';\nimport { isAsyncIterable } from '../util/isAsyncIterable';\nimport { createInvalidObservableTypeError } from '../util/throwUnobservableError';\nimport { isReadableStreamLike } from '../util/isReadableStreamLike';\nimport { scheduleReadableStreamLike } from './scheduleReadableStreamLike';\nexport function scheduled(input, scheduler) {\n    if (input != null) {\n        if (isInteropObservable(input)) {\n            return scheduleObservable(input, scheduler);\n        }\n        if (isArrayLike(input)) {\n            return scheduleArray(input, scheduler);\n        }\n        if (isPromise(input)) {\n            return schedulePromise(input, scheduler);\n        }\n        if (isAsyncIterable(input)) {\n            return scheduleAsyncIterable(input, scheduler);\n        }\n        if (isIterable(input)) {\n            return scheduleIterable(input, scheduler);\n        }\n        if (isReadableStreamLike(input)) {\n            return scheduleReadableStreamLike(input, scheduler);\n        }\n    }\n    throw createInvalidObservableTypeError(input);\n}\n","import { innerFrom } from '../observable/innerFrom';\nimport { observeOn } from '../operators/observeOn';\nimport { subscribeOn } from '../operators/subscribeOn';\nexport function scheduleObservable(input, scheduler) {\n    return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));\n}\n","import { Observable } from '../Observable';\nexport function scheduleArray(input, scheduler) {\n    return new Observable((subscriber) => {\n        let i = 0;\n        return scheduler.schedule(function () {\n            if (i === input.length) {\n                subscriber.complete();\n            }\n            else {\n                subscriber.next(input[i++]);\n                if (!subscriber.closed) {\n                    this.schedule();\n                }\n            }\n        });\n    });\n}\n","import { innerFrom } from '../observable/innerFrom';\nimport { observeOn } from '../operators/observeOn';\nimport { subscribeOn } from '../operators/subscribeOn';\nexport function schedulePromise(input, scheduler) {\n    return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));\n}\n","import { Observable } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { isFunction } from '../util/isFunction';\nimport { executeSchedule } from '../util/executeSchedule';\nexport function scheduleIterable(input, scheduler) {\n    return new Observable((subscriber) => {\n        let iterator;\n        executeSchedule(subscriber, scheduler, () => {\n            iterator = input[Symbol_iterator]();\n            executeSchedule(subscriber, scheduler, () => {\n                let value;\n                let done;\n                try {\n                    ({ value, done } = iterator.next());\n                }\n                catch (err) {\n                    subscriber.error(err);\n                    return;\n                }\n                if (done) {\n                    subscriber.complete();\n                }\n                else {\n                    subscriber.next(value);\n                }\n            }, 0, true);\n        });\n        return () => isFunction(iterator === null || iterator === void 0 ? void 0 : iterator.return) && iterator.return();\n    });\n}\n","import { scheduleAsyncIterable } from './scheduleAsyncIterable';\nimport { readableStreamLikeToAsyncGenerator } from '../util/isReadableStreamLike';\nexport function scheduleReadableStreamLike(input, scheduler) {\n    return scheduleAsyncIterable(readableStreamLikeToAsyncGenerator(input), scheduler);\n}\n","import { popScheduler } from '../util/args';\nimport { from } from './from';\nexport function of(...args) {\n    const scheduler = popScheduler(args);\n    return from(args, scheduler);\n}\n","import { Subscriber } from '../Subscriber';\nexport function createOperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {\n    return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);\n}\nexport class OperatorSubscriber extends Subscriber {\n    constructor(destination, onNext, onComplete, onError, onFinalize, shouldUnsubscribe) {\n        super(destination);\n        this.onFinalize = onFinalize;\n        this.shouldUnsubscribe = shouldUnsubscribe;\n        this._next = onNext\n            ? function (value) {\n                try {\n                    onNext(value);\n                }\n                catch (err) {\n                    destination.error(err);\n                }\n            }\n            : super._next;\n        this._error = onError\n            ? function (err) {\n                try {\n                    onError(err);\n                }\n                catch (err) {\n                    destination.error(err);\n                }\n                finally {\n                    this.unsubscribe();\n                }\n            }\n            : super._error;\n        this._complete = onComplete\n            ? function () {\n                try {\n                    onComplete();\n                }\n                catch (err) {\n                    destination.error(err);\n                }\n                finally {\n                    this.unsubscribe();\n                }\n            }\n            : super._complete;\n    }\n    unsubscribe() {\n        var _a;\n        if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {\n            const { closed } = this;\n            super.unsubscribe();\n            !closed && ((_a = this.onFinalize) === null || _a === void 0 ? void 0 : _a.call(this));\n        }\n    }\n}\n","import { mergeMap } from './mergeMap';\nimport { isFunction } from '../util/isFunction';\nexport function concatMap(project, resultSelector) {\n    return isFunction(resultSelector) ? mergeMap(project, resultSelector, 1) : mergeMap(project, 1);\n}\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function defaultIfEmpty(defaultValue) {\n    return operate((source, subscriber) => {\n        let hasValue = false;\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            hasValue = true;\n            subscriber.next(value);\n        }, () => {\n            if (!hasValue) {\n                subscriber.next(defaultValue);\n            }\n            subscriber.complete();\n        }));\n    });\n}\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function filter(predicate, thisArg) {\n    return operate((source, subscriber) => {\n        let index = 0;\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => predicate.call(thisArg, value, index++) && subscriber.next(value)));\n    });\n}\n","import { operate } from '../util/lift';\nexport function finalize(callback) {\n    return operate((source, subscriber) => {\n        try {\n            source.subscribe(subscriber);\n        }\n        finally {\n            subscriber.add(callback);\n        }\n    });\n}\n","import { EmptyError } from '../util/EmptyError';\nimport { filter } from './filter';\nimport { take } from './take';\nimport { defaultIfEmpty } from './defaultIfEmpty';\nimport { throwIfEmpty } from './throwIfEmpty';\nimport { identity } from '../util/identity';\nexport function first(predicate, defaultValue) {\n    const hasDefaultValue = arguments.length >= 2;\n    return (source) => source.pipe(predicate ? filter((v, i) => predicate(v, i, source)) : identity, take(1), hasDefaultValue ? defaultIfEmpty(defaultValue) : throwIfEmpty(() => new EmptyError()));\n}\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function map(project, thisArg) {\n    return operate((source, subscriber) => {\n        let index = 0;\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            subscriber.next(project.call(thisArg, value, index++));\n        }));\n    });\n}\n","import { map } from './map';\nimport { innerFrom } from '../observable/innerFrom';\nimport { operate } from '../util/lift';\nimport { mergeInternals } from './mergeInternals';\nimport { isFunction } from '../util/isFunction';\nexport function mergeMap(project, resultSelector, concurrent = Infinity) {\n    if (isFunction(resultSelector)) {\n        return mergeMap((a, i) => map((b, ii) => resultSelector(a, b, i, ii))(innerFrom(project(a, i))), concurrent);\n    }\n    else if (typeof resultSelector === 'number') {\n        concurrent = resultSelector;\n    }\n    return operate((source, subscriber) => mergeInternals(source, subscriber, project, concurrent));\n}\n","import { innerFrom } from '../observable/innerFrom';\nimport { executeSchedule } from '../util/executeSchedule';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function mergeInternals(source, subscriber, project, concurrent, onBeforeNext, expand, innerSubScheduler, additionalFinalizer) {\n    const buffer = [];\n    let active = 0;\n    let index = 0;\n    let isComplete = false;\n    const checkComplete = () => {\n        if (isComplete && !buffer.length && !active) {\n            subscriber.complete();\n        }\n    };\n    const outerNext = (value) => (active < concurrent ? doInnerSub(value) : buffer.push(value));\n    const doInnerSub = (value) => {\n        expand && subscriber.next(value);\n        active++;\n        let innerComplete = false;\n        innerFrom(project(value, index++)).subscribe(createOperatorSubscriber(subscriber, (innerValue) => {\n            onBeforeNext === null || onBeforeNext === void 0 ? void 0 : onBeforeNext(innerValue);\n            if (expand) {\n                outerNext(innerValue);\n            }\n            else {\n                subscriber.next(innerValue);\n            }\n        }, () => {\n            innerComplete = true;\n        }, undefined, () => {\n            if (innerComplete) {\n                try {\n                    active--;\n                    while (buffer.length && active < concurrent) {\n                        const bufferedValue = buffer.shift();\n                        if (innerSubScheduler) {\n                            executeSchedule(subscriber, innerSubScheduler, () => doInnerSub(bufferedValue));\n                        }\n                        else {\n                            doInnerSub(bufferedValue);\n                        }\n                    }\n                    checkComplete();\n                }\n                catch (err) {\n                    subscriber.error(err);\n                }\n            }\n        }));\n    };\n    source.subscribe(createOperatorSubscriber(subscriber, outerNext, () => {\n        isComplete = true;\n        checkComplete();\n    }));\n    return () => {\n        additionalFinalizer === null || additionalFinalizer === void 0 ? void 0 : additionalFinalizer();\n    };\n}\n","import { executeSchedule } from '../util/executeSchedule';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function observeOn(scheduler, delay = 0) {\n    return operate((source, subscriber) => {\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => executeSchedule(subscriber, scheduler, () => subscriber.next(value), delay), () => executeSchedule(subscriber, scheduler, () => subscriber.complete(), delay), (err) => executeSchedule(subscriber, scheduler, () => subscriber.error(err), delay)));\n    });\n}\n","import { innerFrom } from '../observable/innerFrom';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function switchMap(project, resultSelector) {\n    return operate((source, subscriber) => {\n        let innerSubscriber = null;\n        let index = 0;\n        let isComplete = false;\n        const checkComplete = () => isComplete && !innerSubscriber && subscriber.complete();\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            innerSubscriber === null || innerSubscriber === void 0 ? void 0 : innerSubscriber.unsubscribe();\n            let innerIndex = 0;\n            const outerIndex = index++;\n            innerFrom(project(value, outerIndex)).subscribe((innerSubscriber = createOperatorSubscriber(subscriber, (innerValue) => subscriber.next(resultSelector ? resultSelector(value, innerValue, outerIndex, innerIndex++) : innerValue), () => {\n                innerSubscriber = null;\n                checkComplete();\n            })));\n        }, () => {\n            isComplete = true;\n            checkComplete();\n        }));\n    });\n}\n","import { EMPTY } from '../observable/empty';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function take(count) {\n    return count <= 0\n        ?\n            () => EMPTY\n        : operate((source, subscriber) => {\n            let seen = 0;\n            source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n                if (++seen <= count) {\n                    subscriber.next(value);\n                    if (count <= seen) {\n                        subscriber.complete();\n                    }\n                }\n            }));\n        });\n}\n","import { isFunction } from '../util/isFunction';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { identity } from '../util/identity';\nexport function tap(observerOrNext, error, complete) {\n    const tapObserver = isFunction(observerOrNext) || error || complete\n        ?\n            { next: observerOrNext, error, complete }\n        : observerOrNext;\n    return tapObserver\n        ? operate((source, subscriber) => {\n            var _a;\n            (_a = tapObserver.subscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);\n            let isUnsub = true;\n            source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n                var _a;\n                (_a = tapObserver.next) === null || _a === void 0 ? void 0 : _a.call(tapObserver, value);\n                subscriber.next(value);\n            }, () => {\n                var _a;\n                isUnsub = false;\n                (_a = tapObserver.complete) === null || _a === void 0 ? void 0 : _a.call(tapObserver);\n                subscriber.complete();\n            }, (err) => {\n                var _a;\n                isUnsub = false;\n                (_a = tapObserver.error) === null || _a === void 0 ? void 0 : _a.call(tapObserver, err);\n                subscriber.error(err);\n            }, () => {\n                var _a, _b;\n                if (isUnsub) {\n                    (_a = tapObserver.unsubscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);\n                }\n                (_b = tapObserver.finalize) === null || _b === void 0 ? void 0 : _b.call(tapObserver);\n            }));\n        })\n        :\n            identity;\n}\n","import { EmptyError } from '../util/EmptyError';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function throwIfEmpty(errorFactory = defaultErrorFactory) {\n    return operate((source, subscriber) => {\n        let hasValue = false;\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            hasValue = true;\n            subscriber.next(value);\n        }, () => (hasValue ? subscriber.complete() : subscriber.error(errorFactory()))));\n    });\n}\nfunction defaultErrorFactory() {\n    return new EmptyError();\n}\n","import { createErrorClass } from './createErrorClass';\nexport const EmptyError = createErrorClass((_super) => function EmptyErrorImpl() {\n    _super(this);\n    this.name = 'EmptyError';\n    this.message = 'no elements in sequence';\n});\n","import { isFunction } from './isFunction';\nimport { isScheduler } from './isScheduler';\nfunction last(arr) {\n    return arr[arr.length - 1];\n}\nexport function popResultSelector(args) {\n    return isFunction(last(args)) ? args.pop() : undefined;\n}\nexport function popScheduler(args) {\n    return isScheduler(last(args)) ? args.pop() : undefined;\n}\nexport function popNumber(args, defaultValue) {\n    return typeof last(args) === 'number' ? args.pop() : defaultValue;\n}\n","export function executeSchedule(parentSubscription, scheduler, work, delay = 0, repeat = false) {\n    const scheduleSubscription = scheduler.schedule(function () {\n        work();\n        if (repeat) {\n            parentSubscription.add(this.schedule(null, delay));\n        }\n        else {\n            this.unsubscribe();\n        }\n    }, delay);\n    parentSubscription.add(scheduleSubscription);\n    if (!repeat) {\n        return scheduleSubscription;\n    }\n}\n","import { isFunction } from './isFunction';\nexport function isScheduler(value) {\n    return value && isFunction(value.schedule);\n}\n","import { isFunction } from './isFunction';\nexport function hasLift(source) {\n    return isFunction(source === null || source === void 0 ? void 0 : source.lift);\n}\nexport function operate(init) {\n    return (source) => {\n        if (hasLift(source)) {\n            return source.lift(function (liftedSource) {\n                try {\n                    return init(liftedSource, this);\n                }\n                catch (err) {\n                    this.error(err);\n                }\n            });\n        }\n        throw new TypeError('Unable to lift unknown Observable type');\n    };\n}\n","/**\n * @license Angular v16.0.5\n * (c) 2010-2022 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, inject, ɵInitialRenderPendingTasks, Inject, ɵRuntimeError, PLATFORM_ID, makeEnvironmentProviders, NgModule, TransferState, makeStateKey, ɵENABLED_SSR_FEATURES, APP_BOOTSTRAP_LISTENER, ApplicationRef } from '@angular/core';\nimport { of, Observable, from } from 'rxjs';\nimport { concatMap, filter, map, finalize, switchMap, tap, first } from 'rxjs/operators';\nimport * as i1 from '@angular/common';\nimport { DOCUMENT, ɵparseCookieValue } from '@angular/common';\n\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * @publicApi\n */\nclass HttpHandler {\n}\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * @publicApi\n */\nclass HttpBackend {\n}\n\n/**\n * Represents the header configuration options for an HTTP request.\n * Instances are immutable. Modifying methods return a cloned\n * instance with the change. The original object is never changed.\n *\n * @publicApi\n */\nclass HttpHeaders {\n    /**  Constructs a new HTTP header object with the given values.*/\n    constructor(headers) {\n        /**\n         * Internal map of lowercased header names to the normalized\n         * form of the name (the form seen first).\n         */\n        this.normalizedNames = new Map();\n        /**\n         * Queued updates to be materialized the next initialization.\n         */\n        this.lazyUpdate = null;\n        if (!headers) {\n            this.headers = new Map();\n        }\n        else if (typeof headers === 'string') {\n            this.lazyInit = () => {\n                this.headers = new Map();\n                headers.split('\\n').forEach(line => {\n                    const index = line.indexOf(':');\n                    if (index > 0) {\n                        const name = line.slice(0, index);\n                        const key = name.toLowerCase();\n                        const value = line.slice(index + 1).trim();\n                        this.maybeSetNormalizedName(name, key);\n                        if (this.headers.has(key)) {\n                            this.headers.get(key).push(value);\n                        }\n                        else {\n                            this.headers.set(key, [value]);\n                        }\n                    }\n                });\n            };\n        }\n        else {\n            this.lazyInit = () => {\n                if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                    assertValidHeaders(headers);\n                }\n                this.headers = new Map();\n                Object.entries(headers).forEach(([name, values]) => {\n                    let headerValues;\n                    if (typeof values === 'string') {\n                        headerValues = [values];\n                    }\n                    else if (typeof values === 'number') {\n                        headerValues = [values.toString()];\n                    }\n                    else {\n                        headerValues = values.map((value) => value.toString());\n                    }\n                    if (headerValues.length > 0) {\n                        const key = name.toLowerCase();\n                        this.headers.set(key, headerValues);\n                        this.maybeSetNormalizedName(name, key);\n                    }\n                });\n            };\n        }\n    }\n    /**\n     * Checks for existence of a given header.\n     *\n     * @param name The header name to check for existence.\n     *\n     * @returns True if the header exists, false otherwise.\n     */\n    has(name) {\n        this.init();\n        return this.headers.has(name.toLowerCase());\n    }\n    /**\n     * Retrieves the first value of a given header.\n     *\n     * @param name The header name.\n     *\n     * @returns The value string if the header exists, null otherwise\n     */\n    get(name) {\n        this.init();\n        const values = this.headers.get(name.toLowerCase());\n        return values && values.length > 0 ? values[0] : null;\n    }\n    /**\n     * Retrieves the names of the headers.\n     *\n     * @returns A list of header names.\n     */\n    keys() {\n        this.init();\n        return Array.from(this.normalizedNames.values());\n    }\n    /**\n     * Retrieves a list of values for a given header.\n     *\n     * @param name The header name from which to retrieve values.\n     *\n     * @returns A string of values if the header exists, null otherwise.\n     */\n    getAll(name) {\n        this.init();\n        return this.headers.get(name.toLowerCase()) || null;\n    }\n    /**\n     * Appends a new value to the existing set of values for a header\n     * and returns them in a clone of the original instance.\n     *\n     * @param name The header name for which to append the values.\n     * @param value The value to append.\n     *\n     * @returns A clone of the HTTP headers object with the value appended to the given header.\n     */\n    append(name, value) {\n        return this.clone({ name, value, op: 'a' });\n    }\n    /**\n     * Sets or modifies a value for a given header in a clone of the original instance.\n     * If the header already exists, its value is replaced with the given value\n     * in the returned object.\n     *\n     * @param name The header name.\n     * @param value The value or values to set or override for the given header.\n     *\n     * @returns A clone of the HTTP headers object with the newly set header value.\n     */\n    set(name, value) {\n        return this.clone({ name, value, op: 's' });\n    }\n    /**\n     * Deletes values for a given header in a clone of the original instance.\n     *\n     * @param name The header name.\n     * @param value The value or values to delete for the given header.\n     *\n     * @returns A clone of the HTTP headers object with the given value deleted.\n     */\n    delete(name, value) {\n        return this.clone({ name, value, op: 'd' });\n    }\n    maybeSetNormalizedName(name, lcName) {\n        if (!this.normalizedNames.has(lcName)) {\n            this.normalizedNames.set(lcName, name);\n        }\n    }\n    init() {\n        if (!!this.lazyInit) {\n            if (this.lazyInit instanceof HttpHeaders) {\n                this.copyFrom(this.lazyInit);\n            }\n            else {\n                this.lazyInit();\n            }\n            this.lazyInit = null;\n            if (!!this.lazyUpdate) {\n                this.lazyUpdate.forEach(update => this.applyUpdate(update));\n                this.lazyUpdate = null;\n            }\n        }\n    }\n    copyFrom(other) {\n        other.init();\n        Array.from(other.headers.keys()).forEach(key => {\n            this.headers.set(key, other.headers.get(key));\n            this.normalizedNames.set(key, other.normalizedNames.get(key));\n        });\n    }\n    clone(update) {\n        const clone = new HttpHeaders();\n        clone.lazyInit =\n            (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\n        clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n        return clone;\n    }\n    applyUpdate(update) {\n        const key = update.name.toLowerCase();\n        switch (update.op) {\n            case 'a':\n            case 's':\n                let value = update.value;\n                if (typeof value === 'string') {\n                    value = [value];\n                }\n                if (value.length === 0) {\n                    return;\n                }\n                this.maybeSetNormalizedName(update.name, key);\n                const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n                base.push(...value);\n                this.headers.set(key, base);\n                break;\n            case 'd':\n                const toDelete = update.value;\n                if (!toDelete) {\n                    this.headers.delete(key);\n                    this.normalizedNames.delete(key);\n                }\n                else {\n                    let existing = this.headers.get(key);\n                    if (!existing) {\n                        return;\n                    }\n                    existing = existing.filter(value => toDelete.indexOf(value) === -1);\n                    if (existing.length === 0) {\n                        this.headers.delete(key);\n                        this.normalizedNames.delete(key);\n                    }\n                    else {\n                        this.headers.set(key, existing);\n                    }\n                }\n                break;\n        }\n    }\n    /**\n     * @internal\n     */\n    forEach(fn) {\n        this.init();\n        Array.from(this.normalizedNames.keys())\n            .forEach(key => fn(this.normalizedNames.get(key), this.headers.get(key)));\n    }\n}\n/**\n * Verifies that the headers object has the right shape: the values\n * must be either strings, numbers or arrays. Throws an error if an invalid\n * header value is present.\n */\nfunction assertValidHeaders(headers) {\n    for (const [key, value] of Object.entries(headers)) {\n        if (!(typeof value === 'string' || typeof value === 'number') && !Array.isArray(value)) {\n            throw new Error(`Unexpected value of the \\`${key}\\` header provided. ` +\n                `Expecting either a string, a number or an array, but got: \\`${value}\\`.`);\n        }\n    }\n}\n\n/**\n * Provides encoding and decoding of URL parameter and query-string values.\n *\n * Serializes and parses URL parameter keys and values to encode and decode them.\n * If you pass URL query parameters without encoding,\n * the query parameters can be misinterpreted at the receiving end.\n *\n *\n * @publicApi\n */\nclass HttpUrlEncodingCodec {\n    /**\n     * Encodes a key name for a URL parameter or query-string.\n     * @param key The key name.\n     * @returns The encoded key name.\n     */\n    encodeKey(key) {\n        return standardEncoding(key);\n    }\n    /**\n     * Encodes the value of a URL parameter or query-string.\n     * @param value The value.\n     * @returns The encoded value.\n     */\n    encodeValue(value) {\n        return standardEncoding(value);\n    }\n    /**\n     * Decodes an encoded URL parameter or query-string key.\n     * @param key The encoded key name.\n     * @returns The decoded key name.\n     */\n    decodeKey(key) {\n        return decodeURIComponent(key);\n    }\n    /**\n     * Decodes an encoded URL parameter or query-string value.\n     * @param value The encoded value.\n     * @returns The decoded value.\n     */\n    decodeValue(value) {\n        return decodeURIComponent(value);\n    }\n}\nfunction paramParser(rawParams, codec) {\n    const map = new Map();\n    if (rawParams.length > 0) {\n        // The `window.location.search` can be used while creating an instance of the `HttpParams` class\n        // (e.g. `new HttpParams({ fromString: window.location.search })`). The `window.location.search`\n        // may start with the `?` char, so we strip it if it's present.\n        const params = rawParams.replace(/^\\?/, '').split('&');\n        params.forEach((param) => {\n            const eqIdx = param.indexOf('=');\n            const [key, val] = eqIdx == -1 ?\n                [codec.decodeKey(param), ''] :\n                [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\n            const list = map.get(key) || [];\n            list.push(val);\n            map.set(key, list);\n        });\n    }\n    return map;\n}\n/**\n * Encode input string with standard encodeURIComponent and then un-encode specific characters.\n */\nconst STANDARD_ENCODING_REGEX = /%(\\d[a-f0-9])/gi;\nconst STANDARD_ENCODING_REPLACEMENTS = {\n    '40': '@',\n    '3A': ':',\n    '24': '$',\n    '2C': ',',\n    '3B': ';',\n    '3D': '=',\n    '3F': '?',\n    '2F': '/',\n};\nfunction standardEncoding(v) {\n    return encodeURIComponent(v).replace(STANDARD_ENCODING_REGEX, (s, t) => STANDARD_ENCODING_REPLACEMENTS[t] ?? s);\n}\nfunction valueToString(value) {\n    return `${value}`;\n}\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable; all mutation operations return a new instance.\n *\n * @publicApi\n */\nclass HttpParams {\n    constructor(options = {}) {\n        this.updates = null;\n        this.cloneFrom = null;\n        this.encoder = options.encoder || new HttpUrlEncodingCodec();\n        if (!!options.fromString) {\n            if (!!options.fromObject) {\n                throw new Error(`Cannot specify both fromString and fromObject.`);\n            }\n            this.map = paramParser(options.fromString, this.encoder);\n        }\n        else if (!!options.fromObject) {\n            this.map = new Map();\n            Object.keys(options.fromObject).forEach(key => {\n                const value = options.fromObject[key];\n                // convert the values to strings\n                const values = Array.isArray(value) ? value.map(valueToString) : [valueToString(value)];\n                this.map.set(key, values);\n            });\n        }\n        else {\n            this.map = null;\n        }\n    }\n    /**\n     * Reports whether the body includes one or more values for a given parameter.\n     * @param param The parameter name.\n     * @returns True if the parameter has one or more values,\n     * false if it has no value or is not present.\n     */\n    has(param) {\n        this.init();\n        return this.map.has(param);\n    }\n    /**\n     * Retrieves the first value for a parameter.\n     * @param param The parameter name.\n     * @returns The first value of the given parameter,\n     * or `null` if the parameter is not present.\n     */\n    get(param) {\n        this.init();\n        const res = this.map.get(param);\n        return !!res ? res[0] : null;\n    }\n    /**\n     * Retrieves all values for a  parameter.\n     * @param param The parameter name.\n     * @returns All values in a string array,\n     * or `null` if the parameter not present.\n     */\n    getAll(param) {\n        this.init();\n        return this.map.get(param) || null;\n    }\n    /**\n     * Retrieves all the parameters for this body.\n     * @returns The parameter names in a string array.\n     */\n    keys() {\n        this.init();\n        return Array.from(this.map.keys());\n    }\n    /**\n     * Appends a new value to existing values for a parameter.\n     * @param param The parameter name.\n     * @param value The new value to add.\n     * @return A new body with the appended value.\n     */\n    append(param, value) {\n        return this.clone({ param, value, op: 'a' });\n    }\n    /**\n     * Constructs a new body with appended values for the given parameter name.\n     * @param params parameters and values\n     * @return A new body with the new value.\n     */\n    appendAll(params) {\n        const updates = [];\n        Object.keys(params).forEach(param => {\n            const value = params[param];\n            if (Array.isArray(value)) {\n                value.forEach(_value => {\n                    updates.push({ param, value: _value, op: 'a' });\n                });\n            }\n            else {\n                updates.push({ param, value: value, op: 'a' });\n            }\n        });\n        return this.clone(updates);\n    }\n    /**\n     * Replaces the value for a parameter.\n     * @param param The parameter name.\n     * @param value The new value.\n     * @return A new body with the new value.\n     */\n    set(param, value) {\n        return this.clone({ param, value, op: 's' });\n    }\n    /**\n     * Removes a given value or all values from a parameter.\n     * @param param The parameter name.\n     * @param value The value to remove, if provided.\n     * @return A new body with the given value removed, or with all values\n     * removed if no value is specified.\n     */\n    delete(param, value) {\n        return this.clone({ param, value, op: 'd' });\n    }\n    /**\n     * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     */\n    toString() {\n        this.init();\n        return this.keys()\n            .map(key => {\n            const eKey = this.encoder.encodeKey(key);\n            // `a: ['1']` produces `'a=1'`\n            // `b: []` produces `''`\n            // `c: ['1', '2']` produces `'c=1&c=2'`\n            return this.map.get(key).map(value => eKey + '=' + this.encoder.encodeValue(value))\n                .join('&');\n        })\n            // filter out empty values because `b: []` produces `''`\n            // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't\n            .filter(param => param !== '')\n            .join('&');\n    }\n    clone(update) {\n        const clone = new HttpParams({ encoder: this.encoder });\n        clone.cloneFrom = this.cloneFrom || this;\n        clone.updates = (this.updates || []).concat(update);\n        return clone;\n    }\n    init() {\n        if (this.map === null) {\n            this.map = new Map();\n        }\n        if (this.cloneFrom !== null) {\n            this.cloneFrom.init();\n            this.cloneFrom.keys().forEach(key => this.map.set(key, this.cloneFrom.map.get(key)));\n            this.updates.forEach(update => {\n                switch (update.op) {\n                    case 'a':\n                    case 's':\n                        const base = (update.op === 'a' ? this.map.get(update.param) : undefined) || [];\n                        base.push(valueToString(update.value));\n                        this.map.set(update.param, base);\n                        break;\n                    case 'd':\n                        if (update.value !== undefined) {\n                            let base = this.map.get(update.param) || [];\n                            const idx = base.indexOf(valueToString(update.value));\n                            if (idx !== -1) {\n                                base.splice(idx, 1);\n                            }\n                            if (base.length > 0) {\n                                this.map.set(update.param, base);\n                            }\n                            else {\n                                this.map.delete(update.param);\n                            }\n                        }\n                        else {\n                            this.map.delete(update.param);\n                            break;\n                        }\n                }\n            });\n            this.cloneFrom = this.updates = null;\n        }\n    }\n}\n\n/**\n * A token used to manipulate and access values stored in `HttpContext`.\n *\n * @publicApi\n */\nclass HttpContextToken {\n    constructor(defaultValue) {\n        this.defaultValue = defaultValue;\n    }\n}\n/**\n * Http context stores arbitrary user defined values and ensures type safety without\n * actually knowing the types. It is backed by a `Map` and guarantees that keys do not clash.\n *\n * This context is mutable and is shared between cloned requests unless explicitly specified.\n *\n * @usageNotes\n *\n * ### Usage Example\n *\n * ```typescript\n * // inside cache.interceptors.ts\n * export const IS_CACHE_ENABLED = new HttpContextToken<boolean>(() => false);\n *\n * export class CacheInterceptor implements HttpInterceptor {\n *\n *   intercept(req: HttpRequest<any>, delegate: HttpHandler): Observable<HttpEvent<any>> {\n *     if (req.context.get(IS_CACHE_ENABLED) === true) {\n *       return ...;\n *     }\n *     return delegate.handle(req);\n *   }\n * }\n *\n * // inside a service\n *\n * this.httpClient.get('/api/weather', {\n *   context: new HttpContext().set(IS_CACHE_ENABLED, true)\n * }).subscribe(...);\n * ```\n *\n * @publicApi\n */\nclass HttpContext {\n    constructor() {\n        this.map = new Map();\n    }\n    /**\n     * Store a value in the context. If a value is already present it will be overwritten.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     * @param value The value to store.\n     *\n     * @returns A reference to itself for easy chaining.\n     */\n    set(token, value) {\n        this.map.set(token, value);\n        return this;\n    }\n    /**\n     * Retrieve the value associated with the given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns The stored value or default if one is defined.\n     */\n    get(token) {\n        if (!this.map.has(token)) {\n            this.map.set(token, token.defaultValue());\n        }\n        return this.map.get(token);\n    }\n    /**\n     * Delete the value associated with the given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns A reference to itself for easy chaining.\n     */\n    delete(token) {\n        this.map.delete(token);\n        return this;\n    }\n    /**\n     * Checks for existence of a given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns True if the token exists, false otherwise.\n     */\n    has(token) {\n        return this.map.has(token);\n    }\n    /**\n     * @returns a list of tokens currently stored in the context.\n     */\n    keys() {\n        return this.map.keys();\n    }\n}\n\n/**\n * Determine whether the given HTTP method may include a body.\n */\nfunction mightHaveBody(method) {\n    switch (method) {\n        case 'DELETE':\n        case 'GET':\n        case 'HEAD':\n        case 'OPTIONS':\n        case 'JSONP':\n            return false;\n        default:\n            return true;\n    }\n}\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n */\nfunction isArrayBuffer(value) {\n    return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n */\nfunction isBlob(value) {\n    return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n */\nfunction isFormData(value) {\n    return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n/**\n * Safely assert whether the given value is a URLSearchParams instance.\n *\n * In some execution environments URLSearchParams is not defined.\n */\nfunction isUrlSearchParams(value) {\n    return typeof URLSearchParams !== 'undefined' && value instanceof URLSearchParams;\n}\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * @publicApi\n */\nclass HttpRequest {\n    constructor(method, url, third, fourth) {\n        this.url = url;\n        /**\n         * The request body, or `null` if one isn't set.\n         *\n         * Bodies are not enforced to be immutable, as they can include a reference to any\n         * user-defined data type. However, interceptors should take care to preserve\n         * idempotence by treating them as such.\n         */\n        this.body = null;\n        /**\n         * Whether this request should be made in a way that exposes progress events.\n         *\n         * Progress events are expensive (change detection runs on each event) and so\n         * they should only be requested if the consumer intends to monitor them.\n         */\n        this.reportProgress = false;\n        /**\n         * Whether this request should be sent with outgoing credentials (cookies).\n         */\n        this.withCredentials = false;\n        /**\n         * The expected response type of the server.\n         *\n         * This is used to parse the response appropriately before returning it to\n         * the requestee.\n         */\n        this.responseType = 'json';\n        this.method = method.toUpperCase();\n        // Next, need to figure out which argument holds the HttpRequestInit\n        // options, if any.\n        let options;\n        // Check whether a body argument is expected. The only valid way to omit\n        // the body argument is to use a known no-body method like GET.\n        if (mightHaveBody(this.method) || !!fourth) {\n            // Body is the third argument, options are the fourth.\n            this.body = (third !== undefined) ? third : null;\n            options = fourth;\n        }\n        else {\n            // No body required, options are the third argument. The body stays null.\n            options = third;\n        }\n        // If options have been passed, interpret them.\n        if (options) {\n            // Normalize reportProgress and withCredentials.\n            this.reportProgress = !!options.reportProgress;\n            this.withCredentials = !!options.withCredentials;\n            // Override default response type of 'json' if one is provided.\n            if (!!options.responseType) {\n                this.responseType = options.responseType;\n            }\n            // Override headers if they're provided.\n            if (!!options.headers) {\n                this.headers = options.headers;\n            }\n            if (!!options.context) {\n                this.context = options.context;\n            }\n            if (!!options.params) {\n                this.params = options.params;\n            }\n        }\n        // If no headers have been passed in, construct a new HttpHeaders instance.\n        if (!this.headers) {\n            this.headers = new HttpHeaders();\n        }\n        // If no context have been passed in, construct a new HttpContext instance.\n        if (!this.context) {\n            this.context = new HttpContext();\n        }\n        // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n        if (!this.params) {\n            this.params = new HttpParams();\n            this.urlWithParams = url;\n        }\n        else {\n            // Encode the parameters to a string in preparation for inclusion in the URL.\n            const params = this.params.toString();\n            if (params.length === 0) {\n                // No parameters, the visible URL is just the URL given at creation time.\n                this.urlWithParams = url;\n            }\n            else {\n                // Does the URL already have query parameters? Look for '?'.\n                const qIdx = url.indexOf('?');\n                // There are 3 cases to handle:\n                // 1) No existing parameters -> append '?' followed by params.\n                // 2) '?' exists and is followed by existing query string ->\n                //    append '&' followed by params.\n                // 3) '?' exists at the end of the url -> append params directly.\n                // This basically amounts to determining the character, if any, with\n                // which to join the URL and parameters.\n                const sep = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\n                this.urlWithParams = url + sep + params;\n            }\n        }\n    }\n    /**\n     * Transform the free-form body into a serialized format suitable for\n     * transmission to the server.\n     */\n    serializeBody() {\n        // If no body is present, no need to serialize it.\n        if (this.body === null) {\n            return null;\n        }\n        // Check whether the body is already in a serialized form. If so,\n        // it can just be returned directly.\n        if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\n            isUrlSearchParams(this.body) || typeof this.body === 'string') {\n            return this.body;\n        }\n        // Check whether the body is an instance of HttpUrlEncodedParams.\n        if (this.body instanceof HttpParams) {\n            return this.body.toString();\n        }\n        // Check whether the body is an object or array, and serialize with JSON if so.\n        if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\n            Array.isArray(this.body)) {\n            return JSON.stringify(this.body);\n        }\n        // Fall back on toString() for everything else.\n        return this.body.toString();\n    }\n    /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     */\n    detectContentTypeHeader() {\n        // An empty body has no content type.\n        if (this.body === null) {\n            return null;\n        }\n        // FormData bodies rely on the browser's content type assignment.\n        if (isFormData(this.body)) {\n            return null;\n        }\n        // Blobs usually have their own content type. If it doesn't, then\n        // no type can be inferred.\n        if (isBlob(this.body)) {\n            return this.body.type || null;\n        }\n        // Array buffers have unknown contents and thus no type can be inferred.\n        if (isArrayBuffer(this.body)) {\n            return null;\n        }\n        // Technically, strings could be a form of JSON data, but it's safe enough\n        // to assume they're plain strings.\n        if (typeof this.body === 'string') {\n            return 'text/plain';\n        }\n        // `HttpUrlEncodedParams` has its own content-type.\n        if (this.body instanceof HttpParams) {\n            return 'application/x-www-form-urlencoded;charset=UTF-8';\n        }\n        // Arrays, objects, boolean and numbers will be encoded as JSON.\n        if (typeof this.body === 'object' || typeof this.body === 'number' ||\n            typeof this.body === 'boolean') {\n            return 'application/json';\n        }\n        // No type could be inferred.\n        return null;\n    }\n    clone(update = {}) {\n        // For method, url, and responseType, take the current value unless\n        // it is overridden in the update hash.\n        const method = update.method || this.method;\n        const url = update.url || this.url;\n        const responseType = update.responseType || this.responseType;\n        // The body is somewhat special - a `null` value in update.body means\n        // whatever current body is present is being overridden with an empty\n        // body, whereas an `undefined` value in update.body implies no\n        // override.\n        const body = (update.body !== undefined) ? update.body : this.body;\n        // Carefully handle the boolean options to differentiate between\n        // `false` and `undefined` in the update args.\n        const withCredentials = (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\n        const reportProgress = (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\n        // Headers and params may be appended to if `setHeaders` or\n        // `setParams` are used.\n        let headers = update.headers || this.headers;\n        let params = update.params || this.params;\n        // Pass on context if needed\n        const context = update.context ?? this.context;\n        // Check whether the caller has asked to add headers.\n        if (update.setHeaders !== undefined) {\n            // Set every requested header.\n            headers =\n                Object.keys(update.setHeaders)\n                    .reduce((headers, name) => headers.set(name, update.setHeaders[name]), headers);\n        }\n        // Check whether the caller has asked to set params.\n        if (update.setParams) {\n            // Set every requested param.\n            params = Object.keys(update.setParams)\n                .reduce((params, param) => params.set(param, update.setParams[param]), params);\n        }\n        // Finally, construct the new HttpRequest using the pieces from above.\n        return new HttpRequest(method, url, body, {\n            params,\n            headers,\n            context,\n            reportProgress,\n            responseType,\n            withCredentials,\n        });\n    }\n}\n\n/**\n * Type enumeration for the different kinds of `HttpEvent`.\n *\n * @publicApi\n */\nvar HttpEventType;\n(function (HttpEventType) {\n    /**\n     * The request was sent out over the wire.\n     */\n    HttpEventType[HttpEventType[\"Sent\"] = 0] = \"Sent\";\n    /**\n     * An upload progress event was received.\n     */\n    HttpEventType[HttpEventType[\"UploadProgress\"] = 1] = \"UploadProgress\";\n    /**\n     * The response status code and headers were received.\n     */\n    HttpEventType[HttpEventType[\"ResponseHeader\"] = 2] = \"ResponseHeader\";\n    /**\n     * A download progress event was received.\n     */\n    HttpEventType[HttpEventType[\"DownloadProgress\"] = 3] = \"DownloadProgress\";\n    /**\n     * The full response including the body was received.\n     */\n    HttpEventType[HttpEventType[\"Response\"] = 4] = \"Response\";\n    /**\n     * A custom event from an interceptor or a backend.\n     */\n    HttpEventType[HttpEventType[\"User\"] = 5] = \"User\";\n})(HttpEventType || (HttpEventType = {}));\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * @publicApi\n */\nclass HttpResponseBase {\n    /**\n     * Super-constructor for all responses.\n     *\n     * The single parameter accepted is an initialization hash. Any properties\n     * of the response passed there will override the default values.\n     */\n    constructor(init, defaultStatus = 200 /* HttpStatusCode.Ok */, defaultStatusText = 'OK') {\n        // If the hash has values passed, use them to initialize the response.\n        // Otherwise use the default values.\n        this.headers = init.headers || new HttpHeaders();\n        this.status = init.status !== undefined ? init.status : defaultStatus;\n        this.statusText = init.statusText || defaultStatusText;\n        this.url = init.url || null;\n        // Cache the ok value to avoid defining a getter.\n        this.ok = this.status >= 200 && this.status < 300;\n    }\n}\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * @publicApi\n */\nclass HttpHeaderResponse extends HttpResponseBase {\n    /**\n     * Create a new `HttpHeaderResponse` with the given parameters.\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.ResponseHeader;\n    }\n    /**\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\n     * given parameter hash.\n     */\n    clone(update = {}) {\n        // Perform a straightforward initialization of the new HttpHeaderResponse,\n        // overriding the current parameters with new ones if given.\n        return new HttpHeaderResponse({\n            headers: update.headers || this.headers,\n            status: update.status !== undefined ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * @publicApi\n */\nclass HttpResponse extends HttpResponseBase {\n    /**\n     * Construct a new `HttpResponse`.\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.Response;\n        this.body = init.body !== undefined ? init.body : null;\n    }\n    clone(update = {}) {\n        return new HttpResponse({\n            body: (update.body !== undefined) ? update.body : this.body,\n            headers: update.headers || this.headers,\n            status: (update.status !== undefined) ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * @publicApi\n */\nclass HttpErrorResponse extends HttpResponseBase {\n    constructor(init) {\n        // Initialize with a default status of 0 / Unknown Error.\n        super(init, 0, 'Unknown Error');\n        this.name = 'HttpErrorResponse';\n        /**\n         * Errors are never okay, even when the status code is in the 2xx success range.\n         */\n        this.ok = false;\n        // If the response was successful, then this was a parse error. Otherwise, it was\n        // a protocol-level failure of some sort. Either the request failed in transit\n        // or the server returned an unsuccessful status code.\n        if (this.status >= 200 && this.status < 300) {\n            this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\n        }\n        else {\n            this.message = `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${init.statusText}`;\n        }\n        this.error = init.error || null;\n    }\n}\n\n/**\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. This function clones the object and adds the body.\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n */\nfunction addBody(options, body) {\n    return {\n        body,\n        headers: options.headers,\n        context: options.context,\n        observe: options.observe,\n        params: options.params,\n        reportProgress: options.reportProgress,\n        responseType: options.responseType,\n        withCredentials: options.withCredentials,\n    };\n}\n/**\n * Performs HTTP requests.\n * This service is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies based on\n * the signature that is called (mainly the values of `observe` and `responseType`).\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n\n *\n * @usageNotes\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/tour-of-heroes/toh-pt0) application.\n *\n * ### HTTP Request Example\n *\n * ```\n *  // GET heroes whose name contains search term\n * searchHeroes(term: string): observable<Hero[]>{\n *\n *  const params = new HttpParams({fromString: 'name=term'});\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\n * }\n * ```\n *\n * Alternatively, the parameter string can be used without invoking HttpParams\n * by directly joining to the URL.\n * ```\n * this.httpClient.request('GET', this.heroesUrl + '?' + 'name=term', {responseType:'json'});\n * ```\n *\n *\n * ### JSONP Example\n * ```\n * requestJsonp(url, callback = 'callback') {\n *  return this.httpClient.jsonp(this.heroesURL, callback);\n * }\n * ```\n *\n * ### PATCH Example\n * ```\n * // PATCH one of the heroes' name\n * patchHero (id: number, heroName: string): Observable<{}> {\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\n *    .pipe(catchError(this.handleError('patchHero')));\n * }\n * ```\n *\n * @see [HTTP Guide](guide/http)\n * @see [HTTP Request](api/common/http/HttpRequest)\n *\n * @publicApi\n */\nclass HttpClient {\n    constructor(handler) {\n        this.handler = handler;\n    }\n    /**\n     * Constructs an observable for a generic HTTP request that, when subscribed,\n     * fires the request through the chain of registered interceptors and on to the\n     * server.\n     *\n     * You can pass an `HttpRequest` directly as the only parameter. In this case,\n     * the call returns an observable of the raw `HttpEvent` stream.\n     *\n     * Alternatively you can pass an HTTP method as the first parameter,\n     * a URL string as the second, and an options hash containing the request body as the third.\n     * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\n     * type of returned observable.\n     *   * The `responseType` value determines how a successful response body is parsed.\n     *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\n     * object as a type parameter to the call.\n     *\n     * The `observe` value determines the return type, according to what you are interested in\n     * observing.\n     *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\n     * progress events by default.\n     *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\n     * where the `T` parameter depends on the `responseType` and any optionally provided type\n     * parameter.\n     *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\n     *\n     */\n    request(first, url, options = {}) {\n        let req;\n        // First, check whether the primary argument is an instance of `HttpRequest`.\n        if (first instanceof HttpRequest) {\n            // It is. The other arguments must be undefined (per the signatures) and can be\n            // ignored.\n            req = first;\n        }\n        else {\n            // It's a string, so it represents a URL. Construct a request based on it,\n            // and incorporate the remaining arguments (assuming `GET` unless a method is\n            // provided.\n            // Figure out the headers.\n            let headers = undefined;\n            if (options.headers instanceof HttpHeaders) {\n                headers = options.headers;\n            }\n            else {\n                headers = new HttpHeaders(options.headers);\n            }\n            // Sort out parameters.\n            let params = undefined;\n            if (!!options.params) {\n                if (options.params instanceof HttpParams) {\n                    params = options.params;\n                }\n                else {\n                    params = new HttpParams({ fromObject: options.params });\n                }\n            }\n            // Construct the request.\n            req = new HttpRequest(first, url, (options.body !== undefined ? options.body : null), {\n                headers,\n                context: options.context,\n                params,\n                reportProgress: options.reportProgress,\n                // By default, JSON is assumed to be returned for all calls.\n                responseType: options.responseType || 'json',\n                withCredentials: options.withCredentials,\n            });\n        }\n        // Start with an Observable.of() the initial request, and run the handler (which\n        // includes all interceptors) inside a concatMap(). This way, the handler runs\n        // inside an Observable chain, which causes interceptors to be re-run on every\n        // subscription (this also makes retries re-run the handler, including interceptors).\n        const events$ = of(req).pipe(concatMap((req) => this.handler.handle(req)));\n        // If coming via the API signature which accepts a previously constructed HttpRequest,\n        // the only option is to get the event stream. Otherwise, return the event stream if\n        // that is what was requested.\n        if (first instanceof HttpRequest || options.observe === 'events') {\n            return events$;\n        }\n        // The requested stream contains either the full response or the body. In either\n        // case, the first step is to filter the event stream to extract a stream of\n        // responses(s).\n        const res$ = events$.pipe(filter((event) => event instanceof HttpResponse));\n        // Decide which stream to return.\n        switch (options.observe || 'body') {\n            case 'body':\n                // The requested stream is the body. Map the response stream to the response\n                // body. This could be done more simply, but a misbehaving interceptor might\n                // transform the response body into a different format and ignore the requested\n                // responseType. Guard against this by validating that the response is of the\n                // requested type.\n                switch (req.responseType) {\n                    case 'arraybuffer':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is an ArrayBuffer.\n                            if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                                throw new Error('Response is not an ArrayBuffer.');\n                            }\n                            return res.body;\n                        }));\n                    case 'blob':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is a Blob.\n                            if (res.body !== null && !(res.body instanceof Blob)) {\n                                throw new Error('Response is not a Blob.');\n                            }\n                            return res.body;\n                        }));\n                    case 'text':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is a string.\n                            if (res.body !== null && typeof res.body !== 'string') {\n                                throw new Error('Response is not a string.');\n                            }\n                            return res.body;\n                        }));\n                    case 'json':\n                    default:\n                        // No validation needed for JSON responses, as they can be of any type.\n                        return res$.pipe(map((res) => res.body));\n                }\n            case 'response':\n                // The response stream was requested directly, so return it.\n                return res$;\n            default:\n                // Guard against new future observe types being added.\n                throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);\n        }\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `DELETE` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     */\n    delete(url, options = {}) {\n        return this.request('DELETE', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `GET` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     */\n    get(url, options = {}) {\n        return this.request('GET', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `HEAD` request to execute on the server. The `HEAD` method returns\n     * meta information about the resource without transferring the\n     * resource itself. See the individual overloads for\n     * details on the return type.\n     */\n    head(url, options = {}) {\n        return this.request('HEAD', url, options);\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes a request with the special method\n     * `JSONP` to be dispatched via the interceptor pipeline.\n     * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\n     * API endpoints that don't support newer,\n     * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\n     * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\n     * requests even if the API endpoint is not located on the same domain (origin) as the client-side\n     * application making the request.\n     * The endpoint API must support JSONP callback for JSONP requests to work.\n     * The resource API returns the JSON response wrapped in a callback function.\n     * You can pass the callback function name as one of the query parameters.\n     * Note that JSONP requests can only be used with `GET` requests.\n     *\n     * @param url The resource URL.\n     * @param callbackParam The callback function name.\n     *\n     */\n    jsonp(url, callbackParam) {\n        return this.request('JSONP', url, {\n            params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n            observe: 'body',\n            responseType: 'json',\n        });\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes the configured\n     * `OPTIONS` request to execute on the server. This method allows the client\n     * to determine the supported HTTP methods and other capabilities of an endpoint,\n     * without implying a resource action. See the individual overloads for\n     * details on the return type.\n     */\n    options(url, options = {}) {\n        return this.request('OPTIONS', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PATCH` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     */\n    patch(url, body, options = {}) {\n        return this.request('PATCH', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `POST` request to execute on the server. The server responds with the location of\n     * the replaced resource. See the individual overloads for\n     * details on the return type.\n     */\n    post(url, body, options = {}) {\n        return this.request('POST', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\n     * with a new set of values.\n     * See the individual overloads for details on the return type.\n     */\n    put(url, body, options = {}) {\n        return this.request('PUT', url, addBody(options, body));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: HttpClient, deps: [{ token: HttpHandler }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: HttpClient }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: HttpClient, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: HttpHandler }]; } });\n\nfunction interceptorChainEndFn(req, finalHandlerFn) {\n    return finalHandlerFn(req);\n}\n/**\n * Constructs a `ChainedInterceptorFn` which adapts a legacy `HttpInterceptor` to the\n * `ChainedInterceptorFn` interface.\n */\nfunction adaptLegacyInterceptorToChain(chainTailFn, interceptor) {\n    return (initialRequest, finalHandlerFn) => interceptor.intercept(initialRequest, {\n        handle: (downstreamRequest) => chainTailFn(downstreamRequest, finalHandlerFn),\n    });\n}\n/**\n * Constructs a `ChainedInterceptorFn` which wraps and invokes a functional interceptor in the given\n * injector.\n */\nfunction chainedInterceptorFn(chainTailFn, interceptorFn, injector) {\n    // clang-format off\n    return (initialRequest, finalHandlerFn) => injector.runInContext(() => interceptorFn(initialRequest, downstreamRequest => chainTailFn(downstreamRequest, finalHandlerFn)));\n    // clang-format on\n}\n/**\n * A multi-provider token that represents the array of registered\n * `HttpInterceptor` objects.\n *\n * @publicApi\n */\nconst HTTP_INTERCEPTORS = new InjectionToken(ngDevMode ? 'HTTP_INTERCEPTORS' : '');\n/**\n * A multi-provided token of `HttpInterceptorFn`s.\n */\nconst HTTP_INTERCEPTOR_FNS = new InjectionToken(ngDevMode ? 'HTTP_INTERCEPTOR_FNS' : '');\n/**\n * A multi-provided token of `HttpInterceptorFn`s that are only set in root.\n */\nconst HTTP_ROOT_INTERCEPTOR_FNS = new InjectionToken(ngDevMode ? 'HTTP_ROOT_INTERCEPTOR_FNS' : '');\n/**\n * Creates an `HttpInterceptorFn` which lazily initializes an interceptor chain from the legacy\n * class-based interceptors and runs the request through it.\n */\nfunction legacyInterceptorFnFactory() {\n    let chain = null;\n    return (req, handler) => {\n        if (chain === null) {\n            const interceptors = inject(HTTP_INTERCEPTORS, { optional: true }) ?? [];\n            // Note: interceptors are wrapped right-to-left so that final execution order is\n            // left-to-right. That is, if `interceptors` is the array `[a, b, c]`, we want to\n            // produce a chain that is conceptually `c(b(a(end)))`, which we build from the inside\n            // out.\n            chain = interceptors.reduceRight(adaptLegacyInterceptorToChain, interceptorChainEndFn);\n        }\n        const pendingTasks = inject(ɵInitialRenderPendingTasks);\n        const taskId = pendingTasks.add();\n        return chain(req, handler).pipe(finalize(() => pendingTasks.remove(taskId)));\n    };\n}\nclass HttpInterceptorHandler extends HttpHandler {\n    constructor(backend, injector) {\n        super();\n        this.backend = backend;\n        this.injector = injector;\n        this.chain = null;\n        this.pendingTasks = inject(ɵInitialRenderPendingTasks);\n    }\n    handle(initialRequest) {\n        if (this.chain === null) {\n            const dedupedInterceptorFns = Array.from(new Set([\n                ...this.injector.get(HTTP_INTERCEPTOR_FNS),\n                ...this.injector.get(HTTP_ROOT_INTERCEPTOR_FNS, []),\n            ]));\n            // Note: interceptors are wrapped right-to-left so that final execution order is\n            // left-to-right. That is, if `dedupedInterceptorFns` is the array `[a, b, c]`, we want to\n            // produce a chain that is conceptually `c(b(a(end)))`, which we build from the inside\n            // out.\n            this.chain = dedupedInterceptorFns.reduceRight((nextSequencedFn, interceptorFn) => chainedInterceptorFn(nextSequencedFn, interceptorFn, this.injector), interceptorChainEndFn);\n        }\n        const taskId = this.pendingTasks.add();\n        return this.chain(initialRequest, downstreamRequest => this.backend.handle(downstreamRequest))\n            .pipe(finalize(() => this.pendingTasks.remove(taskId)));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: HttpInterceptorHandler, deps: [{ token: HttpBackend }, { token: i0.EnvironmentInjector }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: HttpInterceptorHandler }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: HttpInterceptorHandler, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: HttpBackend }, { type: i0.EnvironmentInjector }]; } });\n\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\nlet nextRequestId = 0;\n/**\n * When a pending <script> is unsubscribed we'll move it to this document, so it won't be\n * executed.\n */\nlet foreignDocument;\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\nconst JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n// Error text given when a request is passed to the JsonpClientBackend that has\n// headers set\nconst JSONP_ERR_HEADERS_NOT_SUPPORTED = 'JSONP requests do not support headers.';\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n */\nclass JsonpCallbackContext {\n}\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n */\nfunction jsonpCallbackContext() {\n    if (typeof window === 'object') {\n        return window;\n    }\n    return {};\n}\n/**\n * Processes an `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n * @see {@link HttpHandler}\n * @see {@link HttpXhrBackend}\n *\n * @publicApi\n */\nclass JsonpClientBackend {\n    constructor(callbackMap, document) {\n        this.callbackMap = callbackMap;\n        this.document = document;\n        /**\n         * A resolved promise that can be used to schedule microtasks in the event handlers.\n         */\n        this.resolvedPromise = Promise.resolve();\n    }\n    /**\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n     */\n    nextCallback() {\n        return `ng_jsonp_callback_${nextRequestId++}`;\n    }\n    /**\n     * Processes a JSONP request and returns an event stream of the results.\n     * @param req The request object.\n     * @returns An observable of the response events.\n     *\n     */\n    handle(req) {\n        // Firstly, check both the method and response type. If either doesn't match\n        // then the request was improperly routed here and cannot be handled.\n        if (req.method !== 'JSONP') {\n            throw new Error(JSONP_ERR_WRONG_METHOD);\n        }\n        else if (req.responseType !== 'json') {\n            throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n        }\n        // Check the request headers. JSONP doesn't support headers and\n        // cannot set any that were supplied.\n        if (req.headers.keys().length > 0) {\n            throw new Error(JSONP_ERR_HEADERS_NOT_SUPPORTED);\n        }\n        // Everything else happens inside the Observable boundary.\n        return new Observable((observer) => {\n            // The first step to make a request is to generate the callback name, and replace the\n            // callback placeholder in the URL with the name. Care has to be taken here to ensure\n            // a trailing &, if matched, gets inserted back into the URL in the correct place.\n            const callback = this.nextCallback();\n            const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);\n            // Construct the <script> tag and point it at the URL.\n            const node = this.document.createElement('script');\n            node.src = url;\n            // A JSONP request requires waiting for multiple callbacks. These variables\n            // are closed over and track state across those callbacks.\n            // The response object, if one has been received, or null otherwise.\n            let body = null;\n            // Whether the response callback has been called.\n            let finished = false;\n            // Set the response callback in this.callbackMap (which will be the window\n            // object in the browser. The script being loaded via the <script> tag will\n            // eventually call this callback.\n            this.callbackMap[callback] = (data) => {\n                // Data has been received from the JSONP script. Firstly, delete this callback.\n                delete this.callbackMap[callback];\n                // Set state to indicate data was received.\n                body = data;\n                finished = true;\n            };\n            // cleanup() is a utility closure that removes the <script> from the page and\n            // the response callback from the window. This logic is used in both the\n            // success, error, and cancellation paths, so it's extracted out for convenience.\n            const cleanup = () => {\n                // Remove the <script> tag if it's still on the page.\n                if (node.parentNode) {\n                    node.parentNode.removeChild(node);\n                }\n                // Remove the response callback from the callbackMap (window object in the\n                // browser).\n                delete this.callbackMap[callback];\n            };\n            // onLoad() is the success callback which runs after the response callback\n            // if the JSONP script loads successfully. The event itself is unimportant.\n            // If something went wrong, onLoad() may run without the response callback\n            // having been invoked.\n            const onLoad = (event) => {\n                // We wrap it in an extra Promise, to ensure the microtask\n                // is scheduled after the loaded endpoint has executed any potential microtask itself,\n                // which is not guaranteed in Internet Explorer and EdgeHTML. See issue #39496\n                this.resolvedPromise.then(() => {\n                    // Cleanup the page.\n                    cleanup();\n                    // Check whether the response callback has run.\n                    if (!finished) {\n                        // It hasn't, something went wrong with the request. Return an error via\n                        // the Observable error path. All JSONP errors have status 0.\n                        observer.error(new HttpErrorResponse({\n                            url,\n                            status: 0,\n                            statusText: 'JSONP Error',\n                            error: new Error(JSONP_ERR_NO_CALLBACK),\n                        }));\n                        return;\n                    }\n                    // Success. body either contains the response body or null if none was\n                    // returned.\n                    observer.next(new HttpResponse({\n                        body,\n                        status: 200 /* HttpStatusCode.Ok */,\n                        statusText: 'OK',\n                        url,\n                    }));\n                    // Complete the stream, the response is over.\n                    observer.complete();\n                });\n            };\n            // onError() is the error callback, which runs if the script returned generates\n            // a Javascript error. It emits the error via the Observable error channel as\n            // a HttpErrorResponse.\n            const onError = (error) => {\n                cleanup();\n                // Wrap the error in a HttpErrorResponse.\n                observer.error(new HttpErrorResponse({\n                    error,\n                    status: 0,\n                    statusText: 'JSONP Error',\n                    url,\n                }));\n            };\n            // Subscribe to both the success (load) and error events on the <script> tag,\n            // and add it to the page.\n            node.addEventListener('load', onLoad);\n            node.addEventListener('error', onError);\n            this.document.body.appendChild(node);\n            // The request has now been successfully sent.\n            observer.next({ type: HttpEventType.Sent });\n            // Cancellation handler.\n            return () => {\n                if (!finished) {\n                    this.removeListeners(node);\n                }\n                // And finally, clean up the page.\n                cleanup();\n            };\n        });\n    }\n    removeListeners(script) {\n        // Issue #34818\n        // Changing <script>'s ownerDocument will prevent it from execution.\n        // https://html.spec.whatwg.org/multipage/scripting.html#execute-the-script-block\n        if (!foreignDocument) {\n            foreignDocument = this.document.implementation.createHTMLDocument();\n        }\n        foreignDocument.adoptNode(script);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: JsonpClientBackend, deps: [{ token: JsonpCallbackContext }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: JsonpClientBackend }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: JsonpClientBackend, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: JsonpCallbackContext }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n/**\n * Identifies requests with the method JSONP and shifts them to the `JsonpClientBackend`.\n */\nfunction jsonpInterceptorFn(req, next) {\n    if (req.method === 'JSONP') {\n        return inject(JsonpClientBackend).handle(req);\n    }\n    // Fall through for normal HTTP requests.\n    return next(req);\n}\n/**\n * Identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * @see {@link HttpInterceptor}\n *\n * @publicApi\n */\nclass JsonpInterceptor {\n    constructor(injector) {\n        this.injector = injector;\n    }\n    /**\n     * Identifies and handles a given JSONP request.\n     * @param initialRequest The outgoing request object to handle.\n     * @param next The next interceptor in the chain, or the backend\n     * if no interceptors remain in the chain.\n     * @returns An observable of the event stream.\n     */\n    intercept(initialRequest, next) {\n        return this.injector.runInContext(() => jsonpInterceptorFn(initialRequest, downstreamRequest => next.handle(downstreamRequest)));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: JsonpInterceptor, deps: [{ token: i0.EnvironmentInjector }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: JsonpInterceptor }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: JsonpInterceptor, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i0.EnvironmentInjector }]; } });\n\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n */\nfunction getResponseUrl(xhr) {\n    if ('responseURL' in xhr && xhr.responseURL) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n/**\n * Uses `XMLHttpRequest` to send requests to a backend server.\n * @see {@link HttpHandler}\n * @see {@link JsonpClientBackend}\n *\n * @publicApi\n */\nclass HttpXhrBackend {\n    constructor(xhrFactory) {\n        this.xhrFactory = xhrFactory;\n    }\n    /**\n     * Processes a request and returns a stream of response events.\n     * @param req The request object.\n     * @returns An observable of the response events.\n     */\n    handle(req) {\n        // Quick check to give a better error message when a user attempts to use\n        // HttpClient.jsonp() without installing the HttpClientJsonpModule\n        if (req.method === 'JSONP') {\n            throw new ɵRuntimeError(-2800 /* RuntimeErrorCode.MISSING_JSONP_MODULE */, (typeof ngDevMode === 'undefined' || ngDevMode) &&\n                `Cannot make a JSONP request without JSONP support. To fix the problem, either add the \\`withJsonpSupport()\\` call (if \\`provideHttpClient()\\` is used) or import the \\`HttpClientJsonpModule\\` in the root NgModule.`);\n        }\n        // Check whether this factory has a special function to load an XHR implementation\n        // for various non-browser environments. We currently limit it to only `ServerXhr`\n        // class, which needs to load an XHR implementation.\n        const xhrFactory = this.xhrFactory;\n        const source = xhrFactory.ɵloadImpl ? from(xhrFactory.ɵloadImpl()) : of(null);\n        return source.pipe(switchMap(() => {\n            // Everything happens on Observable subscription.\n            return new Observable((observer) => {\n                // Start by setting up the XHR object with request method, URL, and withCredentials\n                // flag.\n                const xhr = xhrFactory.build();\n                xhr.open(req.method, req.urlWithParams);\n                if (req.withCredentials) {\n                    xhr.withCredentials = true;\n                }\n                // Add all the requested headers.\n                req.headers.forEach((name, values) => xhr.setRequestHeader(name, values.join(',')));\n                // Add an Accept header if one isn't present already.\n                if (!req.headers.has('Accept')) {\n                    xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n                }\n                // Auto-detect the Content-Type header if one isn't present already.\n                if (!req.headers.has('Content-Type')) {\n                    const detectedType = req.detectContentTypeHeader();\n                    // Sometimes Content-Type detection fails.\n                    if (detectedType !== null) {\n                        xhr.setRequestHeader('Content-Type', detectedType);\n                    }\n                }\n                // Set the responseType if one was requested.\n                if (req.responseType) {\n                    const responseType = req.responseType.toLowerCase();\n                    // JSON responses need to be processed as text. This is because if the server\n                    // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n                    // xhr.response will be null, and xhr.responseText cannot be accessed to\n                    // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n                    // is parsed by first requesting text and then applying JSON.parse.\n                    xhr.responseType = ((responseType !== 'json') ? responseType : 'text');\n                }\n                // Serialize the request body if one is present. If not, this will be set to null.\n                const reqBody = req.serializeBody();\n                // If progress events are enabled, response headers will be delivered\n                // in two events - the HttpHeaderResponse event and the full HttpResponse\n                // event. However, since response headers don't change in between these\n                // two events, it doesn't make sense to parse them twice. So headerResponse\n                // caches the data extracted from the response whenever it's first parsed,\n                // to ensure parsing isn't duplicated.\n                let headerResponse = null;\n                // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n                // state, and memoizes it into headerResponse.\n                const partialFromXhr = () => {\n                    if (headerResponse !== null) {\n                        return headerResponse;\n                    }\n                    const statusText = xhr.statusText || 'OK';\n                    // Parse headers from XMLHttpRequest - this step is lazy.\n                    const headers = new HttpHeaders(xhr.getAllResponseHeaders());\n                    // Read the response URL from the XMLHttpResponse instance and fall back on the\n                    // request URL.\n                    const url = getResponseUrl(xhr) || req.url;\n                    // Construct the HttpHeaderResponse and memoize it.\n                    headerResponse =\n                        new HttpHeaderResponse({ headers, status: xhr.status, statusText, url });\n                    return headerResponse;\n                };\n                // Next, a few closures are defined for the various events which XMLHttpRequest can\n                // emit. This allows them to be unregistered as event listeners later.\n                // First up is the load event, which represents a response being fully available.\n                const onLoad = () => {\n                    // Read response state from the memoized partial data.\n                    let { headers, status, statusText, url } = partialFromXhr();\n                    // The body will be read out if present.\n                    let body = null;\n                    if (status !== 204 /* HttpStatusCode.NoContent */) {\n                        // Use XMLHttpRequest.response if set, responseText otherwise.\n                        body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\n                    }\n                    // Normalize another potential bug (this one comes from CORS).\n                    if (status === 0) {\n                        status = !!body ? 200 /* HttpStatusCode.Ok */ : 0;\n                    }\n                    // ok determines whether the response will be transmitted on the event or\n                    // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n                    // but a successful status code can still result in an error if the user\n                    // asked for JSON data and the body cannot be parsed as such.\n                    let ok = status >= 200 && status < 300;\n                    // Check whether the body needs to be parsed as JSON (in many cases the browser\n                    // will have done that already).\n                    if (req.responseType === 'json' && typeof body === 'string') {\n                        // Save the original body, before attempting XSSI prefix stripping.\n                        const originalBody = body;\n                        body = body.replace(XSSI_PREFIX, '');\n                        try {\n                            // Attempt the parse. If it fails, a parse error should be delivered to the\n                            // user.\n                            body = body !== '' ? JSON.parse(body) : null;\n                        }\n                        catch (error) {\n                            // Since the JSON.parse failed, it's reasonable to assume this might not have\n                            // been a JSON response. Restore the original body (including any XSSI prefix)\n                            // to deliver a better error response.\n                            body = originalBody;\n                            // If this was an error request to begin with, leave it as a string, it\n                            // probably just isn't JSON. Otherwise, deliver the parsing error to the user.\n                            if (ok) {\n                                // Even though the response status was 2xx, this is still an error.\n                                ok = false;\n                                // The parse error contains the text of the body that failed to parse.\n                                body = { error, text: body };\n                            }\n                        }\n                    }\n                    if (ok) {\n                        // A successful response is delivered on the event stream.\n                        observer.next(new HttpResponse({\n                            body,\n                            headers,\n                            status,\n                            statusText,\n                            url: url || undefined,\n                        }));\n                        // The full body has been received and delivered, no further events\n                        // are possible. This request is complete.\n                        observer.complete();\n                    }\n                    else {\n                        // An unsuccessful request is delivered on the error channel.\n                        observer.error(new HttpErrorResponse({\n                            // The error in this case is the response body (error from the server).\n                            error: body,\n                            headers,\n                            status,\n                            statusText,\n                            url: url || undefined,\n                        }));\n                    }\n                };\n                // The onError callback is called when something goes wrong at the network level.\n                // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n                // transmitted on the error channel.\n                const onError = (error) => {\n                    const { url } = partialFromXhr();\n                    const res = new HttpErrorResponse({\n                        error,\n                        status: xhr.status || 0,\n                        statusText: xhr.statusText || 'Unknown Error',\n                        url: url || undefined,\n                    });\n                    observer.error(res);\n                };\n                // The sentHeaders flag tracks whether the HttpResponseHeaders event\n                // has been sent on the stream. This is necessary to track if progress\n                // is enabled since the event will be sent on only the first download\n                // progress event.\n                let sentHeaders = false;\n                // The download progress event handler, which is only registered if\n                // progress events are enabled.\n                const onDownProgress = (event) => {\n                    // Send the HttpResponseHeaders event if it hasn't been sent already.\n                    if (!sentHeaders) {\n                        observer.next(partialFromXhr());\n                        sentHeaders = true;\n                    }\n                    // Start building the download progress event to deliver on the response\n                    // event stream.\n                    let progressEvent = {\n                        type: HttpEventType.DownloadProgress,\n                        loaded: event.loaded,\n                    };\n                    // Set the total number of bytes in the event if it's available.\n                    if (event.lengthComputable) {\n                        progressEvent.total = event.total;\n                    }\n                    // If the request was for text content and a partial response is\n                    // available on XMLHttpRequest, include it in the progress event\n                    // to allow for streaming reads.\n                    if (req.responseType === 'text' && !!xhr.responseText) {\n                        progressEvent.partialText = xhr.responseText;\n                    }\n                    // Finally, fire the event.\n                    observer.next(progressEvent);\n                };\n                // The upload progress event handler, which is only registered if\n                // progress events are enabled.\n                const onUpProgress = (event) => {\n                    // Upload progress events are simpler. Begin building the progress\n                    // event.\n                    let progress = {\n                        type: HttpEventType.UploadProgress,\n                        loaded: event.loaded,\n                    };\n                    // If the total number of bytes being uploaded is available, include\n                    // it.\n                    if (event.lengthComputable) {\n                        progress.total = event.total;\n                    }\n                    // Send the event.\n                    observer.next(progress);\n                };\n                // By default, register for load and error events.\n                xhr.addEventListener('load', onLoad);\n                xhr.addEventListener('error', onError);\n                xhr.addEventListener('timeout', onError);\n                xhr.addEventListener('abort', onError);\n                // Progress events are only enabled if requested.\n                if (req.reportProgress) {\n                    // Download progress is always enabled if requested.\n                    xhr.addEventListener('progress', onDownProgress);\n                    // Upload progress depends on whether there is a body to upload.\n                    if (reqBody !== null && xhr.upload) {\n                        xhr.upload.addEventListener('progress', onUpProgress);\n                    }\n                }\n                // Fire the request, and notify the event stream that it was fired.\n                xhr.send(reqBody);\n                observer.next({ type: HttpEventType.Sent });\n                // This is the return from the Observable function, which is the\n                // request cancellation handler.\n                return () => {\n                    // On a cancellation, remove all registered event listeners.\n                    xhr.removeEventListener('error', onError);\n                    xhr.removeEventListener('abort', onError);\n                    xhr.removeEventListener('load', onLoad);\n                    xhr.removeEventListener('timeout', onError);\n                    if (req.reportProgress) {\n                        xhr.removeEventListener('progress', onDownProgress);\n                        if (reqBody !== null && xhr.upload) {\n                            xhr.upload.removeEventListener('progress', onUpProgress);\n                        }\n                    }\n                    // Finally, abort the in-flight request.\n                    if (xhr.readyState !== xhr.DONE) {\n                        xhr.abort();\n                    }\n                };\n            });\n        }));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: HttpXhrBackend, deps: [{ token: i1.XhrFactory }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: HttpXhrBackend }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: HttpXhrBackend, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1.XhrFactory }]; } });\n\nconst XSRF_ENABLED = new InjectionToken('XSRF_ENABLED');\nconst XSRF_DEFAULT_COOKIE_NAME = 'XSRF-TOKEN';\nconst XSRF_COOKIE_NAME = new InjectionToken('XSRF_COOKIE_NAME', {\n    providedIn: 'root',\n    factory: () => XSRF_DEFAULT_COOKIE_NAME,\n});\nconst XSRF_DEFAULT_HEADER_NAME = 'X-XSRF-TOKEN';\nconst XSRF_HEADER_NAME = new InjectionToken('XSRF_HEADER_NAME', {\n    providedIn: 'root',\n    factory: () => XSRF_DEFAULT_HEADER_NAME,\n});\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * @publicApi\n */\nclass HttpXsrfTokenExtractor {\n}\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\nclass HttpXsrfCookieExtractor {\n    constructor(doc, platform, cookieName) {\n        this.doc = doc;\n        this.platform = platform;\n        this.cookieName = cookieName;\n        this.lastCookieString = '';\n        this.lastToken = null;\n        /**\n         * @internal for testing\n         */\n        this.parseCount = 0;\n    }\n    getToken() {\n        if (this.platform === 'server') {\n            return null;\n        }\n        const cookieString = this.doc.cookie || '';\n        if (cookieString !== this.lastCookieString) {\n            this.parseCount++;\n            this.lastToken = ɵparseCookieValue(cookieString, this.cookieName);\n            this.lastCookieString = cookieString;\n        }\n        return this.lastToken;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: HttpXsrfCookieExtractor, deps: [{ token: DOCUMENT }, { token: PLATFORM_ID }, { token: XSRF_COOKIE_NAME }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: HttpXsrfCookieExtractor }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: HttpXsrfCookieExtractor, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [XSRF_COOKIE_NAME]\n                }] }]; } });\nfunction xsrfInterceptorFn(req, next) {\n    const lcUrl = req.url.toLowerCase();\n    // Skip both non-mutating requests and absolute URLs.\n    // Non-mutating requests don't require a token, and absolute URLs require special handling\n    // anyway as the cookie set\n    // on our origin is not the same as the token expected by another origin.\n    if (!inject(XSRF_ENABLED) || req.method === 'GET' || req.method === 'HEAD' ||\n        lcUrl.startsWith('http://') || lcUrl.startsWith('https://')) {\n        return next(req);\n    }\n    const token = inject(HttpXsrfTokenExtractor).getToken();\n    const headerName = inject(XSRF_HEADER_NAME);\n    // Be careful not to overwrite an existing header of the same name.\n    if (token != null && !req.headers.has(headerName)) {\n        req = req.clone({ headers: req.headers.set(headerName, token) });\n    }\n    return next(req);\n}\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\nclass HttpXsrfInterceptor {\n    constructor(injector) {\n        this.injector = injector;\n    }\n    intercept(initialRequest, next) {\n        return this.injector.runInContext(() => xsrfInterceptorFn(initialRequest, downstreamRequest => next.handle(downstreamRequest)));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: HttpXsrfInterceptor, deps: [{ token: i0.EnvironmentInjector }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: HttpXsrfInterceptor }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: HttpXsrfInterceptor, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i0.EnvironmentInjector }]; } });\n\n/**\n * Identifies a particular kind of `HttpFeature`.\n *\n * @publicApi\n */\nvar HttpFeatureKind;\n(function (HttpFeatureKind) {\n    HttpFeatureKind[HttpFeatureKind[\"Interceptors\"] = 0] = \"Interceptors\";\n    HttpFeatureKind[HttpFeatureKind[\"LegacyInterceptors\"] = 1] = \"LegacyInterceptors\";\n    HttpFeatureKind[HttpFeatureKind[\"CustomXsrfConfiguration\"] = 2] = \"CustomXsrfConfiguration\";\n    HttpFeatureKind[HttpFeatureKind[\"NoXsrfProtection\"] = 3] = \"NoXsrfProtection\";\n    HttpFeatureKind[HttpFeatureKind[\"JsonpSupport\"] = 4] = \"JsonpSupport\";\n    HttpFeatureKind[HttpFeatureKind[\"RequestsMadeViaParent\"] = 5] = \"RequestsMadeViaParent\";\n})(HttpFeatureKind || (HttpFeatureKind = {}));\nfunction makeHttpFeature(kind, providers) {\n    return {\n        ɵkind: kind,\n        ɵproviders: providers,\n    };\n}\n/**\n * Configures Angular's `HttpClient` service to be available for injection.\n *\n * By default, `HttpClient` will be configured for injection with its default options for XSRF\n * protection of outgoing requests. Additional configuration options can be provided by passing\n * feature functions to `provideHttpClient`. For example, HTTP interceptors can be added using the\n * `withInterceptors(...)` feature.\n *\n * @see {@link withInterceptors}\n * @see {@link withInterceptorsFromDi}\n * @see {@link withXsrfConfiguration}\n * @see {@link withNoXsrfProtection}\n * @see {@link withJsonpSupport}\n * @see {@link withRequestsMadeViaParent}\n */\nfunction provideHttpClient(...features) {\n    if (ngDevMode) {\n        const featureKinds = new Set(features.map(f => f.ɵkind));\n        if (featureKinds.has(HttpFeatureKind.NoXsrfProtection) &&\n            featureKinds.has(HttpFeatureKind.CustomXsrfConfiguration)) {\n            throw new Error(ngDevMode ?\n                `Configuration error: found both withXsrfConfiguration() and withNoXsrfProtection() in the same call to provideHttpClient(), which is a contradiction.` :\n                '');\n        }\n    }\n    const providers = [\n        HttpClient,\n        HttpXhrBackend,\n        HttpInterceptorHandler,\n        { provide: HttpHandler, useExisting: HttpInterceptorHandler },\n        { provide: HttpBackend, useExisting: HttpXhrBackend },\n        {\n            provide: HTTP_INTERCEPTOR_FNS,\n            useValue: xsrfInterceptorFn,\n            multi: true,\n        },\n        { provide: XSRF_ENABLED, useValue: true },\n        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n    ];\n    for (const feature of features) {\n        providers.push(...feature.ɵproviders);\n    }\n    return makeEnvironmentProviders(providers);\n}\n/**\n * Adds one or more functional-style HTTP interceptors to the configuration of the `HttpClient`\n * instance.\n *\n * @see {@link HttpInterceptorFn}\n * @see {@link provideHttpClient}\n * @publicApi\n */\nfunction withInterceptors(interceptorFns) {\n    return makeHttpFeature(HttpFeatureKind.Interceptors, interceptorFns.map(interceptorFn => {\n        return {\n            provide: HTTP_INTERCEPTOR_FNS,\n            useValue: interceptorFn,\n            multi: true,\n        };\n    }));\n}\nconst LEGACY_INTERCEPTOR_FN = new InjectionToken('LEGACY_INTERCEPTOR_FN');\n/**\n * Includes class-based interceptors configured using a multi-provider in the current injector into\n * the configured `HttpClient` instance.\n *\n * Prefer `withInterceptors` and functional interceptors instead, as support for DI-provided\n * interceptors may be phased out in a later release.\n *\n * @see {@link HttpInterceptor}\n * @see {@link HTTP_INTERCEPTORS}\n * @see {@link provideHttpClient}\n */\nfunction withInterceptorsFromDi() {\n    // Note: the legacy interceptor function is provided here via an intermediate token\n    // (`LEGACY_INTERCEPTOR_FN`), using a pattern which guarantees that if these providers are\n    // included multiple times, all of the multi-provider entries will have the same instance of the\n    // interceptor function. That way, the `HttpINterceptorHandler` will dedup them and legacy\n    // interceptors will not run multiple times.\n    return makeHttpFeature(HttpFeatureKind.LegacyInterceptors, [\n        {\n            provide: LEGACY_INTERCEPTOR_FN,\n            useFactory: legacyInterceptorFnFactory,\n        },\n        {\n            provide: HTTP_INTERCEPTOR_FNS,\n            useExisting: LEGACY_INTERCEPTOR_FN,\n            multi: true,\n        }\n    ]);\n}\n/**\n * Customizes the XSRF protection for the configuration of the current `HttpClient` instance.\n *\n * This feature is incompatible with the `withNoXsrfProtection` feature.\n *\n * @see {@link provideHttpClient}\n */\nfunction withXsrfConfiguration({ cookieName, headerName }) {\n    const providers = [];\n    if (cookieName !== undefined) {\n        providers.push({ provide: XSRF_COOKIE_NAME, useValue: cookieName });\n    }\n    if (headerName !== undefined) {\n        providers.push({ provide: XSRF_HEADER_NAME, useValue: headerName });\n    }\n    return makeHttpFeature(HttpFeatureKind.CustomXsrfConfiguration, providers);\n}\n/**\n * Disables XSRF protection in the configuration of the current `HttpClient` instance.\n *\n * This feature is incompatible with the `withXsrfConfiguration` feature.\n *\n * @see {@link provideHttpClient}\n */\nfunction withNoXsrfProtection() {\n    return makeHttpFeature(HttpFeatureKind.NoXsrfProtection, [\n        {\n            provide: XSRF_ENABLED,\n            useValue: false,\n        },\n    ]);\n}\n/**\n * Add JSONP support to the configuration of the current `HttpClient` instance.\n *\n * @see {@link provideHttpClient}\n */\nfunction withJsonpSupport() {\n    return makeHttpFeature(HttpFeatureKind.JsonpSupport, [\n        JsonpClientBackend,\n        { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n        { provide: HTTP_INTERCEPTOR_FNS, useValue: jsonpInterceptorFn, multi: true },\n    ]);\n}\n/**\n * Configures the current `HttpClient` instance to make requests via the parent injector's\n * `HttpClient` instead of directly.\n *\n * By default, `provideHttpClient` configures `HttpClient` in its injector to be an independent\n * instance. For example, even if `HttpClient` is configured in the parent injector with\n * one or more interceptors, they will not intercept requests made via this instance.\n *\n * With this option enabled, once the request has passed through the current injector's\n * interceptors, it will be delegated to the parent injector's `HttpClient` chain instead of\n * dispatched directly, and interceptors in the parent configuration will be applied to the request.\n *\n * If there are several `HttpClient` instances in the injector hierarchy, it's possible for\n * `withRequestsMadeViaParent` to be used at multiple levels, which will cause the request to\n * \"bubble up\" until either reaching the root level or an `HttpClient` which was not configured with\n * this option.\n *\n * @see {@link provideHttpClient}\n * @developerPreview\n */\nfunction withRequestsMadeViaParent() {\n    return makeHttpFeature(HttpFeatureKind.RequestsMadeViaParent, [\n        {\n            provide: HttpBackend,\n            useFactory: () => {\n                const handlerFromParent = inject(HttpHandler, { skipSelf: true, optional: true });\n                if (ngDevMode && handlerFromParent === null) {\n                    throw new Error('withRequestsMadeViaParent() can only be used when the parent injector also configures HttpClient');\n                }\n                return handlerFromParent;\n            },\n        },\n    ]);\n}\n\n/**\n * Configures XSRF protection support for outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n * @publicApi\n */\nclass HttpClientXsrfModule {\n    /**\n     * Disable the default XSRF protection.\n     */\n    static disable() {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                withNoXsrfProtection().ɵproviders,\n            ],\n        };\n    }\n    /**\n     * Configure XSRF protection.\n     * @param options An object that can specify either or both\n     * cookie name or header name.\n     * - Cookie name default is `XSRF-TOKEN`.\n     * - Header name default is `X-XSRF-TOKEN`.\n     *\n     */\n    static withOptions(options = {}) {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: withXsrfConfiguration(options).ɵproviders,\n        };\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: HttpClientXsrfModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.5\", ngImport: i0, type: HttpClientXsrfModule }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: HttpClientXsrfModule, providers: [\n            HttpXsrfInterceptor,\n            { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n            { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n            withXsrfConfiguration({\n                cookieName: XSRF_DEFAULT_COOKIE_NAME,\n                headerName: XSRF_DEFAULT_HEADER_NAME,\n            }).ɵproviders,\n            { provide: XSRF_ENABLED, useValue: true },\n        ] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: HttpClientXsrfModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [\n                        HttpXsrfInterceptor,\n                        { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n                        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n                        withXsrfConfiguration({\n                            cookieName: XSRF_DEFAULT_COOKIE_NAME,\n                            headerName: XSRF_DEFAULT_HEADER_NAME,\n                        }).ɵproviders,\n                        { provide: XSRF_ENABLED, useValue: true },\n                    ],\n                }]\n        }] });\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\nclass HttpClientModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: HttpClientModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.5\", ngImport: i0, type: HttpClientModule }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: HttpClientModule, providers: [\n            provideHttpClient(withInterceptorsFromDi()),\n        ] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: HttpClientModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    /**\n                     * Configures the [dependency injector](guide/glossary#injector) where it is imported\n                     * with supporting services for HTTP communications.\n                     */\n                    providers: [\n                        provideHttpClient(withInterceptorsFromDi()),\n                    ],\n                }]\n        }] });\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for JSONP.\n * Without this module, Jsonp requests reach the backend\n * with method JSONP, where they are rejected.\n *\n * @publicApi\n */\nclass HttpClientJsonpModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: HttpClientJsonpModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.5\", ngImport: i0, type: HttpClientJsonpModule }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: HttpClientJsonpModule, providers: [\n            withJsonpSupport().ɵproviders,\n        ] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: HttpClientJsonpModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [\n                        withJsonpSupport().ɵproviders,\n                    ],\n                }]\n        }] });\n\nconst CACHE_STATE = new InjectionToken(ngDevMode ? 'HTTP_TRANSFER_STATE_CACHE_STATE' : '');\n/**\n * A list of allowed HTTP methods to cache.\n */\nconst ALLOWED_METHODS = ['GET', 'HEAD'];\nfunction transferCacheInterceptorFn(req, next) {\n    const { isCacheActive } = inject(CACHE_STATE);\n    // Stop using the cache if the application has stabilized, indicating initial rendering\n    // is complete.\n    if (!isCacheActive || !ALLOWED_METHODS.includes(req.method)) {\n        // Cache is no longer active or method is not HEAD or GET.\n        // Pass the request through.\n        return next(req);\n    }\n    const transferState = inject(TransferState);\n    const storeKey = makeCacheKey(req);\n    const response = transferState.get(storeKey, null);\n    if (response) {\n        // Request found in cache. Respond using it.\n        let body = response.body;\n        switch (response.responseType) {\n            case 'arraybuffer':\n                body = new TextEncoder().encode(response.body).buffer;\n                break;\n            case 'blob':\n                body = new Blob([response.body]);\n                break;\n        }\n        return of(new HttpResponse({\n            body,\n            headers: new HttpHeaders(response.headers),\n            status: response.status,\n            statusText: response.statusText,\n            url: response.url,\n        }));\n    }\n    // Request not found in cache. Make the request and cache it.\n    return next(req).pipe(tap((event) => {\n        if (event instanceof HttpResponse) {\n            transferState.set(storeKey, {\n                body: event.body,\n                headers: getHeadersMap(event.headers),\n                status: event.status,\n                statusText: event.statusText,\n                url: event.url || '',\n                responseType: req.responseType,\n            });\n        }\n    }));\n}\nfunction getHeadersMap(headers) {\n    const headersMap = {};\n    for (const key of headers.keys()) {\n        const values = headers.getAll(key);\n        if (values !== null) {\n            headersMap[key] = values;\n        }\n    }\n    return headersMap;\n}\nfunction makeCacheKey(request) {\n    // make the params encoded same as a url so it's easy to identify\n    const { params, method, responseType, url } = request;\n    const encodedParams = params.keys().sort().map((k) => `${k}=${params.getAll(k)}`).join('&');\n    const key = method + '.' + responseType + '.' + url + '?' + encodedParams;\n    const hash = generateHash(key);\n    return makeStateKey(hash);\n}\n/**\n * A method that returns a hash representation of a string using a variant of DJB2 hash\n * algorithm.\n *\n * This is the same hashing logic that is used to generate component ids.\n */\nfunction generateHash(value) {\n    let hash = 0;\n    for (const char of value) {\n        hash = Math.imul(31, hash) + char.charCodeAt(0) << 0;\n    }\n    // Force positive number hash.\n    // 2147483647 = equivalent of Integer.MAX_VALUE.\n    hash += 2147483647 + 1;\n    return hash.toString();\n}\n/**\n * Returns the DI providers needed to enable HTTP transfer cache.\n *\n * By default, when using server rendering, requests are performed twice: once on the server and\n * other one on the browser.\n *\n * When these providers are added, requests performed on the server are cached and reused during the\n * bootstrapping of the application in the browser thus avoiding duplicate requests and reducing\n * load time.\n *\n */\nfunction withHttpTransferCache() {\n    return [\n        {\n            provide: CACHE_STATE,\n            useFactory: () => {\n                inject(ɵENABLED_SSR_FEATURES).add('httpcache');\n                return { isCacheActive: true };\n            }\n        },\n        {\n            provide: HTTP_ROOT_INTERCEPTOR_FNS,\n            useValue: transferCacheInterceptorFn,\n            multi: true,\n            deps: [TransferState, CACHE_STATE]\n        },\n        {\n            provide: APP_BOOTSTRAP_LISTENER,\n            multi: true,\n            useFactory: () => {\n                const appRef = inject(ApplicationRef);\n                const cacheState = inject(CACHE_STATE);\n                return () => {\n                    appRef.isStable.pipe(first((isStable) => isStable)).toPromise().then(() => {\n                        cacheState.isCacheActive = false;\n                    });\n                };\n            }\n        }\n    ];\n}\n\n// This file is not used to build this module. It is only used during editing\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { HTTP_INTERCEPTORS, HttpBackend, HttpClient, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpContext, HttpContextToken, HttpErrorResponse, HttpEventType, HttpFeatureKind, HttpHandler, HttpHeaderResponse, HttpHeaders, HttpParams, HttpRequest, HttpResponse, HttpResponseBase, HttpUrlEncodingCodec, HttpXhrBackend, HttpXsrfTokenExtractor, JsonpClientBackend, JsonpInterceptor, provideHttpClient, withInterceptors, withInterceptorsFromDi, withJsonpSupport, withNoXsrfProtection, withRequestsMadeViaParent, withXsrfConfiguration, HttpInterceptorHandler as ɵHttpInterceptingHandler, HttpInterceptorHandler as ɵHttpInterceptorHandler, withHttpTransferCache as ɵwithHttpTransferCache };\n","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (null != _i) {\n    var _s,\n      _e,\n      _x,\n      _r,\n      _arr = [],\n      _n = !0,\n      _d = !1;\n    try {\n      if (_x = (_i = _i.call(arr)).next, 0 === i) {\n        if (Object(_i) !== _i) return;\n        _n = !1;\n      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);\n    } catch (err) {\n      _d = !0, _e = err;\n    } finally {\n      try {\n        if (!_n && null != _i[\"return\"] && (_r = _i[\"return\"](), Object(_r) !== _r)) return;\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n}"],"x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34]}