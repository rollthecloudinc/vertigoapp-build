{"version":3,"file":"scripts.ddc73f89d6f243c1.js","mappings":"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","names":["promises","marked","readFile","writeFile","async","help","spawn","import","options","cwd","process","env","setsid","stdio","dirname","resolve","fileURLToPath","__dirname","url","helpText","Promise","res","on","console","log","version","createRequire","pkg","main","argv","files","input","output","string","arg","tokens","opt","getarg","shift","indexOf","split","length","unshift","slice","join","substring","map","ch","concat","camelize","replace","defaults","hasOwnProperty","push","data","getData","getStdin","pop","html","JSON","stringify","lexer","stdout","write","reject","stdin","buff","setEncoding","err","resume","text","_","a","b","toUpperCase","handleError","code","error","path","exit","title","then","catch","_self","window","WorkerGlobalScope","self","Prism","lang","uniqueId","plainTextGrammar","manual","disableWorkerMessageHandler","util","encode","Token","type","content","alias","Array","isArray","o","Object","prototype","toString","call","objId","obj","__id","defineProperty","value","clone","deepClone","visited","id","key","forEach","v","i","getLanguage","element","m","exec","className","toLowerCase","parentElement","setLanguage","language","RegExp","classList","add","currentScript","document","Error","src","stack","scripts","getElementsByTagName","isActive","defaultActivation","no","contains","languages","plain","plaintext","txt","extend","redef","insertBefore","inside","before","insert","root","grammar","ret","token","newToken","old","DFS","this","callback","property","propertyType","plugins","highlightAll","highlightAllUnder","container","selector","hooks","run","elements","apply","querySelectorAll","highlightElement","parent","nodeName","textContent","insertHighlightedCode","highlightedCode","innerHTML","hasAttribute","setAttribute","Worker","worker","filename","onmessage","evt","postMessage","immediateClose","highlight","tokenize","rest","tokenList","LinkedList","addAfter","head","matchGrammar","toArray","list","array","node","next","tail","all","name","callbacks","matchedStr","matchPattern","pattern","pos","lookbehind","lastIndex","match","lookbehindLength","index","startNode","startPos","rematch","patterns","j","cause","patternObj","greedy","global","flags","source","currentNode","reach","str","removeCount","from","to","p","k","matchStr","after","removeFrom","prev","removeRange","nestedRematch","newNode","count","s","e","tag","classes","attributes","aliases","addEventListener","message","parse","close","script","highlightAutomaticallyCallback","readyState","defer","requestAnimationFrame","setTimeout","module","exports","markup","comment","prolog","doctype","punctuation","cdata","namespace","entity","tagName","includedCdataInside","def","attrName","mathml","svg","xml","ssml","atom","rss","css","atrule","rule","keyword","function","important","addInlined","addAttribute","clike","boolean","number","operator","javascript","regex","parameter","constant","hashbang","interpolation","js","Element","matches","msMatchesSelector","webkitMatchesSelector","EXTENSIONS","py","rb","ps1","psm1","sh","bat","h","tex","STATUS_ATTR","STATUS_LOADING","STATUS_LOADED","SELECTOR","pre","appendChild","createElement","getAttribute","extension","autoloader","loadLanguages","loadFile","success","xhr","XMLHttpRequest","open","onreadystatechange","status","responseText","FAILURE_MESSAGE","statusText","send","range","parseRange","start","Number","end","lines","Math","max","min","String","fileHighlight","logged","warn","arguments","json","null","webmanifest","typescript","builtin","decorator","at","generic","ts","t"],"sourceRoot":"webpack:///","sources":["node_modules/marked/bin/marked.js","node_modules/prismjs/prism.js","node_modules/prismjs/components/prism-json.min.js","node_modules/prismjs/components/prism-typescript.min.js","node_modules/prismjs/components/prism-css.min.js"],"sourcesContent":["#!/usr/bin/env node\n\n/**\n * Marked CLI\n * Copyright (c) 2011-2013, Christopher Jeffrey (MIT License)\n */\n\nimport { promises } from 'fs';\nimport { marked } from '../lib/marked.esm.js';\n\nconst { readFile, writeFile } = promises;\n\n/**\n * Man Page\n */\n\nasync function help() {\n  const { spawn } = await import('child_process');\n\n  const options = {\n    cwd: process.cwd(),\n    env: process.env,\n    setsid: false,\n    stdio: 'inherit'\n  };\n\n  const { dirname, resolve } = await import('path');\n  const { fileURLToPath } = await import('url');\n  const __dirname = dirname(fileURLToPath(import.meta.url));\n  const helpText = await readFile(resolve(__dirname, '../man/marked.1.txt'), 'utf8');\n\n  // eslint-disable-next-line promise/param-names\n  await new Promise(res => {\n    spawn('man', [resolve(__dirname, '../man/marked.1')], options)\n      .on('error', () => {\n        console.log(helpText);\n      })\n      .on('close', res);\n  });\n}\n\nasync function version() {\n  const { createRequire } = await import('module');\n  const require = createRequire(import.meta.url);\n  const pkg = require('../package.json');\n  console.log(pkg.version);\n}\n\n/**\n * Main\n */\n\nasync function main(argv) {\n  const files = [];\n  const options = {};\n  let input;\n  let output;\n  let string;\n  let arg;\n  let tokens;\n  let opt;\n\n  function getarg() {\n    let arg = argv.shift();\n\n    if (arg.indexOf('--') === 0) {\n      // e.g. --opt\n      arg = arg.split('=');\n      if (arg.length > 1) {\n        // e.g. --opt=val\n        argv.unshift(arg.slice(1).join('='));\n      }\n      arg = arg[0];\n    } else if (arg[0] === '-') {\n      if (arg.length > 2) {\n        // e.g. -abc\n        argv = arg.substring(1).split('').map(function(ch) {\n          return '-' + ch;\n        }).concat(argv);\n        arg = argv.shift();\n      } else {\n        // e.g. -a\n      }\n    } else {\n      // e.g. foo\n    }\n\n    return arg;\n  }\n\n  while (argv.length) {\n    arg = getarg();\n    switch (arg) {\n      case '-o':\n      case '--output':\n        output = argv.shift();\n        break;\n      case '-i':\n      case '--input':\n        input = argv.shift();\n        break;\n      case '-s':\n      case '--string':\n        string = argv.shift();\n        break;\n      case '-t':\n      case '--tokens':\n        tokens = true;\n        break;\n      case '-h':\n      case '--help':\n        return await help();\n      case '-v':\n      case '--version':\n        return await version();\n      default:\n        if (arg.indexOf('--') === 0) {\n          opt = camelize(arg.replace(/^--(no-)?/, ''));\n          if (!marked.defaults.hasOwnProperty(opt)) {\n            continue;\n          }\n          if (arg.indexOf('--no-') === 0) {\n            options[opt] = typeof marked.defaults[opt] !== 'boolean'\n              ? null\n              : false;\n          } else {\n            options[opt] = typeof marked.defaults[opt] !== 'boolean'\n              ? argv.shift()\n              : true;\n          }\n        } else {\n          files.push(arg);\n        }\n        break;\n    }\n  }\n\n  async function getData() {\n    if (!input) {\n      if (files.length <= 2) {\n        if (string) {\n          return string;\n        }\n        return await getStdin();\n      }\n      input = files.pop();\n    }\n    return await readFile(input, 'utf8');\n  }\n\n  const data = await getData();\n\n  const html = tokens\n    ? JSON.stringify(marked.lexer(data, options), null, 2)\n    : marked(data, options);\n\n  if (output) {\n    return await writeFile(output, html);\n  }\n\n  process.stdout.write(html + '\\n');\n}\n\n/**\n * Helpers\n */\n\nfunction getStdin() {\n  return new Promise((resolve, reject) => {\n    const stdin = process.stdin;\n    let buff = '';\n\n    stdin.setEncoding('utf8');\n\n    stdin.on('data', function(data) {\n      buff += data;\n    });\n\n    stdin.on('error', function(err) {\n      reject(err);\n    });\n\n    stdin.on('end', function() {\n      resolve(buff);\n    });\n\n    stdin.resume();\n  });\n}\n\n/**\n * @param {string} text\n */\nfunction camelize(text) {\n  return text.replace(/(\\w)-(\\w)/g, function(_, a, b) {\n    return a + b.toUpperCase();\n  });\n}\n\nfunction handleError(err) {\n  if (err.code === 'ENOENT') {\n    console.error('marked: output to ' + err.path + ': No such directory');\n    return process.exit(1);\n  }\n  throw err;\n}\n\n/**\n * Expose / Entry Point\n */\n\nprocess.title = 'marked';\nmain(process.argv.slice()).then(code => {\n  process.exit(code || 0);\n}).catch(err => {\n  handleError(err);\n});\n","\n/* **********************************************\n     Begin prism-core.js\n********************************************** */\n\n/// <reference lib=\"WebWorker\"/>\n\nvar _self = (typeof window !== 'undefined')\n\t? window   // if in browser\n\t: (\n\t\t(typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope)\n\t\t\t? self // if in worker\n\t\t\t: {}   // if in node js\n\t);\n\n/**\n * Prism: Lightweight, robust, elegant syntax highlighting\n *\n * @license MIT <https://opensource.org/licenses/MIT>\n * @author Lea Verou <https://lea.verou.me>\n * @namespace\n * @public\n */\nvar Prism = (function (_self) {\n\n\t// Private helper vars\n\tvar lang = /(?:^|\\s)lang(?:uage)?-([\\w-]+)(?=\\s|$)/i;\n\tvar uniqueId = 0;\n\n\t// The grammar object for plaintext\n\tvar plainTextGrammar = {};\n\n\n\tvar _ = {\n\t\t/**\n\t\t * By default, Prism will attempt to highlight all code elements (by calling {@link Prism.highlightAll}) on the\n\t\t * current page after the page finished loading. This might be a problem if e.g. you wanted to asynchronously load\n\t\t * additional languages or plugins yourself.\n\t\t *\n\t\t * By setting this value to `true`, Prism will not automatically highlight all code elements on the page.\n\t\t *\n\t\t * You obviously have to change this value before the automatic highlighting started. To do this, you can add an\n\t\t * empty Prism object into the global scope before loading the Prism script like this:\n\t\t *\n\t\t * ```js\n\t\t * window.Prism = window.Prism || {};\n\t\t * Prism.manual = true;\n\t\t * // add a new <script> to load Prism's script\n\t\t * ```\n\t\t *\n\t\t * @default false\n\t\t * @type {boolean}\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\tmanual: _self.Prism && _self.Prism.manual,\n\t\t/**\n\t\t * By default, if Prism is in a web worker, it assumes that it is in a worker it created itself, so it uses\n\t\t * `addEventListener` to communicate with its parent instance. However, if you're using Prism manually in your\n\t\t * own worker, you don't want it to do this.\n\t\t *\n\t\t * By setting this value to `true`, Prism will not add its own listeners to the worker.\n\t\t *\n\t\t * You obviously have to change this value before Prism executes. To do this, you can add an\n\t\t * empty Prism object into the global scope before loading the Prism script like this:\n\t\t *\n\t\t * ```js\n\t\t * window.Prism = window.Prism || {};\n\t\t * Prism.disableWorkerMessageHandler = true;\n\t\t * // Load Prism's script\n\t\t * ```\n\t\t *\n\t\t * @default false\n\t\t * @type {boolean}\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\tdisableWorkerMessageHandler: _self.Prism && _self.Prism.disableWorkerMessageHandler,\n\n\t\t/**\n\t\t * A namespace for utility methods.\n\t\t *\n\t\t * All function in this namespace that are not explicitly marked as _public_ are for __internal use only__ and may\n\t\t * change or disappear at any time.\n\t\t *\n\t\t * @namespace\n\t\t * @memberof Prism\n\t\t */\n\t\tutil: {\n\t\t\tencode: function encode(tokens) {\n\t\t\t\tif (tokens instanceof Token) {\n\t\t\t\t\treturn new Token(tokens.type, encode(tokens.content), tokens.alias);\n\t\t\t\t} else if (Array.isArray(tokens)) {\n\t\t\t\t\treturn tokens.map(encode);\n\t\t\t\t} else {\n\t\t\t\t\treturn tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\\u00a0/g, ' ');\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns the name of the type of the given value.\n\t\t\t *\n\t\t\t * @param {any} o\n\t\t\t * @returns {string}\n\t\t\t * @example\n\t\t\t * type(null)      === 'Null'\n\t\t\t * type(undefined) === 'Undefined'\n\t\t\t * type(123)       === 'Number'\n\t\t\t * type('foo')     === 'String'\n\t\t\t * type(true)      === 'Boolean'\n\t\t\t * type([1, 2])    === 'Array'\n\t\t\t * type({})        === 'Object'\n\t\t\t * type(String)    === 'Function'\n\t\t\t * type(/abc+/)    === 'RegExp'\n\t\t\t */\n\t\t\ttype: function (o) {\n\t\t\t\treturn Object.prototype.toString.call(o).slice(8, -1);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns a unique number for the given object. Later calls will still return the same number.\n\t\t\t *\n\t\t\t * @param {Object} obj\n\t\t\t * @returns {number}\n\t\t\t */\n\t\t\tobjId: function (obj) {\n\t\t\t\tif (!obj['__id']) {\n\t\t\t\t\tObject.defineProperty(obj, '__id', { value: ++uniqueId });\n\t\t\t\t}\n\t\t\t\treturn obj['__id'];\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Creates a deep clone of the given object.\n\t\t\t *\n\t\t\t * The main intended use of this function is to clone language definitions.\n\t\t\t *\n\t\t\t * @param {T} o\n\t\t\t * @param {Record<number, any>} [visited]\n\t\t\t * @returns {T}\n\t\t\t * @template T\n\t\t\t */\n\t\t\tclone: function deepClone(o, visited) {\n\t\t\t\tvisited = visited || {};\n\n\t\t\t\tvar clone; var id;\n\t\t\t\tswitch (_.util.type(o)) {\n\t\t\t\t\tcase 'Object':\n\t\t\t\t\t\tid = _.util.objId(o);\n\t\t\t\t\t\tif (visited[id]) {\n\t\t\t\t\t\t\treturn visited[id];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tclone = /** @type {Record<string, any>} */ ({});\n\t\t\t\t\t\tvisited[id] = clone;\n\n\t\t\t\t\t\tfor (var key in o) {\n\t\t\t\t\t\t\tif (o.hasOwnProperty(key)) {\n\t\t\t\t\t\t\t\tclone[key] = deepClone(o[key], visited);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn /** @type {any} */ (clone);\n\n\t\t\t\t\tcase 'Array':\n\t\t\t\t\t\tid = _.util.objId(o);\n\t\t\t\t\t\tif (visited[id]) {\n\t\t\t\t\t\t\treturn visited[id];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tclone = [];\n\t\t\t\t\t\tvisited[id] = clone;\n\n\t\t\t\t\t\t(/** @type {Array} */(/** @type {any} */(o))).forEach(function (v, i) {\n\t\t\t\t\t\t\tclone[i] = deepClone(v, visited);\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn /** @type {any} */ (clone);\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn o;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns the Prism language of the given element set by a `language-xxxx` or `lang-xxxx` class.\n\t\t\t *\n\t\t\t * If no language is set for the element or the element is `null` or `undefined`, `none` will be returned.\n\t\t\t *\n\t\t\t * @param {Element} element\n\t\t\t * @returns {string}\n\t\t\t */\n\t\t\tgetLanguage: function (element) {\n\t\t\t\twhile (element) {\n\t\t\t\t\tvar m = lang.exec(element.className);\n\t\t\t\t\tif (m) {\n\t\t\t\t\t\treturn m[1].toLowerCase();\n\t\t\t\t\t}\n\t\t\t\t\telement = element.parentElement;\n\t\t\t\t}\n\t\t\t\treturn 'none';\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Sets the Prism `language-xxxx` class of the given element.\n\t\t\t *\n\t\t\t * @param {Element} element\n\t\t\t * @param {string} language\n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\tsetLanguage: function (element, language) {\n\t\t\t\t// remove all `language-xxxx` classes\n\t\t\t\t// (this might leave behind a leading space)\n\t\t\t\telement.className = element.className.replace(RegExp(lang, 'gi'), '');\n\n\t\t\t\t// add the new `language-xxxx` class\n\t\t\t\t// (using `classList` will automatically clean up spaces for us)\n\t\t\t\telement.classList.add('language-' + language);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns the script element that is currently executing.\n\t\t\t *\n\t\t\t * This does __not__ work for line script element.\n\t\t\t *\n\t\t\t * @returns {HTMLScriptElement | null}\n\t\t\t */\n\t\t\tcurrentScript: function () {\n\t\t\t\tif (typeof document === 'undefined') {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tif ('currentScript' in document && 1 < 2 /* hack to trip TS' flow analysis */) {\n\t\t\t\t\treturn /** @type {any} */ (document.currentScript);\n\t\t\t\t}\n\n\t\t\t\t// IE11 workaround\n\t\t\t\t// we'll get the src of the current script by parsing IE11's error stack trace\n\t\t\t\t// this will not work for inline scripts\n\n\t\t\t\ttry {\n\t\t\t\t\tthrow new Error();\n\t\t\t\t} catch (err) {\n\t\t\t\t\t// Get file src url from stack. Specifically works with the format of stack traces in IE.\n\t\t\t\t\t// A stack will look like this:\n\t\t\t\t\t//\n\t\t\t\t\t// Error\n\t\t\t\t\t//    at _.util.currentScript (http://localhost/components/prism-core.js:119:5)\n\t\t\t\t\t//    at Global code (http://localhost/components/prism-core.js:606:1)\n\n\t\t\t\t\tvar src = (/at [^(\\r\\n]*\\((.*):[^:]+:[^:]+\\)$/i.exec(err.stack) || [])[1];\n\t\t\t\t\tif (src) {\n\t\t\t\t\t\tvar scripts = document.getElementsByTagName('script');\n\t\t\t\t\t\tfor (var i in scripts) {\n\t\t\t\t\t\t\tif (scripts[i].src == src) {\n\t\t\t\t\t\t\t\treturn scripts[i];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns whether a given class is active for `element`.\n\t\t\t *\n\t\t\t * The class can be activated if `element` or one of its ancestors has the given class and it can be deactivated\n\t\t\t * if `element` or one of its ancestors has the negated version of the given class. The _negated version_ of the\n\t\t\t * given class is just the given class with a `no-` prefix.\n\t\t\t *\n\t\t\t * Whether the class is active is determined by the closest ancestor of `element` (where `element` itself is\n\t\t\t * closest ancestor) that has the given class or the negated version of it. If neither `element` nor any of its\n\t\t\t * ancestors have the given class or the negated version of it, then the default activation will be returned.\n\t\t\t *\n\t\t\t * In the paradoxical situation where the closest ancestor contains __both__ the given class and the negated\n\t\t\t * version of it, the class is considered active.\n\t\t\t *\n\t\t\t * @param {Element} element\n\t\t\t * @param {string} className\n\t\t\t * @param {boolean} [defaultActivation=false]\n\t\t\t * @returns {boolean}\n\t\t\t */\n\t\t\tisActive: function (element, className, defaultActivation) {\n\t\t\t\tvar no = 'no-' + className;\n\n\t\t\t\twhile (element) {\n\t\t\t\t\tvar classList = element.classList;\n\t\t\t\t\tif (classList.contains(className)) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tif (classList.contains(no)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\telement = element.parentElement;\n\t\t\t\t}\n\t\t\t\treturn !!defaultActivation;\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * This namespace contains all currently loaded languages and the some helper functions to create and modify languages.\n\t\t *\n\t\t * @namespace\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\tlanguages: {\n\t\t\t/**\n\t\t\t * The grammar for plain, unformatted text.\n\t\t\t */\n\t\t\tplain: plainTextGrammar,\n\t\t\tplaintext: plainTextGrammar,\n\t\t\ttext: plainTextGrammar,\n\t\t\ttxt: plainTextGrammar,\n\n\t\t\t/**\n\t\t\t * Creates a deep copy of the language with the given id and appends the given tokens.\n\t\t\t *\n\t\t\t * If a token in `redef` also appears in the copied language, then the existing token in the copied language\n\t\t\t * will be overwritten at its original position.\n\t\t\t *\n\t\t\t * ## Best practices\n\t\t\t *\n\t\t\t * Since the position of overwriting tokens (token in `redef` that overwrite tokens in the copied language)\n\t\t\t * doesn't matter, they can technically be in any order. However, this can be confusing to others that trying to\n\t\t\t * understand the language definition because, normally, the order of tokens matters in Prism grammars.\n\t\t\t *\n\t\t\t * Therefore, it is encouraged to order overwriting tokens according to the positions of the overwritten tokens.\n\t\t\t * Furthermore, all non-overwriting tokens should be placed after the overwriting ones.\n\t\t\t *\n\t\t\t * @param {string} id The id of the language to extend. This has to be a key in `Prism.languages`.\n\t\t\t * @param {Grammar} redef The new tokens to append.\n\t\t\t * @returns {Grammar} The new language created.\n\t\t\t * @public\n\t\t\t * @example\n\t\t\t * Prism.languages['css-with-colors'] = Prism.languages.extend('css', {\n\t\t\t *     // Prism.languages.css already has a 'comment' token, so this token will overwrite CSS' 'comment' token\n\t\t\t *     // at its original position\n\t\t\t *     'comment': { ... },\n\t\t\t *     // CSS doesn't have a 'color' token, so this token will be appended\n\t\t\t *     'color': /\\b(?:red|green|blue)\\b/\n\t\t\t * });\n\t\t\t */\n\t\t\textend: function (id, redef) {\n\t\t\t\tvar lang = _.util.clone(_.languages[id]);\n\n\t\t\t\tfor (var key in redef) {\n\t\t\t\t\tlang[key] = redef[key];\n\t\t\t\t}\n\n\t\t\t\treturn lang;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Inserts tokens _before_ another token in a language definition or any other grammar.\n\t\t\t *\n\t\t\t * ## Usage\n\t\t\t *\n\t\t\t * This helper method makes it easy to modify existing languages. For example, the CSS language definition\n\t\t\t * not only defines CSS highlighting for CSS documents, but also needs to define highlighting for CSS embedded\n\t\t\t * in HTML through `<style>` elements. To do this, it needs to modify `Prism.languages.markup` and add the\n\t\t\t * appropriate tokens. However, `Prism.languages.markup` is a regular JavaScript object literal, so if you do\n\t\t\t * this:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * Prism.languages.markup.style = {\n\t\t\t *     // token\n\t\t\t * };\n\t\t\t * ```\n\t\t\t *\n\t\t\t * then the `style` token will be added (and processed) at the end. `insertBefore` allows you to insert tokens\n\t\t\t * before existing tokens. For the CSS example above, you would use it like this:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * Prism.languages.insertBefore('markup', 'cdata', {\n\t\t\t *     'style': {\n\t\t\t *         // token\n\t\t\t *     }\n\t\t\t * });\n\t\t\t * ```\n\t\t\t *\n\t\t\t * ## Special cases\n\t\t\t *\n\t\t\t * If the grammars of `inside` and `insert` have tokens with the same name, the tokens in `inside`'s grammar\n\t\t\t * will be ignored.\n\t\t\t *\n\t\t\t * This behavior can be used to insert tokens after `before`:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * Prism.languages.insertBefore('markup', 'comment', {\n\t\t\t *     'comment': Prism.languages.markup.comment,\n\t\t\t *     // tokens after 'comment'\n\t\t\t * });\n\t\t\t * ```\n\t\t\t *\n\t\t\t * ## Limitations\n\t\t\t *\n\t\t\t * The main problem `insertBefore` has to solve is iteration order. Since ES2015, the iteration order for object\n\t\t\t * properties is guaranteed to be the insertion order (except for integer keys) but some browsers behave\n\t\t\t * differently when keys are deleted and re-inserted. So `insertBefore` can't be implemented by temporarily\n\t\t\t * deleting properties which is necessary to insert at arbitrary positions.\n\t\t\t *\n\t\t\t * To solve this problem, `insertBefore` doesn't actually insert the given tokens into the target object.\n\t\t\t * Instead, it will create a new object and replace all references to the target object with the new one. This\n\t\t\t * can be done without temporarily deleting properties, so the iteration order is well-defined.\n\t\t\t *\n\t\t\t * However, only references that can be reached from `Prism.languages` or `insert` will be replaced. I.e. if\n\t\t\t * you hold the target object in a variable, then the value of the variable will not change.\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * var oldMarkup = Prism.languages.markup;\n\t\t\t * var newMarkup = Prism.languages.insertBefore('markup', 'comment', { ... });\n\t\t\t *\n\t\t\t * assert(oldMarkup !== Prism.languages.markup);\n\t\t\t * assert(newMarkup === Prism.languages.markup);\n\t\t\t * ```\n\t\t\t *\n\t\t\t * @param {string} inside The property of `root` (e.g. a language id in `Prism.languages`) that contains the\n\t\t\t * object to be modified.\n\t\t\t * @param {string} before The key to insert before.\n\t\t\t * @param {Grammar} insert An object containing the key-value pairs to be inserted.\n\t\t\t * @param {Object<string, any>} [root] The object containing `inside`, i.e. the object that contains the\n\t\t\t * object to be modified.\n\t\t\t *\n\t\t\t * Defaults to `Prism.languages`.\n\t\t\t * @returns {Grammar} The new grammar object.\n\t\t\t * @public\n\t\t\t */\n\t\t\tinsertBefore: function (inside, before, insert, root) {\n\t\t\t\troot = root || /** @type {any} */ (_.languages);\n\t\t\t\tvar grammar = root[inside];\n\t\t\t\t/** @type {Grammar} */\n\t\t\t\tvar ret = {};\n\n\t\t\t\tfor (var token in grammar) {\n\t\t\t\t\tif (grammar.hasOwnProperty(token)) {\n\n\t\t\t\t\t\tif (token == before) {\n\t\t\t\t\t\t\tfor (var newToken in insert) {\n\t\t\t\t\t\t\t\tif (insert.hasOwnProperty(newToken)) {\n\t\t\t\t\t\t\t\t\tret[newToken] = insert[newToken];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Do not insert token which also occur in insert. See #1525\n\t\t\t\t\t\tif (!insert.hasOwnProperty(token)) {\n\t\t\t\t\t\t\tret[token] = grammar[token];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar old = root[inside];\n\t\t\t\troot[inside] = ret;\n\n\t\t\t\t// Update references in other language definitions\n\t\t\t\t_.languages.DFS(_.languages, function (key, value) {\n\t\t\t\t\tif (value === old && key != inside) {\n\t\t\t\t\t\tthis[key] = ret;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\treturn ret;\n\t\t\t},\n\n\t\t\t// Traverse a language definition with Depth First Search\n\t\t\tDFS: function DFS(o, callback, type, visited) {\n\t\t\t\tvisited = visited || {};\n\n\t\t\t\tvar objId = _.util.objId;\n\n\t\t\t\tfor (var i in o) {\n\t\t\t\t\tif (o.hasOwnProperty(i)) {\n\t\t\t\t\t\tcallback.call(o, i, o[i], type || i);\n\n\t\t\t\t\t\tvar property = o[i];\n\t\t\t\t\t\tvar propertyType = _.util.type(property);\n\n\t\t\t\t\t\tif (propertyType === 'Object' && !visited[objId(property)]) {\n\t\t\t\t\t\t\tvisited[objId(property)] = true;\n\t\t\t\t\t\t\tDFS(property, callback, null, visited);\n\t\t\t\t\t\t} else if (propertyType === 'Array' && !visited[objId(property)]) {\n\t\t\t\t\t\t\tvisited[objId(property)] = true;\n\t\t\t\t\t\t\tDFS(property, callback, i, visited);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tplugins: {},\n\n\t\t/**\n\t\t * This is the most high-level function in Prism’s API.\n\t\t * It fetches all the elements that have a `.language-xxxx` class and then calls {@link Prism.highlightElement} on\n\t\t * each one of them.\n\t\t *\n\t\t * This is equivalent to `Prism.highlightAllUnder(document, async, callback)`.\n\t\t *\n\t\t * @param {boolean} [async=false] Same as in {@link Prism.highlightAllUnder}.\n\t\t * @param {HighlightCallback} [callback] Same as in {@link Prism.highlightAllUnder}.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\thighlightAll: function (async, callback) {\n\t\t\t_.highlightAllUnder(document, async, callback);\n\t\t},\n\n\t\t/**\n\t\t * Fetches all the descendants of `container` that have a `.language-xxxx` class and then calls\n\t\t * {@link Prism.highlightElement} on each one of them.\n\t\t *\n\t\t * The following hooks will be run:\n\t\t * 1. `before-highlightall`\n\t\t * 2. `before-all-elements-highlight`\n\t\t * 3. All hooks of {@link Prism.highlightElement} for each element.\n\t\t *\n\t\t * @param {ParentNode} container The root element, whose descendants that have a `.language-xxxx` class will be highlighted.\n\t\t * @param {boolean} [async=false] Whether each element is to be highlighted asynchronously using Web Workers.\n\t\t * @param {HighlightCallback} [callback] An optional callback to be invoked on each element after its highlighting is done.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\thighlightAllUnder: function (container, async, callback) {\n\t\t\tvar env = {\n\t\t\t\tcallback: callback,\n\t\t\t\tcontainer: container,\n\t\t\t\tselector: 'code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code'\n\t\t\t};\n\n\t\t\t_.hooks.run('before-highlightall', env);\n\n\t\t\tenv.elements = Array.prototype.slice.apply(env.container.querySelectorAll(env.selector));\n\n\t\t\t_.hooks.run('before-all-elements-highlight', env);\n\n\t\t\tfor (var i = 0, element; (element = env.elements[i++]);) {\n\t\t\t\t_.highlightElement(element, async === true, env.callback);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Highlights the code inside a single element.\n\t\t *\n\t\t * The following hooks will be run:\n\t\t * 1. `before-sanity-check`\n\t\t * 2. `before-highlight`\n\t\t * 3. All hooks of {@link Prism.highlight}. These hooks will be run by an asynchronous worker if `async` is `true`.\n\t\t * 4. `before-insert`\n\t\t * 5. `after-highlight`\n\t\t * 6. `complete`\n\t\t *\n\t\t * Some the above hooks will be skipped if the element doesn't contain any text or there is no grammar loaded for\n\t\t * the element's language.\n\t\t *\n\t\t * @param {Element} element The element containing the code.\n\t\t * It must have a class of `language-xxxx` to be processed, where `xxxx` is a valid language identifier.\n\t\t * @param {boolean} [async=false] Whether the element is to be highlighted asynchronously using Web Workers\n\t\t * to improve performance and avoid blocking the UI when highlighting very large chunks of code. This option is\n\t\t * [disabled by default](https://prismjs.com/faq.html#why-is-asynchronous-highlighting-disabled-by-default).\n\t\t *\n\t\t * Note: All language definitions required to highlight the code must be included in the main `prism.js` file for\n\t\t * asynchronous highlighting to work. You can build your own bundle on the\n\t\t * [Download page](https://prismjs.com/download.html).\n\t\t * @param {HighlightCallback} [callback] An optional callback to be invoked after the highlighting is done.\n\t\t * Mostly useful when `async` is `true`, since in that case, the highlighting is done asynchronously.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\thighlightElement: function (element, async, callback) {\n\t\t\t// Find language\n\t\t\tvar language = _.util.getLanguage(element);\n\t\t\tvar grammar = _.languages[language];\n\n\t\t\t// Set language on the element, if not present\n\t\t\t_.util.setLanguage(element, language);\n\n\t\t\t// Set language on the parent, for styling\n\t\t\tvar parent = element.parentElement;\n\t\t\tif (parent && parent.nodeName.toLowerCase() === 'pre') {\n\t\t\t\t_.util.setLanguage(parent, language);\n\t\t\t}\n\n\t\t\tvar code = element.textContent;\n\n\t\t\tvar env = {\n\t\t\t\telement: element,\n\t\t\t\tlanguage: language,\n\t\t\t\tgrammar: grammar,\n\t\t\t\tcode: code\n\t\t\t};\n\n\t\t\tfunction insertHighlightedCode(highlightedCode) {\n\t\t\t\tenv.highlightedCode = highlightedCode;\n\n\t\t\t\t_.hooks.run('before-insert', env);\n\n\t\t\t\tenv.element.innerHTML = env.highlightedCode;\n\n\t\t\t\t_.hooks.run('after-highlight', env);\n\t\t\t\t_.hooks.run('complete', env);\n\t\t\t\tcallback && callback.call(env.element);\n\t\t\t}\n\n\t\t\t_.hooks.run('before-sanity-check', env);\n\n\t\t\t// plugins may change/add the parent/element\n\t\t\tparent = env.element.parentElement;\n\t\t\tif (parent && parent.nodeName.toLowerCase() === 'pre' && !parent.hasAttribute('tabindex')) {\n\t\t\t\tparent.setAttribute('tabindex', '0');\n\t\t\t}\n\n\t\t\tif (!env.code) {\n\t\t\t\t_.hooks.run('complete', env);\n\t\t\t\tcallback && callback.call(env.element);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t_.hooks.run('before-highlight', env);\n\n\t\t\tif (!env.grammar) {\n\t\t\t\tinsertHighlightedCode(_.util.encode(env.code));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (async && _self.Worker) {\n\t\t\t\tvar worker = new Worker(_.filename);\n\n\t\t\t\tworker.onmessage = function (evt) {\n\t\t\t\t\tinsertHighlightedCode(evt.data);\n\t\t\t\t};\n\n\t\t\t\tworker.postMessage(JSON.stringify({\n\t\t\t\t\tlanguage: env.language,\n\t\t\t\t\tcode: env.code,\n\t\t\t\t\timmediateClose: true\n\t\t\t\t}));\n\t\t\t} else {\n\t\t\t\tinsertHighlightedCode(_.highlight(env.code, env.grammar, env.language));\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Low-level function, only use if you know what you’re doing. It accepts a string of text as input\n\t\t * and the language definitions to use, and returns a string with the HTML produced.\n\t\t *\n\t\t * The following hooks will be run:\n\t\t * 1. `before-tokenize`\n\t\t * 2. `after-tokenize`\n\t\t * 3. `wrap`: On each {@link Token}.\n\t\t *\n\t\t * @param {string} text A string with the code to be highlighted.\n\t\t * @param {Grammar} grammar An object containing the tokens to use.\n\t\t *\n\t\t * Usually a language definition like `Prism.languages.markup`.\n\t\t * @param {string} language The name of the language definition passed to `grammar`.\n\t\t * @returns {string} The highlighted HTML.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t * @example\n\t\t * Prism.highlight('var foo = true;', Prism.languages.javascript, 'javascript');\n\t\t */\n\t\thighlight: function (text, grammar, language) {\n\t\t\tvar env = {\n\t\t\t\tcode: text,\n\t\t\t\tgrammar: grammar,\n\t\t\t\tlanguage: language\n\t\t\t};\n\t\t\t_.hooks.run('before-tokenize', env);\n\t\t\tif (!env.grammar) {\n\t\t\t\tthrow new Error('The language \"' + env.language + '\" has no grammar.');\n\t\t\t}\n\t\t\tenv.tokens = _.tokenize(env.code, env.grammar);\n\t\t\t_.hooks.run('after-tokenize', env);\n\t\t\treturn Token.stringify(_.util.encode(env.tokens), env.language);\n\t\t},\n\n\t\t/**\n\t\t * This is the heart of Prism, and the most low-level function you can use. It accepts a string of text as input\n\t\t * and the language definitions to use, and returns an array with the tokenized code.\n\t\t *\n\t\t * When the language definition includes nested tokens, the function is called recursively on each of these tokens.\n\t\t *\n\t\t * This method could be useful in other contexts as well, as a very crude parser.\n\t\t *\n\t\t * @param {string} text A string with the code to be highlighted.\n\t\t * @param {Grammar} grammar An object containing the tokens to use.\n\t\t *\n\t\t * Usually a language definition like `Prism.languages.markup`.\n\t\t * @returns {TokenStream} An array of strings and tokens, a token stream.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t * @example\n\t\t * let code = `var foo = 0;`;\n\t\t * let tokens = Prism.tokenize(code, Prism.languages.javascript);\n\t\t * tokens.forEach(token => {\n\t\t *     if (token instanceof Prism.Token && token.type === 'number') {\n\t\t *         console.log(`Found numeric literal: ${token.content}`);\n\t\t *     }\n\t\t * });\n\t\t */\n\t\ttokenize: function (text, grammar) {\n\t\t\tvar rest = grammar.rest;\n\t\t\tif (rest) {\n\t\t\t\tfor (var token in rest) {\n\t\t\t\t\tgrammar[token] = rest[token];\n\t\t\t\t}\n\n\t\t\t\tdelete grammar.rest;\n\t\t\t}\n\n\t\t\tvar tokenList = new LinkedList();\n\t\t\taddAfter(tokenList, tokenList.head, text);\n\n\t\t\tmatchGrammar(text, tokenList, grammar, tokenList.head, 0);\n\n\t\t\treturn toArray(tokenList);\n\t\t},\n\n\t\t/**\n\t\t * @namespace\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\thooks: {\n\t\t\tall: {},\n\n\t\t\t/**\n\t\t\t * Adds the given callback to the list of callbacks for the given hook.\n\t\t\t *\n\t\t\t * The callback will be invoked when the hook it is registered for is run.\n\t\t\t * Hooks are usually directly run by a highlight function but you can also run hooks yourself.\n\t\t\t *\n\t\t\t * One callback function can be registered to multiple hooks and the same hook multiple times.\n\t\t\t *\n\t\t\t * @param {string} name The name of the hook.\n\t\t\t * @param {HookCallback} callback The callback function which is given environment variables.\n\t\t\t * @public\n\t\t\t */\n\t\t\tadd: function (name, callback) {\n\t\t\t\tvar hooks = _.hooks.all;\n\n\t\t\t\thooks[name] = hooks[name] || [];\n\n\t\t\t\thooks[name].push(callback);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Runs a hook invoking all registered callbacks with the given environment variables.\n\t\t\t *\n\t\t\t * Callbacks will be invoked synchronously and in the order in which they were registered.\n\t\t\t *\n\t\t\t * @param {string} name The name of the hook.\n\t\t\t * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.\n\t\t\t * @public\n\t\t\t */\n\t\t\trun: function (name, env) {\n\t\t\t\tvar callbacks = _.hooks.all[name];\n\n\t\t\t\tif (!callbacks || !callbacks.length) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfor (var i = 0, callback; (callback = callbacks[i++]);) {\n\t\t\t\t\tcallback(env);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tToken: Token\n\t};\n\t_self.Prism = _;\n\n\n\t// Typescript note:\n\t// The following can be used to import the Token type in JSDoc:\n\t//\n\t//   @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token\n\n\t/**\n\t * Creates a new token.\n\t *\n\t * @param {string} type See {@link Token#type type}\n\t * @param {string | TokenStream} content See {@link Token#content content}\n\t * @param {string|string[]} [alias] The alias(es) of the token.\n\t * @param {string} [matchedStr=\"\"] A copy of the full string this token was created from.\n\t * @class\n\t * @global\n\t * @public\n\t */\n\tfunction Token(type, content, alias, matchedStr) {\n\t\t/**\n\t\t * The type of the token.\n\t\t *\n\t\t * This is usually the key of a pattern in a {@link Grammar}.\n\t\t *\n\t\t * @type {string}\n\t\t * @see GrammarToken\n\t\t * @public\n\t\t */\n\t\tthis.type = type;\n\t\t/**\n\t\t * The strings or tokens contained by this token.\n\t\t *\n\t\t * This will be a token stream if the pattern matched also defined an `inside` grammar.\n\t\t *\n\t\t * @type {string | TokenStream}\n\t\t * @public\n\t\t */\n\t\tthis.content = content;\n\t\t/**\n\t\t * The alias(es) of the token.\n\t\t *\n\t\t * @type {string|string[]}\n\t\t * @see GrammarToken\n\t\t * @public\n\t\t */\n\t\tthis.alias = alias;\n\t\t// Copy of the full string this token was created from\n\t\tthis.length = (matchedStr || '').length | 0;\n\t}\n\n\t/**\n\t * A token stream is an array of strings and {@link Token Token} objects.\n\t *\n\t * Token streams have to fulfill a few properties that are assumed by most functions (mostly internal ones) that process\n\t * them.\n\t *\n\t * 1. No adjacent strings.\n\t * 2. No empty strings.\n\t *\n\t *    The only exception here is the token stream that only contains the empty string and nothing else.\n\t *\n\t * @typedef {Array<string | Token>} TokenStream\n\t * @global\n\t * @public\n\t */\n\n\t/**\n\t * Converts the given token or token stream to an HTML representation.\n\t *\n\t * The following hooks will be run:\n\t * 1. `wrap`: On each {@link Token}.\n\t *\n\t * @param {string | Token | TokenStream} o The token or token stream to be converted.\n\t * @param {string} language The name of current language.\n\t * @returns {string} The HTML representation of the token or token stream.\n\t * @memberof Token\n\t * @static\n\t */\n\tToken.stringify = function stringify(o, language) {\n\t\tif (typeof o == 'string') {\n\t\t\treturn o;\n\t\t}\n\t\tif (Array.isArray(o)) {\n\t\t\tvar s = '';\n\t\t\to.forEach(function (e) {\n\t\t\t\ts += stringify(e, language);\n\t\t\t});\n\t\t\treturn s;\n\t\t}\n\n\t\tvar env = {\n\t\t\ttype: o.type,\n\t\t\tcontent: stringify(o.content, language),\n\t\t\ttag: 'span',\n\t\t\tclasses: ['token', o.type],\n\t\t\tattributes: {},\n\t\t\tlanguage: language\n\t\t};\n\n\t\tvar aliases = o.alias;\n\t\tif (aliases) {\n\t\t\tif (Array.isArray(aliases)) {\n\t\t\t\tArray.prototype.push.apply(env.classes, aliases);\n\t\t\t} else {\n\t\t\t\tenv.classes.push(aliases);\n\t\t\t}\n\t\t}\n\n\t\t_.hooks.run('wrap', env);\n\n\t\tvar attributes = '';\n\t\tfor (var name in env.attributes) {\n\t\t\tattributes += ' ' + name + '=\"' + (env.attributes[name] || '').replace(/\"/g, '&quot;') + '\"';\n\t\t}\n\n\t\treturn '<' + env.tag + ' class=\"' + env.classes.join(' ') + '\"' + attributes + '>' + env.content + '</' + env.tag + '>';\n\t};\n\n\t/**\n\t * @param {RegExp} pattern\n\t * @param {number} pos\n\t * @param {string} text\n\t * @param {boolean} lookbehind\n\t * @returns {RegExpExecArray | null}\n\t */\n\tfunction matchPattern(pattern, pos, text, lookbehind) {\n\t\tpattern.lastIndex = pos;\n\t\tvar match = pattern.exec(text);\n\t\tif (match && lookbehind && match[1]) {\n\t\t\t// change the match to remove the text matched by the Prism lookbehind group\n\t\t\tvar lookbehindLength = match[1].length;\n\t\t\tmatch.index += lookbehindLength;\n\t\t\tmatch[0] = match[0].slice(lookbehindLength);\n\t\t}\n\t\treturn match;\n\t}\n\n\t/**\n\t * @param {string} text\n\t * @param {LinkedList<string | Token>} tokenList\n\t * @param {any} grammar\n\t * @param {LinkedListNode<string | Token>} startNode\n\t * @param {number} startPos\n\t * @param {RematchOptions} [rematch]\n\t * @returns {void}\n\t * @private\n\t *\n\t * @typedef RematchOptions\n\t * @property {string} cause\n\t * @property {number} reach\n\t */\n\tfunction matchGrammar(text, tokenList, grammar, startNode, startPos, rematch) {\n\t\tfor (var token in grammar) {\n\t\t\tif (!grammar.hasOwnProperty(token) || !grammar[token]) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tvar patterns = grammar[token];\n\t\t\tpatterns = Array.isArray(patterns) ? patterns : [patterns];\n\n\t\t\tfor (var j = 0; j < patterns.length; ++j) {\n\t\t\t\tif (rematch && rematch.cause == token + ',' + j) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar patternObj = patterns[j];\n\t\t\t\tvar inside = patternObj.inside;\n\t\t\t\tvar lookbehind = !!patternObj.lookbehind;\n\t\t\t\tvar greedy = !!patternObj.greedy;\n\t\t\t\tvar alias = patternObj.alias;\n\n\t\t\t\tif (greedy && !patternObj.pattern.global) {\n\t\t\t\t\t// Without the global flag, lastIndex won't work\n\t\t\t\t\tvar flags = patternObj.pattern.toString().match(/[imsuy]*$/)[0];\n\t\t\t\t\tpatternObj.pattern = RegExp(patternObj.pattern.source, flags + 'g');\n\t\t\t\t}\n\n\t\t\t\t/** @type {RegExp} */\n\t\t\t\tvar pattern = patternObj.pattern || patternObj;\n\n\t\t\t\tfor ( // iterate the token list and keep track of the current token/string position\n\t\t\t\t\tvar currentNode = startNode.next, pos = startPos;\n\t\t\t\t\tcurrentNode !== tokenList.tail;\n\t\t\t\t\tpos += currentNode.value.length, currentNode = currentNode.next\n\t\t\t\t) {\n\n\t\t\t\t\tif (rematch && pos >= rematch.reach) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar str = currentNode.value;\n\n\t\t\t\t\tif (tokenList.length > text.length) {\n\t\t\t\t\t\t// Something went terribly wrong, ABORT, ABORT!\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (str instanceof Token) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar removeCount = 1; // this is the to parameter of removeBetween\n\t\t\t\t\tvar match;\n\n\t\t\t\t\tif (greedy) {\n\t\t\t\t\t\tmatch = matchPattern(pattern, pos, text, lookbehind);\n\t\t\t\t\t\tif (!match || match.index >= text.length) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar from = match.index;\n\t\t\t\t\t\tvar to = match.index + match[0].length;\n\t\t\t\t\t\tvar p = pos;\n\n\t\t\t\t\t\t// find the node that contains the match\n\t\t\t\t\t\tp += currentNode.value.length;\n\t\t\t\t\t\twhile (from >= p) {\n\t\t\t\t\t\t\tcurrentNode = currentNode.next;\n\t\t\t\t\t\t\tp += currentNode.value.length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// adjust pos (and p)\n\t\t\t\t\t\tp -= currentNode.value.length;\n\t\t\t\t\t\tpos = p;\n\n\t\t\t\t\t\t// the current node is a Token, then the match starts inside another Token, which is invalid\n\t\t\t\t\t\tif (currentNode.value instanceof Token) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// find the last node which is affected by this match\n\t\t\t\t\t\tfor (\n\t\t\t\t\t\t\tvar k = currentNode;\n\t\t\t\t\t\t\tk !== tokenList.tail && (p < to || typeof k.value === 'string');\n\t\t\t\t\t\t\tk = k.next\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tremoveCount++;\n\t\t\t\t\t\t\tp += k.value.length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tremoveCount--;\n\n\t\t\t\t\t\t// replace with the new match\n\t\t\t\t\t\tstr = text.slice(pos, p);\n\t\t\t\t\t\tmatch.index -= pos;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmatch = matchPattern(pattern, 0, str, lookbehind);\n\t\t\t\t\t\tif (!match) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// eslint-disable-next-line no-redeclare\n\t\t\t\t\tvar from = match.index;\n\t\t\t\t\tvar matchStr = match[0];\n\t\t\t\t\tvar before = str.slice(0, from);\n\t\t\t\t\tvar after = str.slice(from + matchStr.length);\n\n\t\t\t\t\tvar reach = pos + str.length;\n\t\t\t\t\tif (rematch && reach > rematch.reach) {\n\t\t\t\t\t\trematch.reach = reach;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar removeFrom = currentNode.prev;\n\n\t\t\t\t\tif (before) {\n\t\t\t\t\t\tremoveFrom = addAfter(tokenList, removeFrom, before);\n\t\t\t\t\t\tpos += before.length;\n\t\t\t\t\t}\n\n\t\t\t\t\tremoveRange(tokenList, removeFrom, removeCount);\n\n\t\t\t\t\tvar wrapped = new Token(token, inside ? _.tokenize(matchStr, inside) : matchStr, alias, matchStr);\n\t\t\t\t\tcurrentNode = addAfter(tokenList, removeFrom, wrapped);\n\n\t\t\t\t\tif (after) {\n\t\t\t\t\t\taddAfter(tokenList, currentNode, after);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (removeCount > 1) {\n\t\t\t\t\t\t// at least one Token object was removed, so we have to do some rematching\n\t\t\t\t\t\t// this can only happen if the current pattern is greedy\n\n\t\t\t\t\t\t/** @type {RematchOptions} */\n\t\t\t\t\t\tvar nestedRematch = {\n\t\t\t\t\t\t\tcause: token + ',' + j,\n\t\t\t\t\t\t\treach: reach\n\t\t\t\t\t\t};\n\t\t\t\t\t\tmatchGrammar(text, tokenList, grammar, currentNode.prev, pos, nestedRematch);\n\n\t\t\t\t\t\t// the reach might have been extended because of the rematching\n\t\t\t\t\t\tif (rematch && nestedRematch.reach > rematch.reach) {\n\t\t\t\t\t\t\trematch.reach = nestedRematch.reach;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @typedef LinkedListNode\n\t * @property {T} value\n\t * @property {LinkedListNode<T> | null} prev The previous node.\n\t * @property {LinkedListNode<T> | null} next The next node.\n\t * @template T\n\t * @private\n\t */\n\n\t/**\n\t * @template T\n\t * @private\n\t */\n\tfunction LinkedList() {\n\t\t/** @type {LinkedListNode<T>} */\n\t\tvar head = { value: null, prev: null, next: null };\n\t\t/** @type {LinkedListNode<T>} */\n\t\tvar tail = { value: null, prev: head, next: null };\n\t\thead.next = tail;\n\n\t\t/** @type {LinkedListNode<T>} */\n\t\tthis.head = head;\n\t\t/** @type {LinkedListNode<T>} */\n\t\tthis.tail = tail;\n\t\tthis.length = 0;\n\t}\n\n\t/**\n\t * Adds a new node with the given value to the list.\n\t *\n\t * @param {LinkedList<T>} list\n\t * @param {LinkedListNode<T>} node\n\t * @param {T} value\n\t * @returns {LinkedListNode<T>} The added node.\n\t * @template T\n\t */\n\tfunction addAfter(list, node, value) {\n\t\t// assumes that node != list.tail && values.length >= 0\n\t\tvar next = node.next;\n\n\t\tvar newNode = { value: value, prev: node, next: next };\n\t\tnode.next = newNode;\n\t\tnext.prev = newNode;\n\t\tlist.length++;\n\n\t\treturn newNode;\n\t}\n\t/**\n\t * Removes `count` nodes after the given node. The given node will not be removed.\n\t *\n\t * @param {LinkedList<T>} list\n\t * @param {LinkedListNode<T>} node\n\t * @param {number} count\n\t * @template T\n\t */\n\tfunction removeRange(list, node, count) {\n\t\tvar next = node.next;\n\t\tfor (var i = 0; i < count && next !== list.tail; i++) {\n\t\t\tnext = next.next;\n\t\t}\n\t\tnode.next = next;\n\t\tnext.prev = node;\n\t\tlist.length -= i;\n\t}\n\t/**\n\t * @param {LinkedList<T>} list\n\t * @returns {T[]}\n\t * @template T\n\t */\n\tfunction toArray(list) {\n\t\tvar array = [];\n\t\tvar node = list.head.next;\n\t\twhile (node !== list.tail) {\n\t\t\tarray.push(node.value);\n\t\t\tnode = node.next;\n\t\t}\n\t\treturn array;\n\t}\n\n\n\tif (!_self.document) {\n\t\tif (!_self.addEventListener) {\n\t\t\t// in Node.js\n\t\t\treturn _;\n\t\t}\n\n\t\tif (!_.disableWorkerMessageHandler) {\n\t\t\t// In worker\n\t\t\t_self.addEventListener('message', function (evt) {\n\t\t\t\tvar message = JSON.parse(evt.data);\n\t\t\t\tvar lang = message.language;\n\t\t\t\tvar code = message.code;\n\t\t\t\tvar immediateClose = message.immediateClose;\n\n\t\t\t\t_self.postMessage(_.highlight(code, _.languages[lang], lang));\n\t\t\t\tif (immediateClose) {\n\t\t\t\t\t_self.close();\n\t\t\t\t}\n\t\t\t}, false);\n\t\t}\n\n\t\treturn _;\n\t}\n\n\t// Get current script and highlight\n\tvar script = _.util.currentScript();\n\n\tif (script) {\n\t\t_.filename = script.src;\n\n\t\tif (script.hasAttribute('data-manual')) {\n\t\t\t_.manual = true;\n\t\t}\n\t}\n\n\tfunction highlightAutomaticallyCallback() {\n\t\tif (!_.manual) {\n\t\t\t_.highlightAll();\n\t\t}\n\t}\n\n\tif (!_.manual) {\n\t\t// If the document state is \"loading\", then we'll use DOMContentLoaded.\n\t\t// If the document state is \"interactive\" and the prism.js script is deferred, then we'll also use the\n\t\t// DOMContentLoaded event because there might be some plugins or languages which have also been deferred and they\n\t\t// might take longer one animation frame to execute which can create a race condition where only some plugins have\n\t\t// been loaded when Prism.highlightAll() is executed, depending on how fast resources are loaded.\n\t\t// See https://github.com/PrismJS/prism/issues/2102\n\t\tvar readyState = document.readyState;\n\t\tif (readyState === 'loading' || readyState === 'interactive' && script && script.defer) {\n\t\t\tdocument.addEventListener('DOMContentLoaded', highlightAutomaticallyCallback);\n\t\t} else {\n\t\t\tif (window.requestAnimationFrame) {\n\t\t\t\twindow.requestAnimationFrame(highlightAutomaticallyCallback);\n\t\t\t} else {\n\t\t\t\twindow.setTimeout(highlightAutomaticallyCallback, 16);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn _;\n\n}(_self));\n\nif (typeof module !== 'undefined' && module.exports) {\n\tmodule.exports = Prism;\n}\n\n// hack for components to work correctly in node.js\nif (typeof global !== 'undefined') {\n\tglobal.Prism = Prism;\n}\n\n// some additional documentation/types\n\n/**\n * The expansion of a simple `RegExp` literal to support additional properties.\n *\n * @typedef GrammarToken\n * @property {RegExp} pattern The regular expression of the token.\n * @property {boolean} [lookbehind=false] If `true`, then the first capturing group of `pattern` will (effectively)\n * behave as a lookbehind group meaning that the captured text will not be part of the matched text of the new token.\n * @property {boolean} [greedy=false] Whether the token is greedy.\n * @property {string|string[]} [alias] An optional alias or list of aliases.\n * @property {Grammar} [inside] The nested grammar of this token.\n *\n * The `inside` grammar will be used to tokenize the text value of each token of this kind.\n *\n * This can be used to make nested and even recursive language definitions.\n *\n * Note: This can cause infinite recursion. Be careful when you embed different languages or even the same language into\n * each another.\n * @global\n * @public\n */\n\n/**\n * @typedef Grammar\n * @type {Object<string, RegExp | GrammarToken | Array<RegExp | GrammarToken>>}\n * @property {Grammar} [rest] An optional grammar object that will be appended to this grammar.\n * @global\n * @public\n */\n\n/**\n * A function which will invoked after an element was successfully highlighted.\n *\n * @callback HighlightCallback\n * @param {Element} element The element successfully highlighted.\n * @returns {void}\n * @global\n * @public\n */\n\n/**\n * @callback HookCallback\n * @param {Object<string, any>} env The environment variables of the hook.\n * @returns {void}\n * @global\n * @public\n */\n\n\n/* **********************************************\n     Begin prism-markup.js\n********************************************** */\n\nPrism.languages.markup = {\n\t'comment': {\n\t\tpattern: /<!--(?:(?!<!--)[\\s\\S])*?-->/,\n\t\tgreedy: true\n\t},\n\t'prolog': {\n\t\tpattern: /<\\?[\\s\\S]+?\\?>/,\n\t\tgreedy: true\n\t},\n\t'doctype': {\n\t\t// https://www.w3.org/TR/xml/#NT-doctypedecl\n\t\tpattern: /<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:[^<\"'\\]]|\"[^\"]*\"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\\]\\s*)?>/i,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'internal-subset': {\n\t\t\t\tpattern: /(^[^\\[]*\\[)[\\s\\S]+(?=\\]>$)/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: null // see below\n\t\t\t},\n\t\t\t'string': {\n\t\t\t\tpattern: /\"[^\"]*\"|'[^']*'/,\n\t\t\t\tgreedy: true\n\t\t\t},\n\t\t\t'punctuation': /^<!|>$|[[\\]]/,\n\t\t\t'doctype-tag': /^DOCTYPE/i,\n\t\t\t'name': /[^\\s<>'\"]+/\n\t\t}\n\t},\n\t'cdata': {\n\t\tpattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n\t\tgreedy: true\n\t},\n\t'tag': {\n\t\tpattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'tag': {\n\t\t\t\tpattern: /^<\\/?[^\\s>\\/]+/,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': /^<\\/?/,\n\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/\n\t\t\t\t}\n\t\t\t},\n\t\t\t'special-attr': [],\n\t\t\t'attr-value': {\n\t\t\t\tpattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpattern: /^=/,\n\t\t\t\t\t\t\talias: 'attr-equals'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpattern: /^(\\s*)[\"']|[\"']$/,\n\t\t\t\t\t\t\tlookbehind: true\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t'punctuation': /\\/?>/,\n\t\t\t'attr-name': {\n\t\t\t\tpattern: /[^\\s>\\/]+/,\n\t\t\t\tinside: {\n\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t},\n\t'entity': [\n\t\t{\n\t\t\tpattern: /&[\\da-z]{1,8};/i,\n\t\t\talias: 'named-entity'\n\t\t},\n\t\t/&#x?[\\da-f]{1,8};/i\n\t]\n};\n\nPrism.languages.markup['tag'].inside['attr-value'].inside['entity'] =\n\tPrism.languages.markup['entity'];\nPrism.languages.markup['doctype'].inside['internal-subset'].inside = Prism.languages.markup;\n\n// Plugin to make entity title show the real entity, idea by Roman Komarov\nPrism.hooks.add('wrap', function (env) {\n\n\tif (env.type === 'entity') {\n\t\tenv.attributes['title'] = env.content.replace(/&amp;/, '&');\n\t}\n});\n\nObject.defineProperty(Prism.languages.markup.tag, 'addInlined', {\n\t/**\n\t * Adds an inlined language to markup.\n\t *\n\t * An example of an inlined language is CSS with `<style>` tags.\n\t *\n\t * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\n\t * case insensitive.\n\t * @param {string} lang The language key.\n\t * @example\n\t * addInlined('style', 'css');\n\t */\n\tvalue: function addInlined(tagName, lang) {\n\t\tvar includedCdataInside = {};\n\t\tincludedCdataInside['language-' + lang] = {\n\t\t\tpattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages[lang]\n\t\t};\n\t\tincludedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i;\n\n\t\tvar inside = {\n\t\t\t'included-cdata': {\n\t\t\t\tpattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n\t\t\t\tinside: includedCdataInside\n\t\t\t}\n\t\t};\n\t\tinside['language-' + lang] = {\n\t\t\tpattern: /[\\s\\S]+/,\n\t\t\tinside: Prism.languages[lang]\n\t\t};\n\n\t\tvar def = {};\n\t\tdef[tagName] = {\n\t\t\tpattern: RegExp(/(<__[^>]*>)(?:<!\\[CDATA\\[(?:[^\\]]|\\](?!\\]>))*\\]\\]>|(?!<!\\[CDATA\\[)[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, function () { return tagName; }), 'i'),\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: inside\n\t\t};\n\n\t\tPrism.languages.insertBefore('markup', 'cdata', def);\n\t}\n});\nObject.defineProperty(Prism.languages.markup.tag, 'addAttribute', {\n\t/**\n\t * Adds an pattern to highlight languages embedded in HTML attributes.\n\t *\n\t * An example of an inlined language is CSS with `style` attributes.\n\t *\n\t * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as\n\t * case insensitive.\n\t * @param {string} lang The language key.\n\t * @example\n\t * addAttribute('style', 'css');\n\t */\n\tvalue: function (attrName, lang) {\n\t\tPrism.languages.markup.tag.inside['special-attr'].push({\n\t\t\tpattern: RegExp(\n\t\t\t\t/(^|[\"'\\s])/.source + '(?:' + attrName + ')' + /\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))/.source,\n\t\t\t\t'i'\n\t\t\t),\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\t'attr-name': /^[^\\s=]+/,\n\t\t\t\t'attr-value': {\n\t\t\t\t\tpattern: /=[\\s\\S]+/,\n\t\t\t\t\tinside: {\n\t\t\t\t\t\t'value': {\n\t\t\t\t\t\t\tpattern: /(^=\\s*([\"']|(?![\"'])))\\S[\\s\\S]*(?=\\2$)/,\n\t\t\t\t\t\t\tlookbehind: true,\n\t\t\t\t\t\t\talias: [lang, 'language-' + lang],\n\t\t\t\t\t\t\tinside: Prism.languages[lang]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'punctuation': [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpattern: /^=/,\n\t\t\t\t\t\t\t\talias: 'attr-equals'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t/\"|'/\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n});\n\nPrism.languages.html = Prism.languages.markup;\nPrism.languages.mathml = Prism.languages.markup;\nPrism.languages.svg = Prism.languages.markup;\n\nPrism.languages.xml = Prism.languages.extend('markup', {});\nPrism.languages.ssml = Prism.languages.xml;\nPrism.languages.atom = Prism.languages.xml;\nPrism.languages.rss = Prism.languages.xml;\n\n\n/* **********************************************\n     Begin prism-css.js\n********************************************** */\n\n(function (Prism) {\n\n\tvar string = /(?:\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n])*')/;\n\n\tPrism.languages.css = {\n\t\t'comment': /\\/\\*[\\s\\S]*?\\*\\//,\n\t\t'atrule': {\n\t\t\tpattern: RegExp('@[\\\\w-](?:' + /[^;{\\s\"']|\\s+(?!\\s)/.source + '|' + string.source + ')*?' + /(?:;|(?=\\s*\\{))/.source),\n\t\t\tinside: {\n\t\t\t\t'rule': /^@[\\w-]+/,\n\t\t\t\t'selector-function-argument': {\n\t\t\t\t\tpattern: /(\\bselector\\s*\\(\\s*(?![\\s)]))(?:[^()\\s]|\\s+(?![\\s)])|\\((?:[^()]|\\([^()]*\\))*\\))+(?=\\s*\\))/,\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\talias: 'selector'\n\t\t\t\t},\n\t\t\t\t'keyword': {\n\t\t\t\t\tpattern: /(^|[^\\w-])(?:and|not|only|or)(?![\\w-])/,\n\t\t\t\t\tlookbehind: true\n\t\t\t\t}\n\t\t\t\t// See rest below\n\t\t\t}\n\t\t},\n\t\t'url': {\n\t\t\t// https://drafts.csswg.org/css-values-3/#urls\n\t\t\tpattern: RegExp('\\\\burl\\\\((?:' + string.source + '|' + /(?:[^\\\\\\r\\n()\"']|\\\\[\\s\\S])*/.source + ')\\\\)', 'i'),\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'function': /^url/i,\n\t\t\t\t'punctuation': /^\\(|\\)$/,\n\t\t\t\t'string': {\n\t\t\t\t\tpattern: RegExp('^' + string.source + '$'),\n\t\t\t\t\talias: 'url'\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t'selector': {\n\t\t\tpattern: RegExp('(^|[{}\\\\s])[^{}\\\\s](?:[^{};\"\\'\\\\s]|\\\\s+(?![\\\\s{])|' + string.source + ')*(?=\\\\s*\\\\{)'),\n\t\t\tlookbehind: true\n\t\t},\n\t\t'string': {\n\t\t\tpattern: string,\n\t\t\tgreedy: true\n\t\t},\n\t\t'property': {\n\t\t\tpattern: /(^|[^-\\w\\xA0-\\uFFFF])(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*(?=\\s*:)/i,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'important': /!important\\b/i,\n\t\t'function': {\n\t\t\tpattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\\()/i,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'punctuation': /[(){};:,]/\n\t};\n\n\tPrism.languages.css['atrule'].inside.rest = Prism.languages.css;\n\n\tvar markup = Prism.languages.markup;\n\tif (markup) {\n\t\tmarkup.tag.addInlined('style', 'css');\n\t\tmarkup.tag.addAttribute('style', 'css');\n\t}\n\n}(Prism));\n\n\n/* **********************************************\n     Begin prism-clike.js\n********************************************** */\n\nPrism.languages.clike = {\n\t'comment': [\n\t\t{\n\t\t\tpattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true\n\t\t},\n\t\t{\n\t\t\tpattern: /(^|[^\\\\:])\\/\\/.*/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true\n\t\t}\n\t],\n\t'string': {\n\t\tpattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n\t\tgreedy: true\n\t},\n\t'class-name': {\n\t\tpattern: /(\\b(?:class|extends|implements|instanceof|interface|new|trait)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,\n\t\tlookbehind: true,\n\t\tinside: {\n\t\t\t'punctuation': /[.\\\\]/\n\t\t}\n\t},\n\t'keyword': /\\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\\b/,\n\t'boolean': /\\b(?:false|true)\\b/,\n\t'function': /\\b\\w+(?=\\()/,\n\t'number': /\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n\t'operator': /[<>]=?|[!=]=?=?|--?|\\+\\+?|&&?|\\|\\|?|[?*/~^%]/,\n\t'punctuation': /[{}[\\];(),.:]/\n};\n\n\n/* **********************************************\n     Begin prism-javascript.js\n********************************************** */\n\nPrism.languages.javascript = Prism.languages.extend('clike', {\n\t'class-name': [\n\t\tPrism.languages.clike['class-name'],\n\t\t{\n\t\t\tpattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$A-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\.(?:constructor|prototype))/,\n\t\t\tlookbehind: true\n\t\t}\n\t],\n\t'keyword': [\n\t\t{\n\t\t\tpattern: /((?:^|\\})\\s*)catch\\b/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t{\n\t\t\tpattern: /(^|[^.]|\\.\\.\\.\\s*)\\b(?:as|assert(?=\\s*\\{)|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\\s*(?:\\{|$))|for|from(?=\\s*(?:['\"]|$))|function|(?:get|set)(?=\\s*(?:[#\\[$\\w\\xA0-\\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n\t\t\tlookbehind: true\n\t\t},\n\t],\n\t// Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)\n\t'function': /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n\t'number': {\n\t\tpattern: RegExp(\n\t\t\t/(^|[^\\w$])/.source +\n\t\t\t'(?:' +\n\t\t\t(\n\t\t\t\t// constant\n\t\t\t\t/NaN|Infinity/.source +\n\t\t\t\t'|' +\n\t\t\t\t// binary integer\n\t\t\t\t/0[bB][01]+(?:_[01]+)*n?/.source +\n\t\t\t\t'|' +\n\t\t\t\t// octal integer\n\t\t\t\t/0[oO][0-7]+(?:_[0-7]+)*n?/.source +\n\t\t\t\t'|' +\n\t\t\t\t// hexadecimal integer\n\t\t\t\t/0[xX][\\dA-Fa-f]+(?:_[\\dA-Fa-f]+)*n?/.source +\n\t\t\t\t'|' +\n\t\t\t\t// decimal bigint\n\t\t\t\t/\\d+(?:_\\d+)*n/.source +\n\t\t\t\t'|' +\n\t\t\t\t// decimal number (integer or float) but no bigint\n\t\t\t\t/(?:\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\.\\d+(?:_\\d+)*)(?:[Ee][+-]?\\d+(?:_\\d+)*)?/.source\n\t\t\t) +\n\t\t\t')' +\n\t\t\t/(?![\\w$])/.source\n\t\t),\n\t\tlookbehind: true\n\t},\n\t'operator': /--|\\+\\+|\\*\\*=?|=>|&&=?|\\|\\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\\.{3}|\\?\\?=?|\\?\\.?|[~:]/\n});\n\nPrism.languages.javascript['class-name'][0].pattern = /(\\b(?:class|extends|implements|instanceof|interface|new)\\s+)[\\w.\\\\]+/;\n\nPrism.languages.insertBefore('javascript', 'keyword', {\n\t'regex': {\n\t\tpattern: RegExp(\n\t\t\t// lookbehind\n\t\t\t// eslint-disable-next-line regexp/no-dupe-characters-character-class\n\t\t\t/((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s]|\\b(?:return|yield))\\s*)/.source +\n\t\t\t// Regex pattern:\n\t\t\t// There are 2 regex patterns here. The RegExp set notation proposal added support for nested character\n\t\t\t// classes if the `v` flag is present. Unfortunately, nested CCs are both context-free and incompatible\n\t\t\t// with the only syntax, so we have to define 2 different regex patterns.\n\t\t\t/\\//.source +\n\t\t\t'(?:' +\n\t\t\t/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*\\]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[dgimyus]{0,7}/.source +\n\t\t\t'|' +\n\t\t\t// `v` flag syntax. This supports 3 levels of nested character classes.\n\t\t\t/(?:\\[(?:[^[\\]\\\\\\r\\n]|\\\\.|\\[(?:[^[\\]\\\\\\r\\n]|\\\\.|\\[(?:[^[\\]\\\\\\r\\n]|\\\\.)*\\])*\\])*\\]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[dgimyus]{0,7}v[dgimyus]{0,7}/.source +\n\t\t\t')' +\n\t\t\t// lookahead\n\t\t\t/(?=(?:\\s|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*(?:$|[\\r\\n,.;:})\\]]|\\/\\/))/.source\n\t\t),\n\t\tlookbehind: true,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'regex-source': {\n\t\t\t\tpattern: /^(\\/)[\\s\\S]+(?=\\/[a-z]*$)/,\n\t\t\t\tlookbehind: true,\n\t\t\t\talias: 'language-regex',\n\t\t\t\tinside: Prism.languages.regex\n\t\t\t},\n\t\t\t'regex-delimiter': /^\\/|\\/$/,\n\t\t\t'regex-flags': /^[a-z]+$/,\n\t\t}\n\t},\n\t// This must be declared before keyword because we use \"function\" inside the look-forward\n\t'function-variable': {\n\t\tpattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/,\n\t\talias: 'function'\n\t},\n\t'parameter': [\n\t\t{\n\t\t\tpattern: /(function(?:\\s+(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)?\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\))/,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript\n\t\t},\n\t\t{\n\t\t\tpattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$a-z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*=>)/i,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript\n\t\t},\n\t\t{\n\t\t\tpattern: /(\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*=>)/,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript\n\t\t},\n\t\t{\n\t\t\tpattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*)\\(\\s*|\\]\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*\\{)/,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript\n\t\t}\n\t],\n\t'constant': /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n});\n\nPrism.languages.insertBefore('javascript', 'string', {\n\t'hashbang': {\n\t\tpattern: /^#!.*/,\n\t\tgreedy: true,\n\t\talias: 'comment'\n\t},\n\t'template-string': {\n\t\tpattern: /`(?:\\\\[\\s\\S]|\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}|(?!\\$\\{)[^\\\\`])*`/,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'template-punctuation': {\n\t\t\t\tpattern: /^`|`$/,\n\t\t\t\talias: 'string'\n\t\t\t},\n\t\t\t'interpolation': {\n\t\t\t\tpattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'interpolation-punctuation': {\n\t\t\t\t\t\tpattern: /^\\$\\{|\\}$/,\n\t\t\t\t\t\talias: 'punctuation'\n\t\t\t\t\t},\n\t\t\t\t\trest: Prism.languages.javascript\n\t\t\t\t}\n\t\t\t},\n\t\t\t'string': /[\\s\\S]+/\n\t\t}\n\t},\n\t'string-property': {\n\t\tpattern: /((?:^|[,{])[ \\t]*)([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\2)[^\\\\\\r\\n])*\\2(?=\\s*:)/m,\n\t\tlookbehind: true,\n\t\tgreedy: true,\n\t\talias: 'property'\n\t}\n});\n\nPrism.languages.insertBefore('javascript', 'operator', {\n\t'literal-property': {\n\t\tpattern: /((?:^|[,{])[ \\t]*)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*:)/m,\n\t\tlookbehind: true,\n\t\talias: 'property'\n\t},\n});\n\nif (Prism.languages.markup) {\n\tPrism.languages.markup.tag.addInlined('script', 'javascript');\n\n\t// add attribute support for all DOM events.\n\t// https://developer.mozilla.org/en-US/docs/Web/Events#Standard_events\n\tPrism.languages.markup.tag.addAttribute(\n\t\t/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source,\n\t\t'javascript'\n\t);\n}\n\nPrism.languages.js = Prism.languages.javascript;\n\n\n/* **********************************************\n     Begin prism-file-highlight.js\n********************************************** */\n\n(function () {\n\n\tif (typeof Prism === 'undefined' || typeof document === 'undefined') {\n\t\treturn;\n\t}\n\n\t// https://developer.mozilla.org/en-US/docs/Web/API/Element/matches#Polyfill\n\tif (!Element.prototype.matches) {\n\t\tElement.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\n\t}\n\n\tvar LOADING_MESSAGE = 'Loading…';\n\tvar FAILURE_MESSAGE = function (status, message) {\n\t\treturn '✖ Error ' + status + ' while fetching file: ' + message;\n\t};\n\tvar FAILURE_EMPTY_MESSAGE = '✖ Error: File does not exist or is empty';\n\n\tvar EXTENSIONS = {\n\t\t'js': 'javascript',\n\t\t'py': 'python',\n\t\t'rb': 'ruby',\n\t\t'ps1': 'powershell',\n\t\t'psm1': 'powershell',\n\t\t'sh': 'bash',\n\t\t'bat': 'batch',\n\t\t'h': 'c',\n\t\t'tex': 'latex'\n\t};\n\n\tvar STATUS_ATTR = 'data-src-status';\n\tvar STATUS_LOADING = 'loading';\n\tvar STATUS_LOADED = 'loaded';\n\tvar STATUS_FAILED = 'failed';\n\n\tvar SELECTOR = 'pre[data-src]:not([' + STATUS_ATTR + '=\"' + STATUS_LOADED + '\"])'\n\t\t+ ':not([' + STATUS_ATTR + '=\"' + STATUS_LOADING + '\"])';\n\n\t/**\n\t * Loads the given file.\n\t *\n\t * @param {string} src The URL or path of the source file to load.\n\t * @param {(result: string) => void} success\n\t * @param {(reason: string) => void} error\n\t */\n\tfunction loadFile(src, success, error) {\n\t\tvar xhr = new XMLHttpRequest();\n\t\txhr.open('GET', src, true);\n\t\txhr.onreadystatechange = function () {\n\t\t\tif (xhr.readyState == 4) {\n\t\t\t\tif (xhr.status < 400 && xhr.responseText) {\n\t\t\t\t\tsuccess(xhr.responseText);\n\t\t\t\t} else {\n\t\t\t\t\tif (xhr.status >= 400) {\n\t\t\t\t\t\terror(FAILURE_MESSAGE(xhr.status, xhr.statusText));\n\t\t\t\t\t} else {\n\t\t\t\t\t\terror(FAILURE_EMPTY_MESSAGE);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\txhr.send(null);\n\t}\n\n\t/**\n\t * Parses the given range.\n\t *\n\t * This returns a range with inclusive ends.\n\t *\n\t * @param {string | null | undefined} range\n\t * @returns {[number, number | undefined] | undefined}\n\t */\n\tfunction parseRange(range) {\n\t\tvar m = /^\\s*(\\d+)\\s*(?:(,)\\s*(?:(\\d+)\\s*)?)?$/.exec(range || '');\n\t\tif (m) {\n\t\t\tvar start = Number(m[1]);\n\t\t\tvar comma = m[2];\n\t\t\tvar end = m[3];\n\n\t\t\tif (!comma) {\n\t\t\t\treturn [start, start];\n\t\t\t}\n\t\t\tif (!end) {\n\t\t\t\treturn [start, undefined];\n\t\t\t}\n\t\t\treturn [start, Number(end)];\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tPrism.hooks.add('before-highlightall', function (env) {\n\t\tenv.selector += ', ' + SELECTOR;\n\t});\n\n\tPrism.hooks.add('before-sanity-check', function (env) {\n\t\tvar pre = /** @type {HTMLPreElement} */ (env.element);\n\t\tif (pre.matches(SELECTOR)) {\n\t\t\tenv.code = ''; // fast-path the whole thing and go to complete\n\n\t\t\tpre.setAttribute(STATUS_ATTR, STATUS_LOADING); // mark as loading\n\n\t\t\t// add code element with loading message\n\t\t\tvar code = pre.appendChild(document.createElement('CODE'));\n\t\t\tcode.textContent = LOADING_MESSAGE;\n\n\t\t\tvar src = pre.getAttribute('data-src');\n\n\t\t\tvar language = env.language;\n\t\t\tif (language === 'none') {\n\t\t\t\t// the language might be 'none' because there is no language set;\n\t\t\t\t// in this case, we want to use the extension as the language\n\t\t\t\tvar extension = (/\\.(\\w+)$/.exec(src) || [, 'none'])[1];\n\t\t\t\tlanguage = EXTENSIONS[extension] || extension;\n\t\t\t}\n\n\t\t\t// set language classes\n\t\t\tPrism.util.setLanguage(code, language);\n\t\t\tPrism.util.setLanguage(pre, language);\n\n\t\t\t// preload the language\n\t\t\tvar autoloader = Prism.plugins.autoloader;\n\t\t\tif (autoloader) {\n\t\t\t\tautoloader.loadLanguages(language);\n\t\t\t}\n\n\t\t\t// load file\n\t\t\tloadFile(\n\t\t\t\tsrc,\n\t\t\t\tfunction (text) {\n\t\t\t\t\t// mark as loaded\n\t\t\t\t\tpre.setAttribute(STATUS_ATTR, STATUS_LOADED);\n\n\t\t\t\t\t// handle data-range\n\t\t\t\t\tvar range = parseRange(pre.getAttribute('data-range'));\n\t\t\t\t\tif (range) {\n\t\t\t\t\t\tvar lines = text.split(/\\r\\n?|\\n/g);\n\n\t\t\t\t\t\t// the range is one-based and inclusive on both ends\n\t\t\t\t\t\tvar start = range[0];\n\t\t\t\t\t\tvar end = range[1] == null ? lines.length : range[1];\n\n\t\t\t\t\t\tif (start < 0) { start += lines.length; }\n\t\t\t\t\t\tstart = Math.max(0, Math.min(start - 1, lines.length));\n\t\t\t\t\t\tif (end < 0) { end += lines.length; }\n\t\t\t\t\t\tend = Math.max(0, Math.min(end, lines.length));\n\n\t\t\t\t\t\ttext = lines.slice(start, end).join('\\n');\n\n\t\t\t\t\t\t// add data-start for line numbers\n\t\t\t\t\t\tif (!pre.hasAttribute('data-start')) {\n\t\t\t\t\t\t\tpre.setAttribute('data-start', String(start + 1));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// highlight code\n\t\t\t\t\tcode.textContent = text;\n\t\t\t\t\tPrism.highlightElement(code);\n\t\t\t\t},\n\t\t\t\tfunction (error) {\n\t\t\t\t\t// mark as failed\n\t\t\t\t\tpre.setAttribute(STATUS_ATTR, STATUS_FAILED);\n\n\t\t\t\t\tcode.textContent = error;\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t});\n\n\tPrism.plugins.fileHighlight = {\n\t\t/**\n\t\t * Executes the File Highlight plugin for all matching `pre` elements under the given container.\n\t\t *\n\t\t * Note: Elements which are already loaded or currently loading will not be touched by this method.\n\t\t *\n\t\t * @param {ParentNode} [container=document]\n\t\t */\n\t\thighlight: function highlight(container) {\n\t\t\tvar elements = (container || document).querySelectorAll(SELECTOR);\n\n\t\t\tfor (var i = 0, element; (element = elements[i++]);) {\n\t\t\t\tPrism.highlightElement(element);\n\t\t\t}\n\t\t}\n\t};\n\n\tvar logged = false;\n\t/** @deprecated Use `Prism.plugins.fileHighlight.highlight` instead. */\n\tPrism.fileHighlight = function () {\n\t\tif (!logged) {\n\t\t\tconsole.warn('Prism.fileHighlight is deprecated. Use `Prism.plugins.fileHighlight.highlight` instead.');\n\t\t\tlogged = true;\n\t\t}\n\t\tPrism.plugins.fileHighlight.highlight.apply(this, arguments);\n\t};\n\n}());\n","Prism.languages.json={property:{pattern:/(^|[^\\\\])\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?=\\s*:)/,lookbehind:!0,greedy:!0},string:{pattern:/(^|[^\\\\])\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?!\\s*:)/,lookbehind:!0,greedy:!0},comment:{pattern:/\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,greedy:!0},number:/-?\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,punctuation:/[{}[\\],]/,operator:/:/,boolean:/\\b(?:false|true)\\b/,null:{pattern:/\\bnull\\b/,alias:\"keyword\"}},Prism.languages.webmanifest=Prism.languages.json;","!function(e){e.languages.typescript=e.languages.extend(\"javascript\",{\"class-name\":{pattern:/(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,lookbehind:!0,greedy:!0,inside:null},builtin:/\\b(?:Array|Function|Promise|any|boolean|console|never|number|string|symbol|unknown)\\b/}),e.languages.typescript.keyword.push(/\\b(?:abstract|declare|is|keyof|readonly|require)\\b/,/\\b(?:asserts|infer|interface|module|namespace|type)\\b(?=\\s*(?:[{_$a-zA-Z\\xA0-\\uFFFF]|$))/,/\\btype\\b(?=\\s*(?:[\\{*]|$))/),delete e.languages.typescript.parameter,delete e.languages.typescript[\"literal-property\"];var s=e.languages.extend(\"typescript\",{});delete s[\"class-name\"],e.languages.typescript[\"class-name\"].inside=s,e.languages.insertBefore(\"typescript\",\"function\",{decorator:{pattern:/@[$\\w\\xA0-\\uFFFF]+/,inside:{at:{pattern:/^@/,alias:\"operator\"},function:/^[\\s\\S]+/}},\"generic-function\":{pattern:/#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,greedy:!0,inside:{function:/^#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/,generic:{pattern:/<[\\s\\S]+/,alias:\"class-name\",inside:s}}}}),e.languages.ts=e.languages.typescript}(Prism);","!function(s){var e=/(?:\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n])*')/;s.languages.css={comment:/\\/\\*[\\s\\S]*?\\*\\//,atrule:{pattern:RegExp(\"@[\\\\w-](?:[^;{\\\\s\\\"']|\\\\s+(?!\\\\s)|\"+e.source+\")*?(?:;|(?=\\\\s*\\\\{))\"),inside:{rule:/^@[\\w-]+/,\"selector-function-argument\":{pattern:/(\\bselector\\s*\\(\\s*(?![\\s)]))(?:[^()\\s]|\\s+(?![\\s)])|\\((?:[^()]|\\([^()]*\\))*\\))+(?=\\s*\\))/,lookbehind:!0,alias:\"selector\"},keyword:{pattern:/(^|[^\\w-])(?:and|not|only|or)(?![\\w-])/,lookbehind:!0}}},url:{pattern:RegExp(\"\\\\burl\\\\((?:\"+e.source+\"|(?:[^\\\\\\\\\\r\\n()\\\"']|\\\\\\\\[^])*)\\\\)\",\"i\"),greedy:!0,inside:{function:/^url/i,punctuation:/^\\(|\\)$/,string:{pattern:RegExp(\"^\"+e.source+\"$\"),alias:\"url\"}}},selector:{pattern:RegExp(\"(^|[{}\\\\s])[^{}\\\\s](?:[^{};\\\"'\\\\s]|\\\\s+(?![\\\\s{])|\"+e.source+\")*(?=\\\\s*\\\\{)\"),lookbehind:!0},string:{pattern:e,greedy:!0},property:{pattern:/(^|[^-\\w\\xA0-\\uFFFF])(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*(?=\\s*:)/i,lookbehind:!0},important:/!important\\b/i,function:{pattern:/(^|[^-a-z0-9])[-a-z0-9]+(?=\\()/i,lookbehind:!0},punctuation:/[(){};:,]/},s.languages.css.atrule.inside.rest=s.languages.css;var t=s.languages.markup;t&&(t.tag.addInlined(\"style\",\"css\"),t.tag.addAttribute(\"style\",\"css\"))}(Prism);"],"x_google_ignoreList":[]}