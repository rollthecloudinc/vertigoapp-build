{"version":3,"file":"7888.9cb5530ddcf23135.js","mappings":"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","names":["ObjectUnsubscribedError","createErrorClass","_super","this","name","message","Subject","_Observable","_inherits","_createSuper","_this","_classCallCheck","call","closed","currentObservers","observers","isStopped","hasError","thrownError","_createClass","key","value","operator","subject","AnonymousSubject","_this2","errorContext","_throwIfClosed","Array","from","_step","_iterator","_createForOfIteratorHelper","s","n","done","next","err","e","f","_this3","length","shift","error","_this4","complete","get","_a","subscriber","_get","_getPrototypeOf","prototype","_checkFinalizedStatuses","_innerSubscribe","_this5","EMPTY_SUBSCRIPTION","push","Subscription","arrRemove","observable","Observable","source","create","destination","_Subject","_super2","_this6","_b","subscribe","ConnectableObservable","subjectFactory","_subject","_refCount","_connection","hasLift","lift","getSubject","unsubscribe","connection","add","createOperatorSubscriber","undefined","_teardown","higherOrderRefCount","subscribeOn","scheduler","delay","arguments","operate","schedule","scheduleAsyncIterable","input","Error","executeSchedule","iterator","Symbol","asyncIterator","then","result","scheduled","isInteropObservable","scheduleObservable","innerFrom","pipe","observeOn","isArrayLike","scheduleArray","i","isPromise","schedulePromise","isAsyncIterable","isIterable","scheduleIterable","Symbol_iterator","_iterator$next","isFunction","return","isReadableStreamLike","scheduleReadableStreamLike","readableStreamLikeToAsyncGenerator","createInvalidObservableTypeError","of","_len","args","_key","popScheduler","onNext","onComplete","onError","onFinalize","OperatorSubscriber","_Subscriber","shouldUnsubscribe","_thisSuper","_thisSuper2","_thisSuper3","_next","_assertThisInitialized","_error","_complete","Subscriber","refCount","refCounter","sharedConnection","conn","connect","last","arr","popResultSelector","pop","isScheduler","popNumber","defaultValue","parentSubscription","work","repeat","scheduleSubscription","isObservable","obj","init","liftedSource","TypeError","DataSource","isDataSource","ArrayDataSource","_DataSource","_data","_DisposeViewRepeaterStrategy","changes","viewContainerRef","itemContextFactory","itemValueResolver","itemViewChanged","forEachOperation","record","adjustedPreviousIndex","currentIndex","view","operation","_view","previousIndex","insertContext","createEmbeddedView","templateRef","context","index","remove","move","_RecycleViewRepeaterStrategy","viewCacheSize","_viewCache","_view2","_insertView","_detachAndCacheView","_moveView","destroy","viewArgsFactory","cachedView","_insertViewFromCache","viewArgs","$implicit","detachedView","detach","_maybeCacheView","indexOf","insert","SelectionModel","_multiple","initiallySelectedValues","_emitChanges","compareWith","_selection","Set","_deselectedToEmit","_selectedToEmit","changed","forEach","_markSelected","_selected","values","_verifyValueAssignment","_hasQueuedChanges","_emitChangeEvent","_len2","_key2","_unmarkSelected","_len3","_key3","oldValues","selected","newSelectedSet","filter","has","isSelected","deselect","select","flushEvent","_unmarkAll","_getConcreteValue","size","isEmpty","predicate","sort","added","removed","delete","_this7","inputValue","_step2","_iterator2","selectedValue","getMultipleValuesInSingleSelectionError","UniqueSelectionDispatcher","_listeners","id","_step3","_iterator3","listener","_this8","registered","ɵfac","t","ɵprov","i0","token","factory","providedIn","_VIEW_REPEATER_STRATEGY","InjectionToken","_arrayLikeToArray","len","arr2","o","allowArrayLike","it","isArray","_unsupportedIterableToArray_js__WEBPACK_IMPORTED_MODULE_0__","Z","F","_e","normalCompletion","didErr","step","_e2","_iterableToArray","iter","_toConsumableArray","_arrayWithoutHoles","arrayLikeToArray","iterableToArray","unsupportedIterableToArray","_nonIterableSpread","_unsupportedIterableToArray","minLen","_arrayLikeToArray_js__WEBPACK_IMPORTED_MODULE_0__","Object","toString","slice","constructor","test"],"sourceRoot":"webpack:///","sources":["./node_modules/rxjs/dist/esm/internal/util/ObjectUnsubscribedError.js","./node_modules/rxjs/dist/esm/internal/Subject.js","./node_modules/rxjs/dist/esm/internal/observable/ConnectableObservable.js","./node_modules/rxjs/dist/esm/internal/operators/subscribeOn.js","./node_modules/rxjs/dist/esm/internal/scheduled/scheduleAsyncIterable.js","./node_modules/rxjs/dist/esm/internal/observable/from.js","./node_modules/rxjs/dist/esm/internal/scheduled/scheduled.js","./node_modules/rxjs/dist/esm/internal/scheduled/scheduleObservable.js","./node_modules/rxjs/dist/esm/internal/scheduled/scheduleArray.js","./node_modules/rxjs/dist/esm/internal/scheduled/schedulePromise.js","./node_modules/rxjs/dist/esm/internal/scheduled/scheduleIterable.js","./node_modules/rxjs/dist/esm/internal/scheduled/scheduleReadableStreamLike.js","./node_modules/rxjs/dist/esm/internal/observable/of.js","./node_modules/rxjs/dist/esm/internal/operators/OperatorSubscriber.js","./node_modules/rxjs/dist/esm/internal/operators/observeOn.js","./node_modules/rxjs/dist/esm/internal/operators/refCount.js","./node_modules/rxjs/dist/esm/internal/util/args.js","./node_modules/rxjs/dist/esm/internal/util/executeSchedule.js","./node_modules/rxjs/dist/esm/internal/util/isObservable.js","./node_modules/rxjs/dist/esm/internal/util/isScheduler.js","./node_modules/rxjs/dist/esm/internal/util/lift.js","./node_modules/@angular/cdk/fesm2022/collections.mjs","./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","./node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","./node_modules/@babel/runtime/helpers/esm/iterableToArray.js","./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js"],"sourcesContent":["import { createErrorClass } from './createErrorClass';\nexport const ObjectUnsubscribedError = createErrorClass((_super) => function ObjectUnsubscribedErrorImpl() {\n    _super(this);\n    this.name = 'ObjectUnsubscribedError';\n    this.message = 'object unsubscribed';\n});\n","import { Observable } from './Observable';\nimport { Subscription, EMPTY_SUBSCRIPTION } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { arrRemove } from './util/arrRemove';\nimport { errorContext } from './util/errorContext';\nexport class Subject extends Observable {\n    constructor() {\n        super();\n        this.closed = false;\n        this.currentObservers = null;\n        this.observers = [];\n        this.isStopped = false;\n        this.hasError = false;\n        this.thrownError = null;\n    }\n    lift(operator) {\n        const subject = new AnonymousSubject(this, this);\n        subject.operator = operator;\n        return subject;\n    }\n    _throwIfClosed() {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n    }\n    next(value) {\n        errorContext(() => {\n            this._throwIfClosed();\n            if (!this.isStopped) {\n                if (!this.currentObservers) {\n                    this.currentObservers = Array.from(this.observers);\n                }\n                for (const observer of this.currentObservers) {\n                    observer.next(value);\n                }\n            }\n        });\n    }\n    error(err) {\n        errorContext(() => {\n            this._throwIfClosed();\n            if (!this.isStopped) {\n                this.hasError = this.isStopped = true;\n                this.thrownError = err;\n                const { observers } = this;\n                while (observers.length) {\n                    observers.shift().error(err);\n                }\n            }\n        });\n    }\n    complete() {\n        errorContext(() => {\n            this._throwIfClosed();\n            if (!this.isStopped) {\n                this.isStopped = true;\n                const { observers } = this;\n                while (observers.length) {\n                    observers.shift().complete();\n                }\n            }\n        });\n    }\n    unsubscribe() {\n        this.isStopped = this.closed = true;\n        this.observers = this.currentObservers = null;\n    }\n    get observed() {\n        var _a;\n        return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;\n    }\n    _trySubscribe(subscriber) {\n        this._throwIfClosed();\n        return super._trySubscribe(subscriber);\n    }\n    _subscribe(subscriber) {\n        this._throwIfClosed();\n        this._checkFinalizedStatuses(subscriber);\n        return this._innerSubscribe(subscriber);\n    }\n    _innerSubscribe(subscriber) {\n        const { hasError, isStopped, observers } = this;\n        if (hasError || isStopped) {\n            return EMPTY_SUBSCRIPTION;\n        }\n        this.currentObservers = null;\n        observers.push(subscriber);\n        return new Subscription(() => {\n            this.currentObservers = null;\n            arrRemove(observers, subscriber);\n        });\n    }\n    _checkFinalizedStatuses(subscriber) {\n        const { hasError, thrownError, isStopped } = this;\n        if (hasError) {\n            subscriber.error(thrownError);\n        }\n        else if (isStopped) {\n            subscriber.complete();\n        }\n    }\n    asObservable() {\n        const observable = new Observable();\n        observable.source = this;\n        return observable;\n    }\n}\nSubject.create = (destination, source) => {\n    return new AnonymousSubject(destination, source);\n};\nexport class AnonymousSubject extends Subject {\n    constructor(destination, source) {\n        super();\n        this.destination = destination;\n        this.source = source;\n    }\n    next(value) {\n        var _a, _b;\n        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.call(_a, value);\n    }\n    error(err) {\n        var _a, _b;\n        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.call(_a, err);\n    }\n    complete() {\n        var _a, _b;\n        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);\n    }\n    _subscribe(subscriber) {\n        var _a, _b;\n        return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : EMPTY_SUBSCRIPTION;\n    }\n}\n","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\nimport { createOperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { hasLift } from '../util/lift';\nexport class ConnectableObservable extends Observable {\n    constructor(source, subjectFactory) {\n        super();\n        this.source = source;\n        this.subjectFactory = subjectFactory;\n        this._subject = null;\n        this._refCount = 0;\n        this._connection = null;\n        if (hasLift(source)) {\n            this.lift = source.lift;\n        }\n    }\n    _subscribe(subscriber) {\n        return this.getSubject().subscribe(subscriber);\n    }\n    getSubject() {\n        const subject = this._subject;\n        if (!subject || subject.isStopped) {\n            this._subject = this.subjectFactory();\n        }\n        return this._subject;\n    }\n    _teardown() {\n        this._refCount = 0;\n        const { _connection } = this;\n        this._subject = this._connection = null;\n        _connection === null || _connection === void 0 ? void 0 : _connection.unsubscribe();\n    }\n    connect() {\n        let connection = this._connection;\n        if (!connection) {\n            connection = this._connection = new Subscription();\n            const subject = this.getSubject();\n            connection.add(this.source.subscribe(createOperatorSubscriber(subject, undefined, () => {\n                this._teardown();\n                subject.complete();\n            }, (err) => {\n                this._teardown();\n                subject.error(err);\n            }, () => this._teardown())));\n            if (connection.closed) {\n                this._connection = null;\n                connection = Subscription.EMPTY;\n            }\n        }\n        return connection;\n    }\n    refCount() {\n        return higherOrderRefCount()(this);\n    }\n}\n","import { operate } from '../util/lift';\nexport function subscribeOn(scheduler, delay = 0) {\n    return operate((source, subscriber) => {\n        subscriber.add(scheduler.schedule(() => source.subscribe(subscriber), delay));\n    });\n}\n","import { Observable } from '../Observable';\nimport { executeSchedule } from '../util/executeSchedule';\nexport function scheduleAsyncIterable(input, scheduler) {\n    if (!input) {\n        throw new Error('Iterable cannot be null');\n    }\n    return new Observable((subscriber) => {\n        executeSchedule(subscriber, scheduler, () => {\n            const iterator = input[Symbol.asyncIterator]();\n            executeSchedule(subscriber, scheduler, () => {\n                iterator.next().then((result) => {\n                    if (result.done) {\n                        subscriber.complete();\n                    }\n                    else {\n                        subscriber.next(result.value);\n                    }\n                });\n            }, 0, true);\n        });\n    });\n}\n","import { scheduled } from '../scheduled/scheduled';\nimport { innerFrom } from './innerFrom';\nexport function from(input, scheduler) {\n    return scheduler ? scheduled(input, scheduler) : innerFrom(input);\n}\n","import { scheduleObservable } from './scheduleObservable';\nimport { schedulePromise } from './schedulePromise';\nimport { scheduleArray } from './scheduleArray';\nimport { scheduleIterable } from './scheduleIterable';\nimport { scheduleAsyncIterable } from './scheduleAsyncIterable';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isPromise } from '../util/isPromise';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isIterable } from '../util/isIterable';\nimport { isAsyncIterable } from '../util/isAsyncIterable';\nimport { createInvalidObservableTypeError } from '../util/throwUnobservableError';\nimport { isReadableStreamLike } from '../util/isReadableStreamLike';\nimport { scheduleReadableStreamLike } from './scheduleReadableStreamLike';\nexport function scheduled(input, scheduler) {\n    if (input != null) {\n        if (isInteropObservable(input)) {\n            return scheduleObservable(input, scheduler);\n        }\n        if (isArrayLike(input)) {\n            return scheduleArray(input, scheduler);\n        }\n        if (isPromise(input)) {\n            return schedulePromise(input, scheduler);\n        }\n        if (isAsyncIterable(input)) {\n            return scheduleAsyncIterable(input, scheduler);\n        }\n        if (isIterable(input)) {\n            return scheduleIterable(input, scheduler);\n        }\n        if (isReadableStreamLike(input)) {\n            return scheduleReadableStreamLike(input, scheduler);\n        }\n    }\n    throw createInvalidObservableTypeError(input);\n}\n","import { innerFrom } from '../observable/innerFrom';\nimport { observeOn } from '../operators/observeOn';\nimport { subscribeOn } from '../operators/subscribeOn';\nexport function scheduleObservable(input, scheduler) {\n    return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));\n}\n","import { Observable } from '../Observable';\nexport function scheduleArray(input, scheduler) {\n    return new Observable((subscriber) => {\n        let i = 0;\n        return scheduler.schedule(function () {\n            if (i === input.length) {\n                subscriber.complete();\n            }\n            else {\n                subscriber.next(input[i++]);\n                if (!subscriber.closed) {\n                    this.schedule();\n                }\n            }\n        });\n    });\n}\n","import { innerFrom } from '../observable/innerFrom';\nimport { observeOn } from '../operators/observeOn';\nimport { subscribeOn } from '../operators/subscribeOn';\nexport function schedulePromise(input, scheduler) {\n    return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));\n}\n","import { Observable } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { isFunction } from '../util/isFunction';\nimport { executeSchedule } from '../util/executeSchedule';\nexport function scheduleIterable(input, scheduler) {\n    return new Observable((subscriber) => {\n        let iterator;\n        executeSchedule(subscriber, scheduler, () => {\n            iterator = input[Symbol_iterator]();\n            executeSchedule(subscriber, scheduler, () => {\n                let value;\n                let done;\n                try {\n                    ({ value, done } = iterator.next());\n                }\n                catch (err) {\n                    subscriber.error(err);\n                    return;\n                }\n                if (done) {\n                    subscriber.complete();\n                }\n                else {\n                    subscriber.next(value);\n                }\n            }, 0, true);\n        });\n        return () => isFunction(iterator === null || iterator === void 0 ? void 0 : iterator.return) && iterator.return();\n    });\n}\n","import { scheduleAsyncIterable } from './scheduleAsyncIterable';\nimport { readableStreamLikeToAsyncGenerator } from '../util/isReadableStreamLike';\nexport function scheduleReadableStreamLike(input, scheduler) {\n    return scheduleAsyncIterable(readableStreamLikeToAsyncGenerator(input), scheduler);\n}\n","import { popScheduler } from '../util/args';\nimport { from } from './from';\nexport function of(...args) {\n    const scheduler = popScheduler(args);\n    return from(args, scheduler);\n}\n","import { Subscriber } from '../Subscriber';\nexport function createOperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {\n    return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);\n}\nexport class OperatorSubscriber extends Subscriber {\n    constructor(destination, onNext, onComplete, onError, onFinalize, shouldUnsubscribe) {\n        super(destination);\n        this.onFinalize = onFinalize;\n        this.shouldUnsubscribe = shouldUnsubscribe;\n        this._next = onNext\n            ? function (value) {\n                try {\n                    onNext(value);\n                }\n                catch (err) {\n                    destination.error(err);\n                }\n            }\n            : super._next;\n        this._error = onError\n            ? function (err) {\n                try {\n                    onError(err);\n                }\n                catch (err) {\n                    destination.error(err);\n                }\n                finally {\n                    this.unsubscribe();\n                }\n            }\n            : super._error;\n        this._complete = onComplete\n            ? function () {\n                try {\n                    onComplete();\n                }\n                catch (err) {\n                    destination.error(err);\n                }\n                finally {\n                    this.unsubscribe();\n                }\n            }\n            : super._complete;\n    }\n    unsubscribe() {\n        var _a;\n        if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {\n            const { closed } = this;\n            super.unsubscribe();\n            !closed && ((_a = this.onFinalize) === null || _a === void 0 ? void 0 : _a.call(this));\n        }\n    }\n}\n","import { executeSchedule } from '../util/executeSchedule';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function observeOn(scheduler, delay = 0) {\n    return operate((source, subscriber) => {\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => executeSchedule(subscriber, scheduler, () => subscriber.next(value), delay), () => executeSchedule(subscriber, scheduler, () => subscriber.complete(), delay), (err) => executeSchedule(subscriber, scheduler, () => subscriber.error(err), delay)));\n    });\n}\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function refCount() {\n    return operate((source, subscriber) => {\n        let connection = null;\n        source._refCount++;\n        const refCounter = createOperatorSubscriber(subscriber, undefined, undefined, undefined, () => {\n            if (!source || source._refCount <= 0 || 0 < --source._refCount) {\n                connection = null;\n                return;\n            }\n            const sharedConnection = source._connection;\n            const conn = connection;\n            connection = null;\n            if (sharedConnection && (!conn || sharedConnection === conn)) {\n                sharedConnection.unsubscribe();\n            }\n            subscriber.unsubscribe();\n        });\n        source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            connection = source.connect();\n        }\n    });\n}\n","import { isFunction } from './isFunction';\nimport { isScheduler } from './isScheduler';\nfunction last(arr) {\n    return arr[arr.length - 1];\n}\nexport function popResultSelector(args) {\n    return isFunction(last(args)) ? args.pop() : undefined;\n}\nexport function popScheduler(args) {\n    return isScheduler(last(args)) ? args.pop() : undefined;\n}\nexport function popNumber(args, defaultValue) {\n    return typeof last(args) === 'number' ? args.pop() : defaultValue;\n}\n","export function executeSchedule(parentSubscription, scheduler, work, delay = 0, repeat = false) {\n    const scheduleSubscription = scheduler.schedule(function () {\n        work();\n        if (repeat) {\n            parentSubscription.add(this.schedule(null, delay));\n        }\n        else {\n            this.unsubscribe();\n        }\n    }, delay);\n    parentSubscription.add(scheduleSubscription);\n    if (!repeat) {\n        return scheduleSubscription;\n    }\n}\n","import { Observable } from '../Observable';\nimport { isFunction } from './isFunction';\nexport function isObservable(obj) {\n    return !!obj && (obj instanceof Observable || (isFunction(obj.lift) && isFunction(obj.subscribe)));\n}\n","import { isFunction } from './isFunction';\nexport function isScheduler(value) {\n    return value && isFunction(value.schedule);\n}\n","import { isFunction } from './isFunction';\nexport function hasLift(source) {\n    return isFunction(source === null || source === void 0 ? void 0 : source.lift);\n}\nexport function operate(init) {\n    return (source) => {\n        if (hasLift(source)) {\n            return source.lift(function (liftedSource) {\n                try {\n                    return init(liftedSource, this);\n                }\n                catch (err) {\n                    this.error(err);\n                }\n            });\n        }\n        throw new TypeError('Unable to lift unknown Observable type');\n    };\n}\n","import { ConnectableObservable, isObservable, of, Subject } from 'rxjs';\nimport * as i0 from '@angular/core';\nimport { Injectable, InjectionToken } from '@angular/core';\n\nclass DataSource {\n}\n/** Checks whether an object is a data source. */\nfunction isDataSource(value) {\n    // Check if the value is a DataSource by observing if it has a connect function. Cannot\n    // be checked as an `instanceof DataSource` since people could create their own sources\n    // that match the interface, but don't extend DataSource. We also can't use `isObservable`\n    // here, because of some internal apps.\n    return value && typeof value.connect === 'function' && !(value instanceof ConnectableObservable);\n}\n\n/** DataSource wrapper for a native array. */\nclass ArrayDataSource extends DataSource {\n    constructor(_data) {\n        super();\n        this._data = _data;\n    }\n    connect() {\n        return isObservable(this._data) ? this._data : of(this._data);\n    }\n    disconnect() { }\n}\n\n/**\n * A repeater that destroys views when they are removed from a\n * {@link ViewContainerRef}. When new items are inserted into the container,\n * the repeater will always construct a new embedded view for each item.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nclass _DisposeViewRepeaterStrategy {\n    applyChanges(changes, viewContainerRef, itemContextFactory, itemValueResolver, itemViewChanged) {\n        changes.forEachOperation((record, adjustedPreviousIndex, currentIndex) => {\n            let view;\n            let operation;\n            if (record.previousIndex == null) {\n                const insertContext = itemContextFactory(record, adjustedPreviousIndex, currentIndex);\n                view = viewContainerRef.createEmbeddedView(insertContext.templateRef, insertContext.context, insertContext.index);\n                operation = 1 /* _ViewRepeaterOperation.INSERTED */;\n            }\n            else if (currentIndex == null) {\n                viewContainerRef.remove(adjustedPreviousIndex);\n                operation = 3 /* _ViewRepeaterOperation.REMOVED */;\n            }\n            else {\n                view = viewContainerRef.get(adjustedPreviousIndex);\n                viewContainerRef.move(view, currentIndex);\n                operation = 2 /* _ViewRepeaterOperation.MOVED */;\n            }\n            if (itemViewChanged) {\n                itemViewChanged({\n                    context: view?.context,\n                    operation,\n                    record,\n                });\n            }\n        });\n    }\n    detach() { }\n}\n\n/**\n * A repeater that caches views when they are removed from a\n * {@link ViewContainerRef}. When new items are inserted into the container,\n * the repeater will reuse one of the cached views instead of creating a new\n * embedded view. Recycling cached views reduces the quantity of expensive DOM\n * inserts.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nclass _RecycleViewRepeaterStrategy {\n    constructor() {\n        /**\n         * The size of the cache used to store unused views.\n         * Setting the cache size to `0` will disable caching. Defaults to 20 views.\n         */\n        this.viewCacheSize = 20;\n        /**\n         * View cache that stores embedded view instances that have been previously stamped out,\n         * but don't are not currently rendered. The view repeater will reuse these views rather than\n         * creating brand new ones.\n         *\n         * TODO(michaeljamesparsons) Investigate whether using a linked list would improve performance.\n         */\n        this._viewCache = [];\n    }\n    /** Apply changes to the DOM. */\n    applyChanges(changes, viewContainerRef, itemContextFactory, itemValueResolver, itemViewChanged) {\n        // Rearrange the views to put them in the right location.\n        changes.forEachOperation((record, adjustedPreviousIndex, currentIndex) => {\n            let view;\n            let operation;\n            if (record.previousIndex == null) {\n                // Item added.\n                const viewArgsFactory = () => itemContextFactory(record, adjustedPreviousIndex, currentIndex);\n                view = this._insertView(viewArgsFactory, currentIndex, viewContainerRef, itemValueResolver(record));\n                operation = view ? 1 /* _ViewRepeaterOperation.INSERTED */ : 0 /* _ViewRepeaterOperation.REPLACED */;\n            }\n            else if (currentIndex == null) {\n                // Item removed.\n                this._detachAndCacheView(adjustedPreviousIndex, viewContainerRef);\n                operation = 3 /* _ViewRepeaterOperation.REMOVED */;\n            }\n            else {\n                // Item moved.\n                view = this._moveView(adjustedPreviousIndex, currentIndex, viewContainerRef, itemValueResolver(record));\n                operation = 2 /* _ViewRepeaterOperation.MOVED */;\n            }\n            if (itemViewChanged) {\n                itemViewChanged({\n                    context: view?.context,\n                    operation,\n                    record,\n                });\n            }\n        });\n    }\n    detach() {\n        for (const view of this._viewCache) {\n            view.destroy();\n        }\n        this._viewCache = [];\n    }\n    /**\n     * Inserts a view for a new item, either from the cache or by creating a new\n     * one. Returns `undefined` if the item was inserted into a cached view.\n     */\n    _insertView(viewArgsFactory, currentIndex, viewContainerRef, value) {\n        const cachedView = this._insertViewFromCache(currentIndex, viewContainerRef);\n        if (cachedView) {\n            cachedView.context.$implicit = value;\n            return undefined;\n        }\n        const viewArgs = viewArgsFactory();\n        return viewContainerRef.createEmbeddedView(viewArgs.templateRef, viewArgs.context, viewArgs.index);\n    }\n    /** Detaches the view at the given index and inserts into the view cache. */\n    _detachAndCacheView(index, viewContainerRef) {\n        const detachedView = viewContainerRef.detach(index);\n        this._maybeCacheView(detachedView, viewContainerRef);\n    }\n    /** Moves view at the previous index to the current index. */\n    _moveView(adjustedPreviousIndex, currentIndex, viewContainerRef, value) {\n        const view = viewContainerRef.get(adjustedPreviousIndex);\n        viewContainerRef.move(view, currentIndex);\n        view.context.$implicit = value;\n        return view;\n    }\n    /**\n     * Cache the given detached view. If the cache is full, the view will be\n     * destroyed.\n     */\n    _maybeCacheView(view, viewContainerRef) {\n        if (this._viewCache.length < this.viewCacheSize) {\n            this._viewCache.push(view);\n        }\n        else {\n            const index = viewContainerRef.indexOf(view);\n            // The host component could remove views from the container outside of\n            // the view repeater. It's unlikely this will occur, but just in case,\n            // destroy the view on its own, otherwise destroy it through the\n            // container to ensure that all the references are removed.\n            if (index === -1) {\n                view.destroy();\n            }\n            else {\n                viewContainerRef.remove(index);\n            }\n        }\n    }\n    /** Inserts a recycled view from the cache at the given index. */\n    _insertViewFromCache(index, viewContainerRef) {\n        const cachedView = this._viewCache.pop();\n        if (cachedView) {\n            viewContainerRef.insert(cachedView, index);\n        }\n        return cachedView || null;\n    }\n}\n\n/**\n * Class to be used to power selecting one or more options from a list.\n */\nclass SelectionModel {\n    /** Selected values. */\n    get selected() {\n        if (!this._selected) {\n            this._selected = Array.from(this._selection.values());\n        }\n        return this._selected;\n    }\n    constructor(_multiple = false, initiallySelectedValues, _emitChanges = true, compareWith) {\n        this._multiple = _multiple;\n        this._emitChanges = _emitChanges;\n        this.compareWith = compareWith;\n        /** Currently-selected values. */\n        this._selection = new Set();\n        /** Keeps track of the deselected options that haven't been emitted by the change event. */\n        this._deselectedToEmit = [];\n        /** Keeps track of the selected options that haven't been emitted by the change event. */\n        this._selectedToEmit = [];\n        /** Event emitted when the value has changed. */\n        this.changed = new Subject();\n        if (initiallySelectedValues && initiallySelectedValues.length) {\n            if (_multiple) {\n                initiallySelectedValues.forEach(value => this._markSelected(value));\n            }\n            else {\n                this._markSelected(initiallySelectedValues[0]);\n            }\n            // Clear the array in order to avoid firing the change event for preselected values.\n            this._selectedToEmit.length = 0;\n        }\n    }\n    /**\n     * Selects a value or an array of values.\n     * @param values The values to select\n     * @return Whether the selection changed as a result of this call\n     * @breaking-change 16.0.0 make return type boolean\n     */\n    select(...values) {\n        this._verifyValueAssignment(values);\n        values.forEach(value => this._markSelected(value));\n        const changed = this._hasQueuedChanges();\n        this._emitChangeEvent();\n        return changed;\n    }\n    /**\n     * Deselects a value or an array of values.\n     * @param values The values to deselect\n     * @return Whether the selection changed as a result of this call\n     * @breaking-change 16.0.0 make return type boolean\n     */\n    deselect(...values) {\n        this._verifyValueAssignment(values);\n        values.forEach(value => this._unmarkSelected(value));\n        const changed = this._hasQueuedChanges();\n        this._emitChangeEvent();\n        return changed;\n    }\n    /**\n     * Sets the selected values\n     * @param values The new selected values\n     * @return Whether the selection changed as a result of this call\n     * @breaking-change 16.0.0 make return type boolean\n     */\n    setSelection(...values) {\n        this._verifyValueAssignment(values);\n        const oldValues = this.selected;\n        const newSelectedSet = new Set(values);\n        values.forEach(value => this._markSelected(value));\n        oldValues\n            .filter(value => !newSelectedSet.has(value))\n            .forEach(value => this._unmarkSelected(value));\n        const changed = this._hasQueuedChanges();\n        this._emitChangeEvent();\n        return changed;\n    }\n    /**\n     * Toggles a value between selected and deselected.\n     * @param value The value to toggle\n     * @return Whether the selection changed as a result of this call\n     * @breaking-change 16.0.0 make return type boolean\n     */\n    toggle(value) {\n        return this.isSelected(value) ? this.deselect(value) : this.select(value);\n    }\n    /**\n     * Clears all of the selected values.\n     * @param flushEvent Whether to flush the changes in an event.\n     *   If false, the changes to the selection will be flushed along with the next event.\n     * @return Whether the selection changed as a result of this call\n     * @breaking-change 16.0.0 make return type boolean\n     */\n    clear(flushEvent = true) {\n        this._unmarkAll();\n        const changed = this._hasQueuedChanges();\n        if (flushEvent) {\n            this._emitChangeEvent();\n        }\n        return changed;\n    }\n    /**\n     * Determines whether a value is selected.\n     */\n    isSelected(value) {\n        return this._selection.has(this._getConcreteValue(value));\n    }\n    /**\n     * Determines whether the model does not have a value.\n     */\n    isEmpty() {\n        return this._selection.size === 0;\n    }\n    /**\n     * Determines whether the model has a value.\n     */\n    hasValue() {\n        return !this.isEmpty();\n    }\n    /**\n     * Sorts the selected values based on a predicate function.\n     */\n    sort(predicate) {\n        if (this._multiple && this.selected) {\n            this._selected.sort(predicate);\n        }\n    }\n    /**\n     * Gets whether multiple values can be selected.\n     */\n    isMultipleSelection() {\n        return this._multiple;\n    }\n    /** Emits a change event and clears the records of selected and deselected values. */\n    _emitChangeEvent() {\n        // Clear the selected values so they can be re-cached.\n        this._selected = null;\n        if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n            this.changed.next({\n                source: this,\n                added: this._selectedToEmit,\n                removed: this._deselectedToEmit,\n            });\n            this._deselectedToEmit = [];\n            this._selectedToEmit = [];\n        }\n    }\n    /** Selects a value. */\n    _markSelected(value) {\n        value = this._getConcreteValue(value);\n        if (!this.isSelected(value)) {\n            if (!this._multiple) {\n                this._unmarkAll();\n            }\n            if (!this.isSelected(value)) {\n                this._selection.add(value);\n            }\n            if (this._emitChanges) {\n                this._selectedToEmit.push(value);\n            }\n        }\n    }\n    /** Deselects a value. */\n    _unmarkSelected(value) {\n        value = this._getConcreteValue(value);\n        if (this.isSelected(value)) {\n            this._selection.delete(value);\n            if (this._emitChanges) {\n                this._deselectedToEmit.push(value);\n            }\n        }\n    }\n    /** Clears out the selected values. */\n    _unmarkAll() {\n        if (!this.isEmpty()) {\n            this._selection.forEach(value => this._unmarkSelected(value));\n        }\n    }\n    /**\n     * Verifies the value assignment and throws an error if the specified value array is\n     * including multiple values while the selection model is not supporting multiple values.\n     */\n    _verifyValueAssignment(values) {\n        if (values.length > 1 && !this._multiple && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMultipleValuesInSingleSelectionError();\n        }\n    }\n    /** Whether there are queued up change to be emitted. */\n    _hasQueuedChanges() {\n        return !!(this._deselectedToEmit.length || this._selectedToEmit.length);\n    }\n    /** Returns a value that is comparable to inputValue by applying compareWith function, returns the same inputValue otherwise. */\n    _getConcreteValue(inputValue) {\n        if (!this.compareWith) {\n            return inputValue;\n        }\n        else {\n            for (let selectedValue of this._selection) {\n                if (this.compareWith(inputValue, selectedValue)) {\n                    return selectedValue;\n                }\n            }\n            return inputValue;\n        }\n    }\n}\n/**\n * Returns an error that reports that multiple values are passed into a selection model\n * with a single value.\n * @docs-private\n */\nfunction getMultipleValuesInSingleSelectionError() {\n    return Error('Cannot pass multiple values into SelectionModel with single-value mode.');\n}\n\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\nclass UniqueSelectionDispatcher {\n    constructor() {\n        this._listeners = [];\n    }\n    /**\n     * Notify other items that selection for the given name has been set.\n     * @param id ID of the item.\n     * @param name Name of the item.\n     */\n    notify(id, name) {\n        for (let listener of this._listeners) {\n            listener(id, name);\n        }\n    }\n    /**\n     * Listen for future changes to item selection.\n     * @return Function used to deregister listener\n     */\n    listen(listener) {\n        this._listeners.push(listener);\n        return () => {\n            this._listeners = this._listeners.filter((registered) => {\n                return listener !== registered;\n            });\n        };\n    }\n    ngOnDestroy() {\n        this._listeners = [];\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: UniqueSelectionDispatcher, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: UniqueSelectionDispatcher, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: UniqueSelectionDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\n/**\n * Injection token for {@link _ViewRepeater}. This token is for use by Angular Material only.\n * @docs-private\n */\nconst _VIEW_REPEATER_STRATEGY = new InjectionToken('_ViewRepeater');\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ArrayDataSource, DataSource, SelectionModel, UniqueSelectionDispatcher, _DisposeViewRepeaterStrategy, _RecycleViewRepeaterStrategy, _VIEW_REPEATER_STRATEGY, getMultipleValuesInSingleSelectionError, isDataSource };\n","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}"],"x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28]}