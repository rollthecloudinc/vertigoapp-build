{"version":3,"file":"1056.479b54b8f638c311.js","mappings":"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","names":["ObjectUnsubscribedError","createErrorClass","_super","this","name","message","Subject","_Observable","_inherits","_createSuper","_this","_classCallCheck","call","closed","currentObservers","observers","isStopped","hasError","thrownError","_createClass","key","value","operator","subject","AnonymousSubject","_this2","errorContext","_throwIfClosed","Array","from","_step","_iterator","_createForOfIteratorHelper","s","n","done","next","err","e","f","_this3","length","shift","error","_this4","complete","get","_a","subscriber","_get","_getPrototypeOf","prototype","_checkFinalizedStatuses","_innerSubscribe","_this5","EMPTY_SUBSCRIPTION","push","Subscription","arrRemove","observable","Observable","source","create","destination","_Subject","_super2","_this6","_b","subscribe","concat","_len","arguments","args","_key","concatAll","mergeAll","popScheduler","defer","observableFactory","innerFrom","EMPTY","subscribeOn","scheduler","delay","undefined","operate","add","schedule","scheduleAsyncIterable","input","Error","executeSchedule","iterator","Symbol","asyncIterator","then","result","scheduled","isInteropObservable","scheduleObservable","pipe","observeOn","isArrayLike","scheduleArray","i","isPromise","schedulePromise","isAsyncIterable","isIterable","scheduleIterable","Symbol_iterator","_iterator$next","isFunction","return","isReadableStreamLike","scheduleReadableStreamLike","readableStreamLikeToAsyncGenerator","createInvalidObservableTypeError","merge","concurrent","popNumber","Infinity","sources","createOperatorSubscriber","onNext","onComplete","onError","onFinalize","OperatorSubscriber","_Subscriber","shouldUnsubscribe","_thisSuper","_thisSuper2","_thisSuper3","_next","_assertThisInitialized","_error","unsubscribe","_complete","Subscriber","distinctUntilChanged","comparator","keySelector","identity","defaultCompare","previousKey","first","currentKey","a","b","filter","predicate","thisArg","index","mergeMap","project","resultSelector","map","ii","mergeInternals","onBeforeNext","expand","innerSubScheduler","additionalFinalizer","buffer","active","isComplete","checkComplete","outerNext","doInnerSub","innerComplete","innerValue","_loop","bufferedValue","startWith","values","switchMap","innerSubscriber","innerIndex","outerIndex","take","count","seen","takeUntil","notifier","noop","last","arr","popResultSelector","pop","isScheduler","defaultValue","parentSubscription","work","repeat","scheduleSubscription","hasLift","lift","init","liftedSource","TypeError","_c0","_c1","MatSelect_span_4_Template","rf","ctx","i0","ctx_r2","placeholder","MatSelect_span_5_span_1_Template","ctx_r5","triggerValue","MatSelect_span_5_ng_content_2_Template","MatSelect_span_5_Template","ctx_r3","customTrigger","MatSelect_ng_template_10_Template","_r9","$event","ctx_r8","_panelDoneAnimatingStream","toState","ctx_r10","_handleKeydown","ctx_r4","_getPanelTheme","panelClass","id","multiple","ariaLabel","_getPanelAriaLabelledby","_c2","_c3","matSelectAnimations","transformPanelWrap","trigger","transition","query","animateChild","optional","transformPanel","state","style","opacity","transform","animate","nextUniqueId","MAT_SELECT_SCROLL_STRATEGY","InjectionToken","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","overlay","scrollStrategies","reposition","MAT_SELECT_CONFIG","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","provide","deps","Overlay","useFactory","MAT_SELECT_TRIGGER","MatSelectChange","_MatSelectMixinBase","mixinDisableRipple","mixinTabIndex","mixinDisabled","mixinErrorState","_class","_elementRef","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","stateChanges","_MatSelectBase","_MatSelectMixinBase2","_viewportRuler","_changeDetectorRef","_ngZone","elementRef","_dir","_parentFormField","tabIndex","scrollStrategyFactory","_liveAnnouncer","_defaultOptions","_this$_defaultOptions","_this$_defaultOptions2","_this$_defaultOptions3","_panelOpen","_compareWith","o1","o2","_uid","_triggerAriaLabelledBy","_destroy","_onChange","_onTouched","_valueId","_overlayPanelClass","overlayPanelClass","_focused","controlType","_multiple","_disableOptionCentering","disableOptionCentering","optionSelectionChanges","options","changes","_toConsumableArray","option","onSelectionChange","onStable","openedChange","EventEmitter","_openedStream","o","_closedStream","selectionChange","valueChange","valueAccessor","typeaheadDebounceInterval","_typeaheadDebounceInterval","_scrollStrategyFactory","_scrollStrategy","parseInt","_placeholder","set","_ref","_this$_required","_this$ngControl","_this$ngControl$contr","_required","control","hasValidator","Validators","coerceBooleanProperty","fn","_selectionModel","_initializeSelection","_value","newValue","_assignValue","coerceNumberProperty","_id","SelectionModel","_panelDoneAnimating","panelOpen","_initKeyManager","changed","event","added","forEach","select","removed","deselect","_resetOptions","newAriaLabelledby","_getTriggerAriaLabelledby","element","nativeElement","setAttribute","removeAttribute","_previousControl","disabled","updateErrorState","userAriaDescribedBy","_keyManager","withTypeAhead","_this$_keyManager","destroy","close","open","_canOpen","withHorizontalOrientation","_highlightCorrectOption","markForCheck","_isRtl","isDisabled","_this$_selectionModel","_this$_selectionModel2","selected","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","keyCode","isArrowKey","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","isOpenKey","ENTER","SPACE","manager","isTyping","hasModifierKey","altKey","preventDefault","previouslySelectedOption","onKeydown","selectedOption","announce","activeItem","A","ctrlKey","hasDeselectedOptions","some","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_this$_keyManager2","cancelTypeahead","_overlayDir","positionChange","detectChanges","_positioningSettled","color","isEmpty","Promise","resolve","_setSelectionByValue","setInactiveStyles","clear","isArray","currentValue","_selectOptionByValue","_sortValues","correspondingOption","updateActiveItem","_this7","find","isSelected","item","_this8","ActiveDescendantKeyManager","withVerticalOrientation","withHomeAndEnd","withPageUpDown","withAllowedModifierKeys","skipPredicate","_skipPredicate","tabOut","focus","change","panel","_scrollOptionIntoView","_this9","changedOrDestroyed","_onSelect","isUserInput","_stateChanges","wasSelected","setActiveItem","_propagateChanges","_this10","toArray","sort","sortComparator","indexOf","fallbackValue","valueToEmit","emit","_getChangeEvent","firstEnabledOptionIndex","_this$options","_this$_parentFormFiel","labelId","getLabelId","ariaLabelledby","_this$_parentFormFiel2","isOpen","ids","ɵfac","t","i1","i2","i3","i4","MAT_FORM_FIELD","i5","ɵdir","type","viewQuery","_t","CdkConnectedOverlay","inputs","required","compareWith","errorStateMatcher","outputs","features","MatSelectTrigger","selectors","useExisting","MatSelect","_MatSelectBase2","_this11$_defaultOptio","_this11$_defaultOptio2","_this11","apply","_positions","originX","originY","overlayX","overlayY","_hideSingleSelectionIndicator","hideSingleSelectionIndicator","focused","_this12","_overlayWidth","_getOverlayWidth","_preferredOverlayOrigin","getConnectedOverlayOrigin","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getHostElement","scrollTop","_getOptionScrollPosition","offsetTop","offsetHeight","CdkOverlayOrigin","getBoundingClientRect","width","_syncParentProperties","ɵMatSelect_BaseFactory","ɵcmp","contentQueries","dirIndex","MatOption","MAT_OPTGROUP","hostAttrs","hostVars","hostBindings","_onFocus","_onBlur","toString","errorState","_getAriaActiveDescendant","disableRipple","exportAs","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","ngContentSelectors","decls","vars","consts","template","toggle","_onAttached","_r0","dependencies","i7","i8","styles","encapsulation","data","animation","changeDetection","MatSelectModule","ɵmod","ɵinj","providers","imports","CommonModule","OverlayModule","MatOptionModule","MatCommonModule","CdkScrollableModule","MatFormFieldModule","_defineProperty","obj","_toPropertyKey_js__WEBPACK_IMPORTED_MODULE_0__","Z","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","sym","getOwnPropertyDescriptor","_objectSpread2","target","_defineProperty_js__WEBPACK_IMPORTED_MODULE_0__","getOwnPropertyDescriptors","defineProperties"],"sourceRoot":"webpack:///","sources":["./node_modules/rxjs/dist/esm/internal/util/ObjectUnsubscribedError.js","./node_modules/rxjs/dist/esm/internal/Subject.js","./node_modules/rxjs/dist/esm/internal/observable/concat.js","./node_modules/rxjs/dist/esm/internal/operators/concatAll.js","./node_modules/rxjs/dist/esm/internal/observable/defer.js","./node_modules/rxjs/dist/esm/internal/observable/empty.js","./node_modules/rxjs/dist/esm/internal/operators/subscribeOn.js","./node_modules/rxjs/dist/esm/internal/scheduled/scheduleAsyncIterable.js","./node_modules/rxjs/dist/esm/internal/observable/from.js","./node_modules/rxjs/dist/esm/internal/scheduled/scheduled.js","./node_modules/rxjs/dist/esm/internal/scheduled/scheduleObservable.js","./node_modules/rxjs/dist/esm/internal/scheduled/scheduleArray.js","./node_modules/rxjs/dist/esm/internal/scheduled/schedulePromise.js","./node_modules/rxjs/dist/esm/internal/scheduled/scheduleIterable.js","./node_modules/rxjs/dist/esm/internal/scheduled/scheduleReadableStreamLike.js","./node_modules/rxjs/dist/esm/internal/observable/merge.js","./node_modules/rxjs/dist/esm/internal/operators/OperatorSubscriber.js","./node_modules/rxjs/dist/esm/internal/operators/distinctUntilChanged.js","./node_modules/rxjs/dist/esm/internal/operators/filter.js","./node_modules/rxjs/dist/esm/internal/operators/mergeAll.js","./node_modules/rxjs/dist/esm/internal/operators/mergeMap.js","./node_modules/rxjs/dist/esm/internal/operators/mergeInternals.js","./node_modules/rxjs/dist/esm/internal/operators/observeOn.js","./node_modules/rxjs/dist/esm/internal/operators/startWith.js","./node_modules/rxjs/dist/esm/internal/operators/switchMap.js","./node_modules/rxjs/dist/esm/internal/operators/take.js","./node_modules/rxjs/dist/esm/internal/operators/takeUntil.js","./node_modules/rxjs/dist/esm/internal/util/args.js","./node_modules/rxjs/dist/esm/internal/util/executeSchedule.js","./node_modules/rxjs/dist/esm/internal/util/isScheduler.js","./node_modules/rxjs/dist/esm/internal/util/lift.js","./node_modules/@angular/material/fesm2022/select.mjs","./node_modules/@babel/runtime/helpers/esm/defineProperty.js","./node_modules/@babel/runtime/helpers/esm/objectSpread2.js"],"sourcesContent":["import { createErrorClass } from './createErrorClass';\nexport const ObjectUnsubscribedError = createErrorClass((_super) => function ObjectUnsubscribedErrorImpl() {\n    _super(this);\n    this.name = 'ObjectUnsubscribedError';\n    this.message = 'object unsubscribed';\n});\n","import { Observable } from './Observable';\nimport { Subscription, EMPTY_SUBSCRIPTION } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { arrRemove } from './util/arrRemove';\nimport { errorContext } from './util/errorContext';\nexport class Subject extends Observable {\n    constructor() {\n        super();\n        this.closed = false;\n        this.currentObservers = null;\n        this.observers = [];\n        this.isStopped = false;\n        this.hasError = false;\n        this.thrownError = null;\n    }\n    lift(operator) {\n        const subject = new AnonymousSubject(this, this);\n        subject.operator = operator;\n        return subject;\n    }\n    _throwIfClosed() {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n    }\n    next(value) {\n        errorContext(() => {\n            this._throwIfClosed();\n            if (!this.isStopped) {\n                if (!this.currentObservers) {\n                    this.currentObservers = Array.from(this.observers);\n                }\n                for (const observer of this.currentObservers) {\n                    observer.next(value);\n                }\n            }\n        });\n    }\n    error(err) {\n        errorContext(() => {\n            this._throwIfClosed();\n            if (!this.isStopped) {\n                this.hasError = this.isStopped = true;\n                this.thrownError = err;\n                const { observers } = this;\n                while (observers.length) {\n                    observers.shift().error(err);\n                }\n            }\n        });\n    }\n    complete() {\n        errorContext(() => {\n            this._throwIfClosed();\n            if (!this.isStopped) {\n                this.isStopped = true;\n                const { observers } = this;\n                while (observers.length) {\n                    observers.shift().complete();\n                }\n            }\n        });\n    }\n    unsubscribe() {\n        this.isStopped = this.closed = true;\n        this.observers = this.currentObservers = null;\n    }\n    get observed() {\n        var _a;\n        return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;\n    }\n    _trySubscribe(subscriber) {\n        this._throwIfClosed();\n        return super._trySubscribe(subscriber);\n    }\n    _subscribe(subscriber) {\n        this._throwIfClosed();\n        this._checkFinalizedStatuses(subscriber);\n        return this._innerSubscribe(subscriber);\n    }\n    _innerSubscribe(subscriber) {\n        const { hasError, isStopped, observers } = this;\n        if (hasError || isStopped) {\n            return EMPTY_SUBSCRIPTION;\n        }\n        this.currentObservers = null;\n        observers.push(subscriber);\n        return new Subscription(() => {\n            this.currentObservers = null;\n            arrRemove(observers, subscriber);\n        });\n    }\n    _checkFinalizedStatuses(subscriber) {\n        const { hasError, thrownError, isStopped } = this;\n        if (hasError) {\n            subscriber.error(thrownError);\n        }\n        else if (isStopped) {\n            subscriber.complete();\n        }\n    }\n    asObservable() {\n        const observable = new Observable();\n        observable.source = this;\n        return observable;\n    }\n}\nSubject.create = (destination, source) => {\n    return new AnonymousSubject(destination, source);\n};\nexport class AnonymousSubject extends Subject {\n    constructor(destination, source) {\n        super();\n        this.destination = destination;\n        this.source = source;\n    }\n    next(value) {\n        var _a, _b;\n        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.call(_a, value);\n    }\n    error(err) {\n        var _a, _b;\n        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.call(_a, err);\n    }\n    complete() {\n        var _a, _b;\n        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);\n    }\n    _subscribe(subscriber) {\n        var _a, _b;\n        return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : EMPTY_SUBSCRIPTION;\n    }\n}\n","import { concatAll } from '../operators/concatAll';\nimport { popScheduler } from '../util/args';\nimport { from } from './from';\nexport function concat(...args) {\n    return concatAll()(from(args, popScheduler(args)));\n}\n","import { mergeAll } from './mergeAll';\nexport function concatAll() {\n    return mergeAll(1);\n}\n","import { Observable } from '../Observable';\nimport { innerFrom } from './innerFrom';\nexport function defer(observableFactory) {\n    return new Observable((subscriber) => {\n        innerFrom(observableFactory()).subscribe(subscriber);\n    });\n}\n","import { Observable } from '../Observable';\nexport const EMPTY = new Observable((subscriber) => subscriber.complete());\nexport function empty(scheduler) {\n    return scheduler ? emptyScheduled(scheduler) : EMPTY;\n}\nfunction emptyScheduled(scheduler) {\n    return new Observable((subscriber) => scheduler.schedule(() => subscriber.complete()));\n}\n","import { operate } from '../util/lift';\nexport function subscribeOn(scheduler, delay = 0) {\n    return operate((source, subscriber) => {\n        subscriber.add(scheduler.schedule(() => source.subscribe(subscriber), delay));\n    });\n}\n","import { Observable } from '../Observable';\nimport { executeSchedule } from '../util/executeSchedule';\nexport function scheduleAsyncIterable(input, scheduler) {\n    if (!input) {\n        throw new Error('Iterable cannot be null');\n    }\n    return new Observable((subscriber) => {\n        executeSchedule(subscriber, scheduler, () => {\n            const iterator = input[Symbol.asyncIterator]();\n            executeSchedule(subscriber, scheduler, () => {\n                iterator.next().then((result) => {\n                    if (result.done) {\n                        subscriber.complete();\n                    }\n                    else {\n                        subscriber.next(result.value);\n                    }\n                });\n            }, 0, true);\n        });\n    });\n}\n","import { scheduled } from '../scheduled/scheduled';\nimport { innerFrom } from './innerFrom';\nexport function from(input, scheduler) {\n    return scheduler ? scheduled(input, scheduler) : innerFrom(input);\n}\n","import { scheduleObservable } from './scheduleObservable';\nimport { schedulePromise } from './schedulePromise';\nimport { scheduleArray } from './scheduleArray';\nimport { scheduleIterable } from './scheduleIterable';\nimport { scheduleAsyncIterable } from './scheduleAsyncIterable';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isPromise } from '../util/isPromise';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isIterable } from '../util/isIterable';\nimport { isAsyncIterable } from '../util/isAsyncIterable';\nimport { createInvalidObservableTypeError } from '../util/throwUnobservableError';\nimport { isReadableStreamLike } from '../util/isReadableStreamLike';\nimport { scheduleReadableStreamLike } from './scheduleReadableStreamLike';\nexport function scheduled(input, scheduler) {\n    if (input != null) {\n        if (isInteropObservable(input)) {\n            return scheduleObservable(input, scheduler);\n        }\n        if (isArrayLike(input)) {\n            return scheduleArray(input, scheduler);\n        }\n        if (isPromise(input)) {\n            return schedulePromise(input, scheduler);\n        }\n        if (isAsyncIterable(input)) {\n            return scheduleAsyncIterable(input, scheduler);\n        }\n        if (isIterable(input)) {\n            return scheduleIterable(input, scheduler);\n        }\n        if (isReadableStreamLike(input)) {\n            return scheduleReadableStreamLike(input, scheduler);\n        }\n    }\n    throw createInvalidObservableTypeError(input);\n}\n","import { innerFrom } from '../observable/innerFrom';\nimport { observeOn } from '../operators/observeOn';\nimport { subscribeOn } from '../operators/subscribeOn';\nexport function scheduleObservable(input, scheduler) {\n    return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));\n}\n","import { Observable } from '../Observable';\nexport function scheduleArray(input, scheduler) {\n    return new Observable((subscriber) => {\n        let i = 0;\n        return scheduler.schedule(function () {\n            if (i === input.length) {\n                subscriber.complete();\n            }\n            else {\n                subscriber.next(input[i++]);\n                if (!subscriber.closed) {\n                    this.schedule();\n                }\n            }\n        });\n    });\n}\n","import { innerFrom } from '../observable/innerFrom';\nimport { observeOn } from '../operators/observeOn';\nimport { subscribeOn } from '../operators/subscribeOn';\nexport function schedulePromise(input, scheduler) {\n    return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));\n}\n","import { Observable } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { isFunction } from '../util/isFunction';\nimport { executeSchedule } from '../util/executeSchedule';\nexport function scheduleIterable(input, scheduler) {\n    return new Observable((subscriber) => {\n        let iterator;\n        executeSchedule(subscriber, scheduler, () => {\n            iterator = input[Symbol_iterator]();\n            executeSchedule(subscriber, scheduler, () => {\n                let value;\n                let done;\n                try {\n                    ({ value, done } = iterator.next());\n                }\n                catch (err) {\n                    subscriber.error(err);\n                    return;\n                }\n                if (done) {\n                    subscriber.complete();\n                }\n                else {\n                    subscriber.next(value);\n                }\n            }, 0, true);\n        });\n        return () => isFunction(iterator === null || iterator === void 0 ? void 0 : iterator.return) && iterator.return();\n    });\n}\n","import { scheduleAsyncIterable } from './scheduleAsyncIterable';\nimport { readableStreamLikeToAsyncGenerator } from '../util/isReadableStreamLike';\nexport function scheduleReadableStreamLike(input, scheduler) {\n    return scheduleAsyncIterable(readableStreamLikeToAsyncGenerator(input), scheduler);\n}\n","import { mergeAll } from '../operators/mergeAll';\nimport { innerFrom } from './innerFrom';\nimport { EMPTY } from './empty';\nimport { popNumber, popScheduler } from '../util/args';\nimport { from } from './from';\nexport function merge(...args) {\n    const scheduler = popScheduler(args);\n    const concurrent = popNumber(args, Infinity);\n    const sources = args;\n    return !sources.length\n        ?\n            EMPTY\n        : sources.length === 1\n            ?\n                innerFrom(sources[0])\n            :\n                mergeAll(concurrent)(from(sources, scheduler));\n}\n","import { Subscriber } from '../Subscriber';\nexport function createOperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {\n    return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);\n}\nexport class OperatorSubscriber extends Subscriber {\n    constructor(destination, onNext, onComplete, onError, onFinalize, shouldUnsubscribe) {\n        super(destination);\n        this.onFinalize = onFinalize;\n        this.shouldUnsubscribe = shouldUnsubscribe;\n        this._next = onNext\n            ? function (value) {\n                try {\n                    onNext(value);\n                }\n                catch (err) {\n                    destination.error(err);\n                }\n            }\n            : super._next;\n        this._error = onError\n            ? function (err) {\n                try {\n                    onError(err);\n                }\n                catch (err) {\n                    destination.error(err);\n                }\n                finally {\n                    this.unsubscribe();\n                }\n            }\n            : super._error;\n        this._complete = onComplete\n            ? function () {\n                try {\n                    onComplete();\n                }\n                catch (err) {\n                    destination.error(err);\n                }\n                finally {\n                    this.unsubscribe();\n                }\n            }\n            : super._complete;\n    }\n    unsubscribe() {\n        var _a;\n        if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {\n            const { closed } = this;\n            super.unsubscribe();\n            !closed && ((_a = this.onFinalize) === null || _a === void 0 ? void 0 : _a.call(this));\n        }\n    }\n}\n","import { identity } from '../util/identity';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function distinctUntilChanged(comparator, keySelector = identity) {\n    comparator = comparator !== null && comparator !== void 0 ? comparator : defaultCompare;\n    return operate((source, subscriber) => {\n        let previousKey;\n        let first = true;\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            const currentKey = keySelector(value);\n            if (first || !comparator(previousKey, currentKey)) {\n                first = false;\n                previousKey = currentKey;\n                subscriber.next(value);\n            }\n        }));\n    });\n}\nfunction defaultCompare(a, b) {\n    return a === b;\n}\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function filter(predicate, thisArg) {\n    return operate((source, subscriber) => {\n        let index = 0;\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => predicate.call(thisArg, value, index++) && subscriber.next(value)));\n    });\n}\n","import { mergeMap } from './mergeMap';\nimport { identity } from '../util/identity';\nexport function mergeAll(concurrent = Infinity) {\n    return mergeMap(identity, concurrent);\n}\n","import { map } from './map';\nimport { innerFrom } from '../observable/innerFrom';\nimport { operate } from '../util/lift';\nimport { mergeInternals } from './mergeInternals';\nimport { isFunction } from '../util/isFunction';\nexport function mergeMap(project, resultSelector, concurrent = Infinity) {\n    if (isFunction(resultSelector)) {\n        return mergeMap((a, i) => map((b, ii) => resultSelector(a, b, i, ii))(innerFrom(project(a, i))), concurrent);\n    }\n    else if (typeof resultSelector === 'number') {\n        concurrent = resultSelector;\n    }\n    return operate((source, subscriber) => mergeInternals(source, subscriber, project, concurrent));\n}\n","import { innerFrom } from '../observable/innerFrom';\nimport { executeSchedule } from '../util/executeSchedule';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function mergeInternals(source, subscriber, project, concurrent, onBeforeNext, expand, innerSubScheduler, additionalFinalizer) {\n    const buffer = [];\n    let active = 0;\n    let index = 0;\n    let isComplete = false;\n    const checkComplete = () => {\n        if (isComplete && !buffer.length && !active) {\n            subscriber.complete();\n        }\n    };\n    const outerNext = (value) => (active < concurrent ? doInnerSub(value) : buffer.push(value));\n    const doInnerSub = (value) => {\n        expand && subscriber.next(value);\n        active++;\n        let innerComplete = false;\n        innerFrom(project(value, index++)).subscribe(createOperatorSubscriber(subscriber, (innerValue) => {\n            onBeforeNext === null || onBeforeNext === void 0 ? void 0 : onBeforeNext(innerValue);\n            if (expand) {\n                outerNext(innerValue);\n            }\n            else {\n                subscriber.next(innerValue);\n            }\n        }, () => {\n            innerComplete = true;\n        }, undefined, () => {\n            if (innerComplete) {\n                try {\n                    active--;\n                    while (buffer.length && active < concurrent) {\n                        const bufferedValue = buffer.shift();\n                        if (innerSubScheduler) {\n                            executeSchedule(subscriber, innerSubScheduler, () => doInnerSub(bufferedValue));\n                        }\n                        else {\n                            doInnerSub(bufferedValue);\n                        }\n                    }\n                    checkComplete();\n                }\n                catch (err) {\n                    subscriber.error(err);\n                }\n            }\n        }));\n    };\n    source.subscribe(createOperatorSubscriber(subscriber, outerNext, () => {\n        isComplete = true;\n        checkComplete();\n    }));\n    return () => {\n        additionalFinalizer === null || additionalFinalizer === void 0 ? void 0 : additionalFinalizer();\n    };\n}\n","import { executeSchedule } from '../util/executeSchedule';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function observeOn(scheduler, delay = 0) {\n    return operate((source, subscriber) => {\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => executeSchedule(subscriber, scheduler, () => subscriber.next(value), delay), () => executeSchedule(subscriber, scheduler, () => subscriber.complete(), delay), (err) => executeSchedule(subscriber, scheduler, () => subscriber.error(err), delay)));\n    });\n}\n","import { concat } from '../observable/concat';\nimport { popScheduler } from '../util/args';\nimport { operate } from '../util/lift';\nexport function startWith(...values) {\n    const scheduler = popScheduler(values);\n    return operate((source, subscriber) => {\n        (scheduler ? concat(values, source, scheduler) : concat(values, source)).subscribe(subscriber);\n    });\n}\n","import { innerFrom } from '../observable/innerFrom';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function switchMap(project, resultSelector) {\n    return operate((source, subscriber) => {\n        let innerSubscriber = null;\n        let index = 0;\n        let isComplete = false;\n        const checkComplete = () => isComplete && !innerSubscriber && subscriber.complete();\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            innerSubscriber === null || innerSubscriber === void 0 ? void 0 : innerSubscriber.unsubscribe();\n            let innerIndex = 0;\n            const outerIndex = index++;\n            innerFrom(project(value, outerIndex)).subscribe((innerSubscriber = createOperatorSubscriber(subscriber, (innerValue) => subscriber.next(resultSelector ? resultSelector(value, innerValue, outerIndex, innerIndex++) : innerValue), () => {\n                innerSubscriber = null;\n                checkComplete();\n            })));\n        }, () => {\n            isComplete = true;\n            checkComplete();\n        }));\n    });\n}\n","import { EMPTY } from '../observable/empty';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function take(count) {\n    return count <= 0\n        ?\n            () => EMPTY\n        : operate((source, subscriber) => {\n            let seen = 0;\n            source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n                if (++seen <= count) {\n                    subscriber.next(value);\n                    if (count <= seen) {\n                        subscriber.complete();\n                    }\n                }\n            }));\n        });\n}\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\nimport { noop } from '../util/noop';\nexport function takeUntil(notifier) {\n    return operate((source, subscriber) => {\n        innerFrom(notifier).subscribe(createOperatorSubscriber(subscriber, () => subscriber.complete(), noop));\n        !subscriber.closed && source.subscribe(subscriber);\n    });\n}\n","import { isFunction } from './isFunction';\nimport { isScheduler } from './isScheduler';\nfunction last(arr) {\n    return arr[arr.length - 1];\n}\nexport function popResultSelector(args) {\n    return isFunction(last(args)) ? args.pop() : undefined;\n}\nexport function popScheduler(args) {\n    return isScheduler(last(args)) ? args.pop() : undefined;\n}\nexport function popNumber(args, defaultValue) {\n    return typeof last(args) === 'number' ? args.pop() : defaultValue;\n}\n","export function executeSchedule(parentSubscription, scheduler, work, delay = 0, repeat = false) {\n    const scheduleSubscription = scheduler.schedule(function () {\n        work();\n        if (repeat) {\n            parentSubscription.add(this.schedule(null, delay));\n        }\n        else {\n            this.unsubscribe();\n        }\n    }, delay);\n    parentSubscription.add(scheduleSubscription);\n    if (!repeat) {\n        return scheduleSubscription;\n    }\n}\n","import { isFunction } from './isFunction';\nexport function isScheduler(value) {\n    return value && isFunction(value.schedule);\n}\n","import { isFunction } from './isFunction';\nexport function hasLift(source) {\n    return isFunction(source === null || source === void 0 ? void 0 : source.lift);\n}\nexport function operate(init) {\n    return (source) => {\n        if (hasLift(source)) {\n            return source.lift(function (liftedSource) {\n                try {\n                    return init(liftedSource, this);\n                }\n                catch (err) {\n                    this.error(err);\n                }\n            });\n        }\n        throw new TypeError('Unable to lift unknown Observable type');\n    };\n}\n","import * as i8 from '@angular/cdk/overlay';\nimport { Overlay, CdkConnectedOverlay, CdkOverlayOrigin, OverlayModule } from '@angular/cdk/overlay';\nimport * as i7 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, Directive, Optional, Inject, Self, Attribute, Input, ViewChild, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport * as i2 from '@angular/material/core';\nimport { mixinDisableRipple, mixinTabIndex, mixinDisabled, mixinErrorState, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MAT_OPTION_PARENT_COMPONENT, MatOption, MAT_OPTGROUP, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport * as i6 from '@angular/material/form-field';\nimport { MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport * as i5 from '@angular/cdk/a11y';\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport * as i3 from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { DOWN_ARROW, UP_ARROW, LEFT_ARROW, RIGHT_ARROW, ENTER, SPACE, hasModifierKey, A } from '@angular/cdk/keycodes';\nimport * as i4 from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport { Subject, defer, merge } from 'rxjs';\nimport { startWith, switchMap, take, filter, map, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { trigger, transition, query, animateChild, state, style, animate } from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nconst matSelectAnimations = {\n    /**\n     * This animation ensures the select's overlay panel animation (transformPanel) is called when\n     * closing the select.\n     * This is needed due to https://github.com/angular/angular/issues/23302\n     */\n    transformPanelWrap: trigger('transformPanelWrap', [\n        transition('* => void', query('@transformPanel', [animateChild()], { optional: true })),\n    ]),\n    /** This animation transforms the select's overlay panel on and off the page. */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(1, 0.8)',\n        })),\n        transition('void => showing', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n            opacity: 1,\n            transform: 'scale(1, 1)',\n        }))),\n        transition('* => void', animate('100ms linear', style({ opacity: 0 }))),\n    ]),\n};\n\n// Note that these have been copied over verbatim from\n// `material/select` so that we don't have to expose them publicly.\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nfunction getMatSelectDynamicMultipleError() {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nfunction getMatSelectNonArrayValueError() {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nfunction getMatSelectNonFunctionValueError() {\n    return Error('`compareWith` must be a function.');\n}\n\nlet nextUniqueId = 0;\n/** Injection token that determines the scroll handling while a select is open. */\nconst MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy');\n/** @docs-private */\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** Injection token that can be used to provide the default options the select module. */\nconst MAT_SELECT_CONFIG = new InjectionToken('MAT_SELECT_CONFIG');\n/** @docs-private */\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Injection token that can be used to reference instances of `MatSelectTrigger`. It serves as\n * alternative token to the actual `MatSelectTrigger` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_SELECT_TRIGGER = new InjectionToken('MatSelectTrigger');\n/** Change event object that is emitted when the select value has changed. */\nclass MatSelectChange {\n    constructor(\n    /** Reference to the select that emitted the change event. */\n    source, \n    /** Current value of the select that emitted the event. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nconst _MatSelectMixinBase = mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(class {\n    constructor(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, \n    /**\n     * Form control bound to the component.\n     * Implemented as part of `MatFormFieldControl`.\n     * @docs-private\n     */\n    ngControl) {\n        this._elementRef = _elementRef;\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n        /**\n         * Emits whenever the component state changes and should cause the parent\n         * form-field to update. Implemented as part of `MatFormFieldControl`.\n         * @docs-private\n         */\n        this.stateChanges = new Subject();\n    }\n}))));\n/** Base class with all of the `MatSelect` functionality. */\nclass _MatSelectBase extends _MatSelectMixinBase {\n    /** Whether the select is focused. */\n    get focused() {\n        return this._focused || this._panelOpen;\n    }\n    /** Placeholder to be shown if no value has been selected. */\n    get placeholder() {\n        return this._placeholder;\n    }\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /** Whether the component is required. */\n    get required() {\n        return this._required ?? this.ngControl?.control?.hasValidator(Validators.required) ?? false;\n    }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /** Whether the user should be allowed to select multiple options. */\n    get multiple() {\n        return this._multiple;\n    }\n    set multiple(value) {\n        if (this._selectionModel && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectDynamicMultipleError();\n        }\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /** Whether to center the active option over the trigger. */\n    get disableOptionCentering() {\n        return this._disableOptionCentering;\n    }\n    set disableOptionCentering(value) {\n        this._disableOptionCentering = coerceBooleanProperty(value);\n    }\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    get compareWith() {\n        return this._compareWith;\n    }\n    set compareWith(fn) {\n        if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectNonFunctionValueError();\n        }\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /** Value of the select control. */\n    get value() {\n        return this._value;\n    }\n    set value(newValue) {\n        const hasAssigned = this._assignValue(newValue);\n        if (hasAssigned) {\n            this._onChange(newValue);\n        }\n    }\n    /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n    get typeaheadDebounceInterval() {\n        return this._typeaheadDebounceInterval;\n    }\n    set typeaheadDebounceInterval(value) {\n        this._typeaheadDebounceInterval = coerceNumberProperty(value);\n    }\n    /** Unique id of the element. */\n    get id() {\n        return this._id;\n    }\n    set id(value) {\n        this._id = value || this._uid;\n        this.stateChanges.next();\n    }\n    constructor(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer, _defaultOptions) {\n        super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._viewportRuler = _viewportRuler;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._ngZone = _ngZone;\n        this._dir = _dir;\n        this._parentFormField = _parentFormField;\n        this._liveAnnouncer = _liveAnnouncer;\n        this._defaultOptions = _defaultOptions;\n        /** Whether or not the overlay panel is open. */\n        this._panelOpen = false;\n        /** Comparison function to specify which option is displayed. Defaults to object equality. */\n        this._compareWith = (o1, o2) => o1 === o2;\n        /** Unique id for this input. */\n        this._uid = `mat-select-${nextUniqueId++}`;\n        /** Current `aria-labelledby` value for the select trigger. */\n        this._triggerAriaLabelledBy = null;\n        /** Emits whenever the component is destroyed. */\n        this._destroy = new Subject();\n        /** `View -> model callback called when value changes` */\n        this._onChange = () => { };\n        /** `View -> model callback called when select has been touched` */\n        this._onTouched = () => { };\n        /** ID for the DOM node containing the select's value. */\n        this._valueId = `mat-select-value-${nextUniqueId++}`;\n        /** Emits when the panel element is finished transforming in. */\n        this._panelDoneAnimatingStream = new Subject();\n        this._overlayPanelClass = this._defaultOptions?.overlayPanelClass || '';\n        this._focused = false;\n        /** A name for this control that can be used by `mat-form-field`. */\n        this.controlType = 'mat-select';\n        this._multiple = false;\n        this._disableOptionCentering = this._defaultOptions?.disableOptionCentering ?? false;\n        /** Aria label of the select. */\n        this.ariaLabel = '';\n        /** Combined stream of all of the child options' change events. */\n        this.optionSelectionChanges = defer(() => {\n            const options = this.options;\n            if (options) {\n                return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n            }\n            return this._ngZone.onStable.pipe(take(1), switchMap(() => this.optionSelectionChanges));\n        });\n        /** Event emitted when the select panel has been toggled. */\n        this.openedChange = new EventEmitter();\n        /** Event emitted when the select has been opened. */\n        this._openedStream = this.openedChange.pipe(filter(o => o), map(() => { }));\n        /** Event emitted when the select has been closed. */\n        this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => { }));\n        /** Event emitted when the selected value has been changed by the user. */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the select changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n        // Note that we only want to set this when the defaults pass it in, otherwise it should\n        // stay as `undefined` so that it falls back to the default in the key manager.\n        if (_defaultOptions?.typeaheadDebounceInterval != null) {\n            this._typeaheadDebounceInterval = _defaultOptions.typeaheadDebounceInterval;\n        }\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this._scrollStrategy = this._scrollStrategyFactory();\n        this.tabIndex = parseInt(tabIndex) || 0;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple);\n        this.stateChanges.next();\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this._panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n            .subscribe(() => this._panelDoneAnimating(this.panelOpen));\n    }\n    ngAfterContentInit() {\n        this._initKeyManager();\n        this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(event => {\n            event.added.forEach(option => option.select());\n            event.removed.forEach(option => option.deselect());\n        });\n        this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n            this._resetOptions();\n            this._initializeSelection();\n        });\n    }\n    ngDoCheck() {\n        const newAriaLabelledby = this._getTriggerAriaLabelledby();\n        const ngControl = this.ngControl;\n        // We have to manage setting the `aria-labelledby` ourselves, because part of its value\n        // is computed as a result of a content query which can cause this binding to trigger a\n        // \"changed after checked\" error.\n        if (newAriaLabelledby !== this._triggerAriaLabelledBy) {\n            const element = this._elementRef.nativeElement;\n            this._triggerAriaLabelledBy = newAriaLabelledby;\n            if (newAriaLabelledby) {\n                element.setAttribute('aria-labelledby', newAriaLabelledby);\n            }\n            else {\n                element.removeAttribute('aria-labelledby');\n            }\n        }\n        if (ngControl) {\n            // The disabled state might go out of sync if the form group is swapped out. See #17860.\n            if (this._previousControl !== ngControl.control) {\n                if (this._previousControl !== undefined &&\n                    ngControl.disabled !== null &&\n                    ngControl.disabled !== this.disabled) {\n                    this.disabled = ngControl.disabled;\n                }\n                this._previousControl = ngControl.control;\n            }\n            this.updateErrorState();\n        }\n    }\n    ngOnChanges(changes) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes['disabled'] || changes['userAriaDescribedBy']) {\n            this.stateChanges.next();\n        }\n        if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n            this._keyManager.withTypeAhead(this._typeaheadDebounceInterval);\n        }\n    }\n    ngOnDestroy() {\n        this._keyManager?.destroy();\n        this._destroy.next();\n        this._destroy.complete();\n        this.stateChanges.complete();\n    }\n    /** Toggles the overlay panel open or closed. */\n    toggle() {\n        this.panelOpen ? this.close() : this.open();\n    }\n    /** Opens the overlay panel. */\n    open() {\n        if (this._canOpen()) {\n            this._panelOpen = true;\n            this._keyManager.withHorizontalOrientation(null);\n            this._highlightCorrectOption();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Closes the overlay panel and focuses the host element. */\n    close() {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n        }\n    }\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value) {\n        this._assignValue(value);\n    }\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /** Whether or not the overlay panel is open. */\n    get panelOpen() {\n        return this._panelOpen;\n    }\n    /** The currently selected option. */\n    get selected() {\n        return this.multiple ? this._selectionModel?.selected || [] : this._selectionModel?.selected[0];\n    }\n    /** The value displayed in the trigger. */\n    get triggerValue() {\n        if (this.empty) {\n            return '';\n        }\n        if (this._multiple) {\n            const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n            if (this._isRtl()) {\n                selectedOptions.reverse();\n            }\n            // TODO(crisbeto): delimiter should be configurable for proper localization.\n            return selectedOptions.join(', ');\n        }\n        return this._selectionModel.selected[0].viewValue;\n    }\n    /** Whether the element is in RTL mode. */\n    _isRtl() {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n    /** Handles all keydown events on the select. */\n    _handleKeydown(event) {\n        if (!this.disabled) {\n            this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n        }\n    }\n    /** Handles keyboard events while the select is closed. */\n    _handleClosedKeydown(event) {\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW ||\n            keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW ||\n            keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n        const manager = this._keyManager;\n        // Open the select on ALT + arrow key to match the native <select>\n        if ((!manager.isTyping() && isOpenKey && !hasModifierKey(event)) ||\n            ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        }\n        else if (!this.multiple) {\n            const previouslySelectedOption = this.selected;\n            manager.onKeydown(event);\n            const selectedOption = this.selected;\n            // Since the value has changed, we need to announce it ourselves.\n            if (selectedOption && previouslySelectedOption !== selectedOption) {\n                // We set a duration on the live announcement, because we want the live element to be\n                // cleared after a while so that users can't navigate to it using the arrow keys.\n                this._liveAnnouncer.announce(selectedOption.viewValue, 10000);\n            }\n        }\n    }\n    /** Handles keyboard events when the selected is open. */\n    _handleOpenKeydown(event) {\n        const manager = this._keyManager;\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        const isTyping = manager.isTyping();\n        if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n            // Don't do anything in this case if the user is typing,\n            // because the typing sequence can include the space key.\n        }\n        else if (!isTyping &&\n            (keyCode === ENTER || keyCode === SPACE) &&\n            manager.activeItem &&\n            !hasModifierKey(event)) {\n            event.preventDefault();\n            manager.activeItem._selectViaInteraction();\n        }\n        else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n            this.options.forEach(option => {\n                if (!option.disabled) {\n                    hasDeselectedOptions ? option.select() : option.deselect();\n                }\n            });\n        }\n        else {\n            const previouslyFocusedIndex = manager.activeItemIndex;\n            manager.onKeydown(event);\n            if (this._multiple &&\n                isArrowKey &&\n                event.shiftKey &&\n                manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem._selectViaInteraction();\n            }\n        }\n    }\n    _onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    _onBlur() {\n        this._focused = false;\n        this._keyManager?.cancelTypeahead();\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    _onAttached() {\n        this._overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n            this._changeDetectorRef.detectChanges();\n            this._positioningSettled();\n        });\n    }\n    /** Returns the theme to be used on the panel. */\n    _getPanelTheme() {\n        return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n    }\n    /** Whether the select has a value. */\n    get empty() {\n        return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            if (this.ngControl) {\n                this._value = this.ngControl.value;\n            }\n            this._setSelectionByValue(this._value);\n            this.stateChanges.next();\n        });\n    }\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    _setSelectionByValue(value) {\n        this.options.forEach(option => option.setInactiveStyles());\n        this._selectionModel.clear();\n        if (this.multiple && value) {\n            if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getMatSelectNonArrayValueError();\n            }\n            value.forEach((currentValue) => this._selectOptionByValue(currentValue));\n            this._sortValues();\n        }\n        else {\n            const correspondingOption = this._selectOptionByValue(value);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this._keyManager.updateActiveItem(correspondingOption);\n            }\n            else if (!this.panelOpen) {\n                // Otherwise reset the highlighted option. Note that we only want to do this while\n                // closed, because doing it while open can shift the user's focus unnecessarily.\n                this._keyManager.updateActiveItem(-1);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    _selectOptionByValue(value) {\n        const correspondingOption = this.options.find((option) => {\n            // Skip options that are already in the model. This allows us to handle cases\n            // where the same primitive value is selected multiple times.\n            if (this._selectionModel.isSelected(option)) {\n                return false;\n            }\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            }\n            catch (error) {\n                if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n                return false;\n            }\n        });\n        if (correspondingOption) {\n            this._selectionModel.select(correspondingOption);\n        }\n        return correspondingOption;\n    }\n    /** Assigns a specific value to the select. Returns whether the value has changed. */\n    _assignValue(newValue) {\n        // Always re-assign an array, because it might have been mutated.\n        if (newValue !== this._value || (this._multiple && Array.isArray(newValue))) {\n            if (this.options) {\n                this._setSelectionByValue(newValue);\n            }\n            this._value = newValue;\n            return true;\n        }\n        return false;\n    }\n    _skipPredicate(item) {\n        return item.disabled;\n    }\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    _initKeyManager() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\n            .withTypeAhead(this._typeaheadDebounceInterval)\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n            .withHomeAndEnd()\n            .withPageUpDown()\n            .withAllowedModifierKeys(['shiftKey'])\n            .skipPredicate(this._skipPredicate);\n        this._keyManager.tabOut.subscribe(() => {\n            if (this.panelOpen) {\n                // Select the active item when tabbing away. This is consistent with how the native\n                // select behaves. Note that we only want to do this in single selection mode.\n                if (!this.multiple && this._keyManager.activeItem) {\n                    this._keyManager.activeItem._selectViaInteraction();\n                }\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            }\n        });\n        this._keyManager.change.subscribe(() => {\n            if (this._panelOpen && this.panel) {\n                this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n            }\n            else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n                this._keyManager.activeItem._selectViaInteraction();\n            }\n        });\n    }\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    _resetOptions() {\n        const changedOrDestroyed = merge(this.options.changes, this._destroy);\n        this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n            this._onSelect(event.source, event.isUserInput);\n            if (event.isUserInput && !this.multiple && this._panelOpen) {\n                this.close();\n                this.focus();\n            }\n        });\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map(option => option._stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n            // `_stateChanges` can fire as a result of a change in the label's DOM value which may\n            // be the result of an expression changing. We have to use `detectChanges` in order\n            // to avoid \"changed after checked\" errors (see #14793).\n            this._changeDetectorRef.detectChanges();\n            this.stateChanges.next();\n        });\n    }\n    /** Invoked when an option is clicked. */\n    _onSelect(option, isUserInput) {\n        const wasSelected = this._selectionModel.isSelected(option);\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this._selectionModel.clear();\n            if (this.value != null) {\n                this._propagateChanges(option.value);\n            }\n        }\n        else {\n            if (wasSelected !== option.selected) {\n                option.selected\n                    ? this._selectionModel.select(option)\n                    : this._selectionModel.deselect(option);\n            }\n            if (isUserInput) {\n                this._keyManager.setActiveItem(option);\n            }\n            if (this.multiple) {\n                this._sortValues();\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mat-option`.\n                    this.focus();\n                }\n            }\n        }\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n            this._propagateChanges();\n        }\n        this.stateChanges.next();\n    }\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    _sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n            this._selectionModel.sort((a, b) => {\n                return this.sortComparator\n                    ? this.sortComparator(a, b, options)\n                    : options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n    /** Emits change event to set the model value. */\n    _propagateChanges(fallbackValue) {\n        let valueToEmit = null;\n        if (this.multiple) {\n            valueToEmit = this.selected.map(option => option.value);\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(this._getChangeEvent(valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first *enabled* option.\n     */\n    _highlightCorrectOption() {\n        if (this._keyManager) {\n            if (this.empty) {\n                // Find the index of the first *enabled* option. Avoid calling `_keyManager.setActiveItem`\n                // because it activates the first option that passes the skip predicate, rather than the\n                // first *enabled* option.\n                let firstEnabledOptionIndex = -1;\n                for (let index = 0; index < this.options.length; index++) {\n                    const option = this.options.get(index);\n                    if (!option.disabled) {\n                        firstEnabledOptionIndex = index;\n                        break;\n                    }\n                }\n                this._keyManager.setActiveItem(firstEnabledOptionIndex);\n            }\n            else {\n                this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n            }\n        }\n    }\n    /** Whether the panel is allowed to open. */\n    _canOpen() {\n        return !this._panelOpen && !this.disabled && this.options?.length > 0;\n    }\n    /** Focuses the select element. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /** Gets the aria-labelledby for the select panel. */\n    _getPanelAriaLabelledby() {\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = this._parentFormField?.getLabelId();\n        const labelExpression = labelId ? labelId + ' ' : '';\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    /** Determines the `aria-activedescendant` to be set on the host. */\n    _getAriaActiveDescendant() {\n        if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n            return this._keyManager.activeItem.id;\n        }\n        return null;\n    }\n    /** Gets the aria-labelledby of the select component trigger. */\n    _getTriggerAriaLabelledby() {\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = this._parentFormField?.getLabelId();\n        let value = (labelId ? labelId + ' ' : '') + this._valueId;\n        if (this.ariaLabelledby) {\n            value += ' ' + this.ariaLabelledby;\n        }\n        return value;\n    }\n    /** Called when the overlay panel is done animating. */\n    _panelDoneAnimating(isOpen) {\n        this.openedChange.emit(isOpen);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        if (ids.length) {\n            this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n        }\n        else {\n            this._elementRef.nativeElement.removeAttribute('aria-describedby');\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        return this._panelOpen || !this.empty || (this._focused && !!this._placeholder);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: _MatSelectBase, deps: [{ token: i1.ViewportRuler }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }, { token: i2.ErrorStateMatcher }, { token: i0.ElementRef }, { token: i3.Directionality, optional: true }, { token: i4.NgForm, optional: true }, { token: i4.FormGroupDirective, optional: true }, { token: MAT_FORM_FIELD, optional: true }, { token: i4.NgControl, optional: true, self: true }, { token: 'tabindex', attribute: true }, { token: MAT_SELECT_SCROLL_STRATEGY }, { token: i5.LiveAnnouncer }, { token: MAT_SELECT_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: _MatSelectBase, inputs: { userAriaDescribedBy: [\"aria-describedby\", \"userAriaDescribedBy\"], panelClass: \"panelClass\", placeholder: \"placeholder\", required: \"required\", multiple: \"multiple\", disableOptionCentering: \"disableOptionCentering\", compareWith: \"compareWith\", value: \"value\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], errorStateMatcher: \"errorStateMatcher\", typeaheadDebounceInterval: \"typeaheadDebounceInterval\", sortComparator: \"sortComparator\", id: \"id\" }, outputs: { openedChange: \"openedChange\", _openedStream: \"opened\", _closedStream: \"closed\", selectionChange: \"selectionChange\", valueChange: \"valueChange\" }, viewQueries: [{ propertyName: \"trigger\", first: true, predicate: [\"trigger\"], descendants: true }, { propertyName: \"panel\", first: true, predicate: [\"panel\"], descendants: true }, { propertyName: \"_overlayDir\", first: true, predicate: CdkConnectedOverlay, descendants: true }], usesInheritance: true, usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: _MatSelectBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i1.ViewportRuler }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: i2.ErrorStateMatcher }, { type: i0.ElementRef }, { type: i3.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: i4.NgForm, decorators: [{\n                    type: Optional\n                }] }, { type: i4.FormGroupDirective, decorators: [{\n                    type: Optional\n                }] }, { type: i6.MatFormField, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_FORM_FIELD]\n                }] }, { type: i4.NgControl, decorators: [{\n                    type: Self\n                }, {\n                    type: Optional\n                }] }, { type: undefined, decorators: [{\n                    type: Attribute,\n                    args: ['tabindex']\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_SELECT_SCROLL_STRATEGY]\n                }] }, { type: i5.LiveAnnouncer }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_SELECT_CONFIG]\n                }] }]; }, propDecorators: { userAriaDescribedBy: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], trigger: [{\n                type: ViewChild,\n                args: ['trigger']\n            }], panel: [{\n                type: ViewChild,\n                args: ['panel']\n            }], _overlayDir: [{\n                type: ViewChild,\n                args: [CdkConnectedOverlay]\n            }], panelClass: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }], multiple: [{\n                type: Input\n            }], disableOptionCentering: [{\n                type: Input\n            }], compareWith: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], errorStateMatcher: [{\n                type: Input\n            }], typeaheadDebounceInterval: [{\n                type: Input\n            }], sortComparator: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], openedChange: [{\n                type: Output\n            }], _openedStream: [{\n                type: Output,\n                args: ['opened']\n            }], _closedStream: [{\n                type: Output,\n                args: ['closed']\n            }], selectionChange: [{\n                type: Output\n            }], valueChange: [{\n                type: Output\n            }] } });\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nclass MatSelectTrigger {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatSelectTrigger, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: MatSelectTrigger, selector: \"mat-select-trigger\", providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatSelectTrigger, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-select-trigger',\n                    providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }],\n                }]\n        }] });\nclass MatSelect extends _MatSelectBase {\n    constructor() {\n        super(...arguments);\n        this._positions = [\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'top',\n            },\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'bottom',\n                panelClass: 'mat-mdc-select-panel-above',\n            },\n        ];\n        this._hideSingleSelectionIndicator = this._defaultOptions?.hideSingleSelectionIndicator ?? false;\n        // `skipPredicate` determines if key manager should avoid putting a given option in the tab\n        // order. Allow disabled list items to receive focus via keyboard to align with WAI ARIA\n        // recommendation.\n        //\n        // Normally WAI ARIA's instructions are to exclude disabled items from the tab order, but it\n        // makes a few exceptions for compound widgets.\n        //\n        // From [Developing a Keyboard Interface](\n        // https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/):\n        //   \"For the following composite widget elements, keep them focusable when disabled: Options in a\n        //   Listbox...\"\n        //\n        // The user can focus disabled options using the keyboard, but the user cannot click disabled\n        // options.\n        this._skipPredicate = (option) => {\n            if (this.panelOpen) {\n                // Support keyboard focusing disabled options in an ARIA listbox.\n                return false;\n            }\n            // When the panel is closed, skip over disabled options. Support options via the UP/DOWN arrow\n            // keys on a closed select. ARIA listbox interaction pattern is less relevant when the panel is\n            // closed.\n            return option.disabled;\n        };\n    }\n    get shouldLabelFloat() {\n        // Since the panel doesn't overlap the trigger, we\n        // want the label to only float when there's a value.\n        return this.panelOpen || !this.empty || (this.focused && !!this.placeholder);\n    }\n    ngOnInit() {\n        super.ngOnInit();\n        this._viewportRuler\n            .change()\n            .pipe(takeUntil(this._destroy))\n            .subscribe(() => {\n            if (this.panelOpen) {\n                this._overlayWidth = this._getOverlayWidth();\n                this._changeDetectorRef.detectChanges();\n            }\n        });\n    }\n    ngAfterViewInit() {\n        // Note that it's important that we read this in `ngAfterViewInit`, because\n        // reading it earlier will cause the form field to return a different element.\n        if (this._parentFormField) {\n            this._preferredOverlayOrigin = this._parentFormField.getConnectedOverlayOrigin();\n        }\n    }\n    open() {\n        this._overlayWidth = this._getOverlayWidth();\n        super.open();\n        // Required for the MDC form field to pick up when the overlay has been opened.\n        this.stateChanges.next();\n    }\n    close() {\n        super.close();\n        // Required for the MDC form field to pick up when the overlay has been closed.\n        this.stateChanges.next();\n    }\n    /** Scrolls the active option into view. */\n    _scrollOptionIntoView(index) {\n        const option = this.options.toArray()[index];\n        if (option) {\n            const panel = this.panel.nativeElement;\n            const labelCount = _countGroupLabelsBeforeOption(index, this.options, this.optionGroups);\n            const element = option._getHostElement();\n            if (index === 0 && labelCount === 1) {\n                // If we've got one group label before the option and we're at the top option,\n                // scroll the list to the top. This is better UX than scrolling the list to the\n                // top of the option, because it allows the user to read the top group's label.\n                panel.scrollTop = 0;\n            }\n            else {\n                panel.scrollTop = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, panel.scrollTop, panel.offsetHeight);\n            }\n        }\n    }\n    _positioningSettled() {\n        this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n    }\n    _getChangeEvent(value) {\n        return new MatSelectChange(this, value);\n    }\n    /** Gets how wide the overlay panel should be. */\n    _getOverlayWidth() {\n        const refToMeasure = this._preferredOverlayOrigin instanceof CdkOverlayOrigin\n            ? this._preferredOverlayOrigin.elementRef\n            : this._preferredOverlayOrigin || this._elementRef;\n        return refToMeasure.nativeElement.getBoundingClientRect().width;\n    }\n    /** Whether checkmark indicator for single-selection options is hidden. */\n    get hideSingleSelectionIndicator() {\n        return this._hideSingleSelectionIndicator;\n    }\n    set hideSingleSelectionIndicator(value) {\n        this._hideSingleSelectionIndicator = coerceBooleanProperty(value);\n        this._syncParentProperties();\n    }\n    /** Syncs the parent state with the individual options. */\n    _syncParentProperties() {\n        if (this.options) {\n            for (const option of this.options) {\n                option._changeDetectorRef.markForCheck();\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatSelect, deps: null, target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.0\", type: MatSelect, selector: \"mat-select\", inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", tabIndex: \"tabIndex\", hideSingleSelectionIndicator: \"hideSingleSelectionIndicator\" }, host: { attributes: { \"role\": \"combobox\", \"aria-autocomplete\": \"none\", \"aria-haspopup\": \"listbox\", \"ngSkipHydration\": \"\" }, listeners: { \"keydown\": \"_handleKeydown($event)\", \"focus\": \"_onFocus()\", \"blur\": \"_onBlur()\" }, properties: { \"attr.id\": \"id\", \"attr.tabindex\": \"tabIndex\", \"attr.aria-controls\": \"panelOpen ? id + \\\"-panel\\\" : null\", \"attr.aria-expanded\": \"panelOpen\", \"attr.aria-label\": \"ariaLabel || null\", \"attr.aria-required\": \"required.toString()\", \"attr.aria-disabled\": \"disabled.toString()\", \"attr.aria-invalid\": \"errorState\", \"attr.aria-activedescendant\": \"_getAriaActiveDescendant()\", \"class.mat-mdc-select-disabled\": \"disabled\", \"class.mat-mdc-select-invalid\": \"errorState\", \"class.mat-mdc-select-required\": \"required\", \"class.mat-mdc-select-empty\": \"empty\", \"class.mat-mdc-select-multiple\": \"multiple\" }, classAttribute: \"mat-mdc-select\" }, providers: [\n            { provide: MatFormFieldControl, useExisting: MatSelect },\n            { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect },\n        ], queries: [{ propertyName: \"customTrigger\", first: true, predicate: MAT_SELECT_TRIGGER, descendants: true }, { propertyName: \"options\", predicate: MatOption, descendants: true }, { propertyName: \"optionGroups\", predicate: MAT_OPTGROUP, descendants: true }], exportAs: [\"matSelect\"], usesInheritance: true, ngImport: i0, template: \"<!--\\n Note that the select trigger element specifies `aria-owns` pointing to the listbox overlay.\\n While aria-owns is not required for the ARIA 1.2 `role=\\\"combobox\\\"` interaction pattern,\\n it fixes an issue with VoiceOver when the select appears inside of an `aria-model=\\\"true\\\"`\\n element (e.g. a dialog). Without this `aria-owns`, the `aria-modal` on a dialog prevents\\n VoiceOver from \\\"seeing\\\" the select's listbox overlay for aria-activedescendant.\\n Using `aria-owns` re-parents the select overlay so that it works again.\\n See https://github.com/angular/components/issues/20694\\n-->\\n<div cdk-overlay-origin\\n     [attr.aria-owns]=\\\"panelOpen ? id + '-panel' : null\\\"\\n     class=\\\"mat-mdc-select-trigger\\\"\\n     (click)=\\\"toggle()\\\"\\n     #fallbackOverlayOrigin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-mdc-select-value\\\" [ngSwitch]=\\\"empty\\\" [attr.id]=\\\"_valueId\\\">\\n    <span class=\\\"mat-mdc-select-placeholder mat-mdc-select-min-line\\\" *ngSwitchCase=\\\"true\\\">{{placeholder}}</span>\\n    <span class=\\\"mat-mdc-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span class=\\\"mat-mdc-select-min-line\\\" *ngSwitchDefault>{{triggerValue}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-mdc-select-arrow-wrapper\\\">\\n    <div class=\\\"mat-mdc-select-arrow\\\">\\n      <!-- Use an inline SVG, because it works better than a CSS triangle in high contrast mode. -->\\n      <svg viewBox=\\\"0 0 24 24\\\" width=\\\"24px\\\" height=\\\"24px\\\" focusable=\\\"false\\\" aria-hidden=\\\"true\\\">\\n        <path d=\\\"M7 10l5 5 5-5z\\\"/>\\n      </svg>\\n    </div>\\n  </div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"_preferredOverlayOrigin || fallbackOverlayOrigin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayWidth]=\\\"_overlayWidth\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div\\n    #panel\\n    role=\\\"listbox\\\"\\n    tabindex=\\\"-1\\\"\\n    class=\\\"mat-mdc-select-panel mdc-menu-surface mdc-menu-surface--open {{ _getPanelTheme() }}\\\"\\n    [attr.id]=\\\"id + '-panel'\\\"\\n    [attr.aria-multiselectable]=\\\"multiple\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n    [ngClass]=\\\"panelClass\\\"\\n    [@transformPanel]=\\\"'showing'\\\"\\n    (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\">\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\".mdc-menu-surface{display:none;position:absolute;box-sizing:border-box;margin:0;padding:0;transform:scale(1);transform-origin:top left;opacity:0;overflow:auto;will-change:transform,opacity;transform-origin-left:top left;transform-origin-right:top right}.mdc-menu-surface:focus{outline:none}.mdc-menu-surface--animating-open{display:inline-block;transform:scale(0.8);opacity:0}.mdc-menu-surface--open{display:inline-block;transform:scale(1);opacity:1}.mdc-menu-surface--animating-closed{display:inline-block;opacity:0}[dir=rtl] .mdc-menu-surface,.mdc-menu-surface[dir=rtl]{transform-origin-left:top right;transform-origin-right:top left}.mdc-menu-surface--anchor{position:relative;overflow:visible}.mdc-menu-surface--fixed{position:fixed}.mdc-menu-surface--fullwidth{width:100%}.mdc-menu-surface{max-width:calc(100vw - 32px);max-width:var(--mdc-menu-max-width, calc(100vw - 32px));max-height:calc(100vh - 32px);max-height:var(--mdc-menu-max-height, calc(100vh - 32px));z-index:8;border-radius:4px;border-radius:var(--mdc-shape-medium, 4px)}.mat-mdc-select{display:inline-block;width:100%;outline:none}.mat-mdc-select-trigger{display:inline-flex;align-items:center;cursor:pointer;position:relative;box-sizing:border-box;width:100%}.mat-mdc-select-disabled .mat-mdc-select-trigger{-webkit-user-select:none;user-select:none;cursor:default}.mat-mdc-select-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-mdc-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-mdc-select-arrow-wrapper{height:24px;flex-shrink:0;display:inline-flex;align-items:center}.mat-form-field-appearance-fill .mat-mdc-select-arrow-wrapper{transform:translateY(-8px)}.mat-form-field-appearance-fill .mdc-text-field--no-label .mat-mdc-select-arrow-wrapper{transform:none}.mat-mdc-select-arrow{width:10px;height:5px;position:relative}.mat-mdc-select-arrow svg{fill:currentColor;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%)}.cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:CanvasText}.mat-mdc-select-disabled .cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:GrayText}.mdc-menu-surface.mat-mdc-select-panel{width:100%;max-height:275px;position:static;outline:0;margin:0;padding:8px 0;list-style-type:none}.mdc-menu-surface.mat-mdc-select-panel:focus{outline:none}.cdk-high-contrast-active .mdc-menu-surface.mat-mdc-select-panel{outline:solid 1px}.cdk-overlay-pane:not(.mat-mdc-select-panel-above) .mdc-menu-surface.mat-mdc-select-panel{border-top-left-radius:0;border-top-right-radius:0;transform-origin:top center}.mat-mdc-select-panel-above .mdc-menu-surface.mat-mdc-select-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:bottom center}.mat-mdc-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-mdc-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-mdc-select-placeholder{color:rgba(0,0,0,0);-webkit-text-fill-color:rgba(0,0,0,0);transition:none;display:block}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mat-mdc-floating-label{max-width:calc(100% - 18px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mdc-floating-label--float-above{max-width:calc(100% / 0.75 - 24px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-notched-outline__notch{max-width:calc(100% - 60px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-text-field--label-floating .mdc-notched-outline__notch{max-width:calc(100% - 24px)}.mat-mdc-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;visibility:hidden}\"], dependencies: [{ kind: \"directive\", type: i7.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i7.NgSwitch, selector: \"[ngSwitch]\", inputs: [\"ngSwitch\"] }, { kind: \"directive\", type: i7.NgSwitchCase, selector: \"[ngSwitchCase]\", inputs: [\"ngSwitchCase\"] }, { kind: \"directive\", type: i7.NgSwitchDefault, selector: \"[ngSwitchDefault]\" }, { kind: \"directive\", type: i8.CdkConnectedOverlay, selector: \"[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]\", inputs: [\"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayPositionStrategy\", \"cdkConnectedOverlayOffsetX\", \"cdkConnectedOverlayOffsetY\", \"cdkConnectedOverlayWidth\", \"cdkConnectedOverlayHeight\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayMinHeight\", \"cdkConnectedOverlayBackdropClass\", \"cdkConnectedOverlayPanelClass\", \"cdkConnectedOverlayViewportMargin\", \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayDisableClose\", \"cdkConnectedOverlayTransformOriginOn\", \"cdkConnectedOverlayHasBackdrop\", \"cdkConnectedOverlayLockPosition\", \"cdkConnectedOverlayFlexibleDimensions\", \"cdkConnectedOverlayGrowAfterOpen\", \"cdkConnectedOverlayPush\"], outputs: [\"backdropClick\", \"positionChange\", \"attach\", \"detach\", \"overlayKeydown\", \"overlayOutsideClick\"], exportAs: [\"cdkConnectedOverlay\"] }, { kind: \"directive\", type: i8.CdkOverlayOrigin, selector: \"[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]\", exportAs: [\"cdkOverlayOrigin\"] }], animations: [matSelectAnimations.transformPanel], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatSelect, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-select', exportAs: 'matSelect', inputs: ['disabled', 'disableRipple', 'tabIndex'], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        'role': 'combobox',\n                        'aria-autocomplete': 'none',\n                        'aria-haspopup': 'listbox',\n                        'class': 'mat-mdc-select',\n                        '[attr.id]': 'id',\n                        '[attr.tabindex]': 'tabIndex',\n                        '[attr.aria-controls]': 'panelOpen ? id + \"-panel\" : null',\n                        '[attr.aria-expanded]': 'panelOpen',\n                        '[attr.aria-label]': 'ariaLabel || null',\n                        '[attr.aria-required]': 'required.toString()',\n                        '[attr.aria-disabled]': 'disabled.toString()',\n                        '[attr.aria-invalid]': 'errorState',\n                        '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n                        'ngSkipHydration': '',\n                        '[class.mat-mdc-select-disabled]': 'disabled',\n                        '[class.mat-mdc-select-invalid]': 'errorState',\n                        '[class.mat-mdc-select-required]': 'required',\n                        '[class.mat-mdc-select-empty]': 'empty',\n                        '[class.mat-mdc-select-multiple]': 'multiple',\n                        '(keydown)': '_handleKeydown($event)',\n                        '(focus)': '_onFocus()',\n                        '(blur)': '_onBlur()',\n                    }, animations: [matSelectAnimations.transformPanel], providers: [\n                        { provide: MatFormFieldControl, useExisting: MatSelect },\n                        { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect },\n                    ], template: \"<!--\\n Note that the select trigger element specifies `aria-owns` pointing to the listbox overlay.\\n While aria-owns is not required for the ARIA 1.2 `role=\\\"combobox\\\"` interaction pattern,\\n it fixes an issue with VoiceOver when the select appears inside of an `aria-model=\\\"true\\\"`\\n element (e.g. a dialog). Without this `aria-owns`, the `aria-modal` on a dialog prevents\\n VoiceOver from \\\"seeing\\\" the select's listbox overlay for aria-activedescendant.\\n Using `aria-owns` re-parents the select overlay so that it works again.\\n See https://github.com/angular/components/issues/20694\\n-->\\n<div cdk-overlay-origin\\n     [attr.aria-owns]=\\\"panelOpen ? id + '-panel' : null\\\"\\n     class=\\\"mat-mdc-select-trigger\\\"\\n     (click)=\\\"toggle()\\\"\\n     #fallbackOverlayOrigin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-mdc-select-value\\\" [ngSwitch]=\\\"empty\\\" [attr.id]=\\\"_valueId\\\">\\n    <span class=\\\"mat-mdc-select-placeholder mat-mdc-select-min-line\\\" *ngSwitchCase=\\\"true\\\">{{placeholder}}</span>\\n    <span class=\\\"mat-mdc-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span class=\\\"mat-mdc-select-min-line\\\" *ngSwitchDefault>{{triggerValue}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-mdc-select-arrow-wrapper\\\">\\n    <div class=\\\"mat-mdc-select-arrow\\\">\\n      <!-- Use an inline SVG, because it works better than a CSS triangle in high contrast mode. -->\\n      <svg viewBox=\\\"0 0 24 24\\\" width=\\\"24px\\\" height=\\\"24px\\\" focusable=\\\"false\\\" aria-hidden=\\\"true\\\">\\n        <path d=\\\"M7 10l5 5 5-5z\\\"/>\\n      </svg>\\n    </div>\\n  </div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"_preferredOverlayOrigin || fallbackOverlayOrigin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayWidth]=\\\"_overlayWidth\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div\\n    #panel\\n    role=\\\"listbox\\\"\\n    tabindex=\\\"-1\\\"\\n    class=\\\"mat-mdc-select-panel mdc-menu-surface mdc-menu-surface--open {{ _getPanelTheme() }}\\\"\\n    [attr.id]=\\\"id + '-panel'\\\"\\n    [attr.aria-multiselectable]=\\\"multiple\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n    [ngClass]=\\\"panelClass\\\"\\n    [@transformPanel]=\\\"'showing'\\\"\\n    (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\">\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\".mdc-menu-surface{display:none;position:absolute;box-sizing:border-box;margin:0;padding:0;transform:scale(1);transform-origin:top left;opacity:0;overflow:auto;will-change:transform,opacity;transform-origin-left:top left;transform-origin-right:top right}.mdc-menu-surface:focus{outline:none}.mdc-menu-surface--animating-open{display:inline-block;transform:scale(0.8);opacity:0}.mdc-menu-surface--open{display:inline-block;transform:scale(1);opacity:1}.mdc-menu-surface--animating-closed{display:inline-block;opacity:0}[dir=rtl] .mdc-menu-surface,.mdc-menu-surface[dir=rtl]{transform-origin-left:top right;transform-origin-right:top left}.mdc-menu-surface--anchor{position:relative;overflow:visible}.mdc-menu-surface--fixed{position:fixed}.mdc-menu-surface--fullwidth{width:100%}.mdc-menu-surface{max-width:calc(100vw - 32px);max-width:var(--mdc-menu-max-width, calc(100vw - 32px));max-height:calc(100vh - 32px);max-height:var(--mdc-menu-max-height, calc(100vh - 32px));z-index:8;border-radius:4px;border-radius:var(--mdc-shape-medium, 4px)}.mat-mdc-select{display:inline-block;width:100%;outline:none}.mat-mdc-select-trigger{display:inline-flex;align-items:center;cursor:pointer;position:relative;box-sizing:border-box;width:100%}.mat-mdc-select-disabled .mat-mdc-select-trigger{-webkit-user-select:none;user-select:none;cursor:default}.mat-mdc-select-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-mdc-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-mdc-select-arrow-wrapper{height:24px;flex-shrink:0;display:inline-flex;align-items:center}.mat-form-field-appearance-fill .mat-mdc-select-arrow-wrapper{transform:translateY(-8px)}.mat-form-field-appearance-fill .mdc-text-field--no-label .mat-mdc-select-arrow-wrapper{transform:none}.mat-mdc-select-arrow{width:10px;height:5px;position:relative}.mat-mdc-select-arrow svg{fill:currentColor;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%)}.cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:CanvasText}.mat-mdc-select-disabled .cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:GrayText}.mdc-menu-surface.mat-mdc-select-panel{width:100%;max-height:275px;position:static;outline:0;margin:0;padding:8px 0;list-style-type:none}.mdc-menu-surface.mat-mdc-select-panel:focus{outline:none}.cdk-high-contrast-active .mdc-menu-surface.mat-mdc-select-panel{outline:solid 1px}.cdk-overlay-pane:not(.mat-mdc-select-panel-above) .mdc-menu-surface.mat-mdc-select-panel{border-top-left-radius:0;border-top-right-radius:0;transform-origin:top center}.mat-mdc-select-panel-above .mdc-menu-surface.mat-mdc-select-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:bottom center}.mat-mdc-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-mdc-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-mdc-select-placeholder{color:rgba(0,0,0,0);-webkit-text-fill-color:rgba(0,0,0,0);transition:none;display:block}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mat-mdc-floating-label{max-width:calc(100% - 18px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mdc-floating-label--float-above{max-width:calc(100% / 0.75 - 24px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-notched-outline__notch{max-width:calc(100% - 60px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-text-field--label-floating .mdc-notched-outline__notch{max-width:calc(100% - 24px)}.mat-mdc-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;visibility:hidden}\"] }]\n        }], propDecorators: { options: [{\n                type: ContentChildren,\n                args: [MatOption, { descendants: true }]\n            }], optionGroups: [{\n                type: ContentChildren,\n                args: [MAT_OPTGROUP, { descendants: true }]\n            }], customTrigger: [{\n                type: ContentChild,\n                args: [MAT_SELECT_TRIGGER]\n            }], hideSingleSelectionIndicator: [{\n                type: Input\n            }] } });\n\nclass MatSelectModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatSelectModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.0\", ngImport: i0, type: MatSelectModule, declarations: [MatSelect, MatSelectTrigger], imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule], exports: [CdkScrollableModule,\n            MatFormFieldModule,\n            MatSelect,\n            MatSelectTrigger,\n            MatOptionModule,\n            MatCommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatSelectModule, providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER], imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule, CdkScrollableModule,\n            MatFormFieldModule,\n            MatOptionModule,\n            MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatSelectModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule],\n                    exports: [\n                        CdkScrollableModule,\n                        MatFormFieldModule,\n                        MatSelect,\n                        MatSelectTrigger,\n                        MatOptionModule,\n                        MatCommonModule,\n                    ],\n                    declarations: [MatSelect, MatSelectTrigger],\n                    providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SELECT_CONFIG, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_SELECT_TRIGGER, MatSelect, MatSelectChange, MatSelectModule, MatSelectTrigger, _MatSelectBase, matSelectAnimations };\n","import toPropertyKey from \"./toPropertyKey.js\";\nexport default function _defineProperty(obj, key, value) {\n  key = toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}","import defineProperty from \"./defineProperty.js\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}"],"x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33]}