{"version":3,"mappings":"8KAOO,cAAqBA,GACxB,MAAMC,GAAiBC,QAAkBF,IACjCA,KAAMG,EAASC,WAASC,KAAqBL,GAC/CM,EAAS,IAAIC,IAAYC,IAC3B,MAAQC,UAAWN,EACnB,IAAKM,EAED,YADAD,EAAWE,WAGf,MAAMC,EAAS,IAAIC,MAAMH,GACzB,IAAII,EAAuBJ,EACvBK,EAAqBL,EACzB,QAASM,EAAc,EAAGA,EAAcN,EAAQM,IAAe,CAC3D,IAAIC,GAAW,GACfC,QAAUd,EAAQY,IAAcG,WAAUC,OAAyBX,EAAaY,IACvEJ,IACDA,GAAW,EACXF,KAEJH,EAAOI,GAAeK,GACvB,IAAMP,SAAwBQ,EAAW,OACnCR,IAAyBG,KACrBF,GACDN,EAAWc,KAAKlB,GAAOmB,OAAanB,EAAMO,GAAUA,GAExDH,EAAWE,kBAK3B,OAAOT,EAAiBK,EAAOkB,MAAKC,OAAiBxB,IAAmBK,2DCnCrE,WAAaoB,EAASC,GACzB,OAAOC,OAAQ,CAACC,EAAQrB,KACpB,IAAIsB,EAAQ,EACZD,EAAOX,WAAUC,OAAyBX,EAAaY,IACnDZ,EAAWc,KAAKI,EAAQK,KAAKJ,EAASP,EAAOU,+ECHlD,WAAmBJ,EAASzB,GAC/B,OAAO2B,OAAQ,CAACC,EAAQrB,KACpB,IAAIwB,EAAkB,KAClBF,EAAQ,EACRG,GAAa,EACjB,MAAMC,EAAgB,IAAMD,IAAeD,GAAmBxB,EAAWE,WACzEmB,EAAOX,WAAUC,OAAyBX,EAAaY,IAC/B,MAApBY,GAAkEA,EAAgBG,cAClF,IAAIC,EAAa,EACjB,MAAMC,EAAaP,OACnBb,MAAUS,EAAQN,EAAOiB,IAAanB,UAAWc,GAAkBb,OAAyBX,EAAa8B,GAAe9B,EAAWc,KAAKrB,EAAiBA,EAAemB,EAAOkB,EAAYD,EAAYD,KAAgBE,GAAa,KAChON,EAAkB,KAClBE,QAEL,KACCD,GAAa,EACbC,2CCnBZ,MAAQK,WAAY3B,OACZ4B,iBAAgBC,UAAWC,EAAatC,KAAMuC,GAAYC,OAC3D,WAA8B5C,GACjC,GAAoB,IAAhBA,EAAKS,OAAc,CACnB,MAAMoC,EAAQ7C,EAAK,GACnB,GAAIuC,EAAQM,GACR,MAAO,CAAE7C,KAAM6C,EAAOzC,KAAM,MAEhC,GAUR,WAAgB0C,GACZ,OAAOA,GAAsB,iBAARA,GAAoBN,EAAeM,KAASJ,EAXzDK,CAAOF,GAAQ,CACf,MAAMzC,EAAOuC,EAAQE,GACrB,MAAO,CACH7C,KAAMI,EAAK4C,IAAKC,GAAQJ,EAAMI,IAC9B7C,SAIZ,MAAO,CAAEJ,KAAMA,EAAMI,KAAM,uBChBxB,WAAsBA,EAAMO,GAC/B,OAAOP,EAAK8C,OAAO,CAAC5C,EAAQ2C,EAAKE,KAAQ7C,EAAO2C,GAAOtC,EAAOwC,GAAK7C,GAAS,mECAhF,MAAQiC,WAAY3B,MAIb,WAA0BwC,GAC7B,OAAOJ,OAAIhD,GAJf,WAAqBoD,EAAIpD,GACrB,OAAOuC,EAAQvC,GAAQoD,KAAMpD,GAAQoD,EAAGpD,GAGrBqD,CAAYD,EAAIpD","names":["args","resultSelector","popResultSelector","sources","keys","argsArgArrayOrObject","result","Observable","subscriber","length","complete","values","Array","remainingCompletions","remainingEmissions","sourceIndex","hasValue","innerFrom","subscribe","createOperatorSubscriber","value","undefined","next","createObject","pipe","mapOneOrManyArgs","project","thisArg","operate","source","index","call","innerSubscriber","isComplete","checkComplete","unsubscribe","innerIndex","outerIndex","innerValue","isArray","getPrototypeOf","prototype","objectProto","getKeys","Object","first","obj","isPOJO","map","key","reduce","i","fn","callOrApply"],"sources":["./node_modules/rxjs/dist/esm/internal/observable/forkJoin.js","./node_modules/rxjs/dist/esm/internal/operators/map.js","./node_modules/rxjs/dist/esm/internal/operators/switchMap.js","./node_modules/rxjs/dist/esm/internal/util/argsArgArrayOrObject.js","./node_modules/rxjs/dist/esm/internal/util/createObject.js","./node_modules/rxjs/dist/esm/internal/util/mapOneOrManyArgs.js"],"sourcesContent":["import { Observable } from '../Observable';\nimport { argsArgArrayOrObject } from '../util/argsArgArrayOrObject';\nimport { innerFrom } from './innerFrom';\nimport { popResultSelector } from '../util/args';\nimport { createOperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nimport { createObject } from '../util/createObject';\nexport function forkJoin(...args) {\n    const resultSelector = popResultSelector(args);\n    const { args: sources, keys } = argsArgArrayOrObject(args);\n    const result = new Observable((subscriber) => {\n        const { length } = sources;\n        if (!length) {\n            subscriber.complete();\n            return;\n        }\n        const values = new Array(length);\n        let remainingCompletions = length;\n        let remainingEmissions = length;\n        for (let sourceIndex = 0; sourceIndex < length; sourceIndex++) {\n            let hasValue = false;\n            innerFrom(sources[sourceIndex]).subscribe(createOperatorSubscriber(subscriber, (value) => {\n                if (!hasValue) {\n                    hasValue = true;\n                    remainingEmissions--;\n                }\n                values[sourceIndex] = value;\n            }, () => remainingCompletions--, undefined, () => {\n                if (!remainingCompletions || !hasValue) {\n                    if (!remainingEmissions) {\n                        subscriber.next(keys ? createObject(keys, values) : values);\n                    }\n                    subscriber.complete();\n                }\n            }));\n        }\n    });\n    return resultSelector ? result.pipe(mapOneOrManyArgs(resultSelector)) : result;\n}\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function map(project, thisArg) {\n    return operate((source, subscriber) => {\n        let index = 0;\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            subscriber.next(project.call(thisArg, value, index++));\n        }));\n    });\n}\n","import { innerFrom } from '../observable/innerFrom';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function switchMap(project, resultSelector) {\n    return operate((source, subscriber) => {\n        let innerSubscriber = null;\n        let index = 0;\n        let isComplete = false;\n        const checkComplete = () => isComplete && !innerSubscriber && subscriber.complete();\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            innerSubscriber === null || innerSubscriber === void 0 ? void 0 : innerSubscriber.unsubscribe();\n            let innerIndex = 0;\n            const outerIndex = index++;\n            innerFrom(project(value, outerIndex)).subscribe((innerSubscriber = createOperatorSubscriber(subscriber, (innerValue) => subscriber.next(resultSelector ? resultSelector(value, innerValue, outerIndex, innerIndex++) : innerValue), () => {\n                innerSubscriber = null;\n                checkComplete();\n            })));\n        }, () => {\n            isComplete = true;\n            checkComplete();\n        }));\n    });\n}\n","const { isArray } = Array;\nconst { getPrototypeOf, prototype: objectProto, keys: getKeys } = Object;\nexport function argsArgArrayOrObject(args) {\n    if (args.length === 1) {\n        const first = args[0];\n        if (isArray(first)) {\n            return { args: first, keys: null };\n        }\n        if (isPOJO(first)) {\n            const keys = getKeys(first);\n            return {\n                args: keys.map((key) => first[key]),\n                keys,\n            };\n        }\n    }\n    return { args: args, keys: null };\n}\nfunction isPOJO(obj) {\n    return obj && typeof obj === 'object' && getPrototypeOf(obj) === objectProto;\n}\n","export function createObject(keys, values) {\n    return keys.reduce((result, key, i) => ((result[key] = values[i]), result), {});\n}\n","import { map } from \"../operators/map\";\nconst { isArray } = Array;\nfunction callOrApply(fn, args) {\n    return isArray(args) ? fn(...args) : fn(args);\n}\nexport function mapOneOrManyArgs(fn) {\n    return map(args => callOrApply(fn, args));\n}\n"],"sourceRoot":"webpack:///","file":"114.e2f22a5f90f59b61.js"}