{"version":3,"mappings":"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","names":["args","scheduler","popScheduler","from","defaultValue","operate","source","subscriber","hasValue","subscribe","createOperatorSubscriber","value","next","complete","predicate","hasDefaultValue","arguments","length","pipe","filter","v","i","identity","take","defaultIfEmpty","throwIfEmpty","EmptyError","accumulator","seed","scanInternals","hasSeed","emitOnNext","emitBeforeComplete","hasState","state","index","errorFactory","defaultErrorFactory","error","createErrorClass","_super","this","name","message","ContentModule","ɵfac","ɵmod","i0","ɵinj","CommonModule","Plugin","constructor","data","super","fileTypes","id","handler","undefined","selectionComponent","renderComponent","editorComponent","type","settings","pluginName","map","s","AttributeValue","fullscreen","CONTENT_PLUGIN","InjectionToken","ContentPluginManager","BasePluginManager","pcm","moduleLoader","pluginDef","of","PluginDef","i1","i2","ɵprov","factory","PluginModule","UtilsModule","PluginConfigurationManager","configs","addConfig","cfg","push","getConfigs","ConfigDiscovery","loadPlugins","ids","len","loadModules$","len2","modules","j","plugins","has","some","get","findIndex","p","loadModule","module","forkJoin","pluginInstances","Map","discoveryPipeline","discovery","addDiscovery","d","register","plugin","set","getPlugins","newPlugins","switchMap","def","getPlugin","m","PluginConfigModule","title"],"sources":["./node_modules/rxjs/dist/esm/internal/observable/of.js","./node_modules/rxjs/dist/esm/internal/operators/defaultIfEmpty.js","./node_modules/rxjs/dist/esm/internal/operators/first.js","./node_modules/rxjs/dist/esm/internal/operators/scan.js","./node_modules/rxjs/dist/esm/internal/operators/scanInternals.js","./node_modules/rxjs/dist/esm/internal/operators/throwIfEmpty.js","./node_modules/rxjs/dist/esm/internal/util/EmptyError.js","./node_modules/@rollthecloudinc/content/fesm2020/rollthecloudinc-content.mjs","./node_modules/@rollthecloudinc/plugin/fesm2020/rollthecloudinc-plugin.mjs"],"sourcesContent":["import { popScheduler } from '../util/args';\nimport { from } from './from';\nexport function of(...args) {\n    const scheduler = popScheduler(args);\n    return from(args, scheduler);\n}\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function defaultIfEmpty(defaultValue) {\n    return operate((source, subscriber) => {\n        let hasValue = false;\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            hasValue = true;\n            subscriber.next(value);\n        }, () => {\n            if (!hasValue) {\n                subscriber.next(defaultValue);\n            }\n            subscriber.complete();\n        }));\n    });\n}\n","import { EmptyError } from '../util/EmptyError';\nimport { filter } from './filter';\nimport { take } from './take';\nimport { defaultIfEmpty } from './defaultIfEmpty';\nimport { throwIfEmpty } from './throwIfEmpty';\nimport { identity } from '../util/identity';\nexport function first(predicate, defaultValue) {\n    const hasDefaultValue = arguments.length >= 2;\n    return (source) => source.pipe(predicate ? filter((v, i) => predicate(v, i, source)) : identity, take(1), hasDefaultValue ? defaultIfEmpty(defaultValue) : throwIfEmpty(() => new EmptyError()));\n}\n","import { operate } from '../util/lift';\nimport { scanInternals } from './scanInternals';\nexport function scan(accumulator, seed) {\n    return operate(scanInternals(accumulator, seed, arguments.length >= 2, true));\n}\n","import { createOperatorSubscriber } from './OperatorSubscriber';\nexport function scanInternals(accumulator, seed, hasSeed, emitOnNext, emitBeforeComplete) {\n    return (source, subscriber) => {\n        let hasState = hasSeed;\n        let state = seed;\n        let index = 0;\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            const i = index++;\n            state = hasState\n                ?\n                    accumulator(state, value, i)\n                :\n                    ((hasState = true), value);\n            emitOnNext && subscriber.next(state);\n        }, emitBeforeComplete &&\n            (() => {\n                hasState && subscriber.next(state);\n                subscriber.complete();\n            })));\n    };\n}\n","import { EmptyError } from '../util/EmptyError';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function throwIfEmpty(errorFactory = defaultErrorFactory) {\n    return operate((source, subscriber) => {\n        let hasValue = false;\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            hasValue = true;\n            subscriber.next(value);\n        }, () => (hasValue ? subscriber.complete() : subscriber.error(errorFactory()))));\n    });\n}\nfunction defaultErrorFactory() {\n    return new EmptyError();\n}\n","import { createErrorClass } from './createErrorClass';\nexport const EmptyError = createErrorClass((_super) => function EmptyErrorImpl() {\n    _super(this);\n    this.name = 'EmptyError';\n    this.message = 'no elements in sequence';\n});\n","import * as i0 from '@angular/core';\nimport { NgModule, InjectionToken, Injectable } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AttributeValue } from '@rollthecloudinc/attributes';\nimport * as i1 from '@rollthecloudinc/plugin';\nimport { Plugin, BasePluginManager, PluginDef } from '@rollthecloudinc/plugin';\nimport { of } from 'rxjs';\nimport * as i2 from '@rollthecloudinc/utils';\n\n/*import { defaultPluginManagerFactory, pluginManagerToken } from '@rollthecloudinc/plugin';\nimport { ContentPlugin, ContentPluginDef } from './models/content.models';\nimport { ContentPluginManager } from './services/content-plugin-manager.service';*/\nclass ContentModule {\n}\nContentModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: ContentModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nContentModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: ContentModule, imports: [CommonModule] });\nContentModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: ContentModule, imports: [[CommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: ContentModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule]\n                }]\n        }] });\n\nclass ContentPlugin extends Plugin {\n    constructor(data) {\n        super(data);\n        this.fileTypes = [];\n        if (data) {\n            this.name = this.id;\n            this.handler = data.handler !== undefined ? data.handler : undefined;\n            this.selectionComponent = data.selectionComponent ? data.selectionComponent : undefined;\n            this.renderComponent = data.renderComponent ? data.renderComponent : undefined;\n            this.editorComponent = data.editorComponent ? data.editorComponent : undefined;\n        }\n    }\n}\nclass ContentBinding {\n    constructor(data) {\n        if (data) {\n            this.type = data.type;\n            this.id = data.id;\n        }\n    }\n}\nclass ContentInstance {\n    constructor(data) {\n        this.settings = [];\n        if (data) {\n            this.pluginName = data.pluginName;\n            if (data.settings) {\n                this.settings = data.settings.map(s => new AttributeValue(s));\n            }\n        }\n    }\n}\n/*export class Snippet {\n  content: string;\n  contentType: string;\n  jsFile?: string;\n  jsScript?: string;\n  constructor(data?: Snippet) {\n    if(data) {\n      this.content = data.content;\n      this.contentType = data.contentType;\n      if (data.jsFile && data.jsFile !== '') {\n        this.jsFile = data.jsFile;\n      }\n      if (data.jsScript && data.jsScript !== '') {\n        this.jsScript = data.jsScript;\n      }\n    }\n  }\n}*/\nclass ContentPluginEditorOptions {\n    constructor(data) {\n        this.fullscreen = false;\n        if (data) {\n            this.fullscreen = data.fullscreen;\n        }\n    }\n}\n\nconst CONTENT_PLUGIN = new InjectionToken('ContentPlugin');\n\nclass ContentPluginManager extends BasePluginManager {\n    constructor(pcm, moduleLoader) {\n        super(pcm, moduleLoader);\n    }\n    pluginDef() {\n        return of(new PluginDef({ name: 'content' }));\n    }\n}\nContentPluginManager.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: ContentPluginManager, deps: [{ token: i1.PluginConfigurationManager }, { token: i2.ModuleLoaderService }], target: i0.ɵɵFactoryTarget.Injectable });\nContentPluginManager.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: ContentPluginManager, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: ContentPluginManager, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.PluginConfigurationManager }, { type: i2.ModuleLoaderService }]; } });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CONTENT_PLUGIN, ContentBinding, ContentInstance, ContentModule, ContentPlugin, ContentPluginEditorOptions, ContentPluginManager };\n","import * as i0 from '@angular/core';\nimport { NgModule, Injectable } from '@angular/core';\nimport * as i2 from '@rollthecloudinc/utils';\nimport { UtilsModule } from '@rollthecloudinc/utils';\nimport { of, forkJoin } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\n\nclass PluginModule {\n}\nPluginModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: PluginModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nPluginModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: PluginModule, imports: [UtilsModule] });\nPluginModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: PluginModule, imports: [[\n            UtilsModule\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: PluginModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [],\n                    imports: [\n                        UtilsModule\n                    ],\n                    exports: []\n                }]\n        }] });\n\nclass PluginConfigurationManager {\n    constructor() {\n        this.configs = [];\n    }\n    addConfig(cfg) {\n        this.configs.push(cfg);\n    }\n    getConfigs() {\n        return this.configs;\n    }\n}\nPluginConfigurationManager.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: PluginConfigurationManager, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nPluginConfigurationManager.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: PluginConfigurationManager, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: PluginConfigurationManager, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }] });\n\nclass ConfigDiscovery {\n    constructor(pcm, moduleLoader) {\n        this.pcm = pcm;\n        this.moduleLoader = moduleLoader;\n    }\n    loadPlugins(pluginDef, ids = []) {\n        const configs = this.pcm.getConfigs();\n        const len = configs.length;\n        const loadModules$ = [];\n        for (let i = 0; i < len; i++) {\n            const len2 = configs[i].modules.length;\n            for (let j = 0; j < len2; j++) {\n                if (configs[i].modules[j].plugins.has(pluginDef.name) &&\n                    (ids.length === 0 ||\n                        ids.some(id => configs[i].modules[j].plugins.get(pluginDef.name).findIndex(p => p === id) > -1))) {\n                    loadModules$.push(this.moduleLoader.loadModule(configs[i].modules[j].module));\n                }\n            }\n        }\n        if (loadModules$.length === 0) {\n            return of(true);\n        }\n        else {\n            return forkJoin(loadModules$).pipe(map(() => true));\n        }\n    }\n}\nConfigDiscovery.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: ConfigDiscovery, deps: [{ token: PluginConfigurationManager }, { token: i2.ModuleLoaderService }], target: i0.ɵɵFactoryTarget.Injectable });\nConfigDiscovery.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: ConfigDiscovery, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: ConfigDiscovery, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: PluginConfigurationManager }, { type: i2.ModuleLoaderService }]; } });\n\n// import { Injectable } from '@angular/core';\n// @Injectable()\nclass BasePluginManager {\n    constructor(pcm, moduleLoader) {\n        this.pcm = pcm;\n        this.moduleLoader = moduleLoader;\n        this.pluginInstances = new Map();\n        this.discoveryPipeline = [];\n        this.discovery();\n    }\n    discovery() {\n        this.discoveryPipeline.push(new ConfigDiscovery(this.pcm, this.moduleLoader));\n    }\n    addDiscovery(d) {\n        this.discoveryPipeline.push(d);\n    }\n    register(plugin) {\n        this.pluginInstances.set(plugin.id, plugin);\n    }\n    getPlugins(ids) {\n        const newPlugins = ids ? ids.filter(id => !this.pluginInstances.has(id)) : [];\n        if (ids && newPlugins.length === 0) {\n            return of(new Map(ids.map(id => [id, this.pluginInstances.get(id)])));\n        }\n        else {\n            return this.pluginDef().pipe(switchMap(def => forkJoin(this.discoveryPipeline.map(d => d.loadPlugins(def, newPlugins))).pipe(map(() => ids ? new Map(ids.map(id => [id, this.pluginInstances.get(id)])) : this.pluginInstances))));\n        }\n    }\n    getPlugin(id) {\n        if (this.pluginInstances.has(id)) {\n            return of(this.pluginInstances.get(id));\n        }\n        else {\n            return this.pluginDef().pipe(switchMap(def => forkJoin(this.discoveryPipeline.map(d => d.loadPlugins(def, [id]))).pipe(map(() => this.pluginInstances.get(id)))));\n        }\n    }\n}\n\nclass PluginConfig {\n    constructor(data) {\n        this.modules = [];\n        if (data) {\n            if (data.modules) {\n                this.modules = data.modules.map(m => new PluginConfigModule(m));\n            }\n        }\n    }\n}\nclass Plugin {\n    constructor(data) {\n        if (data) {\n            this.id = data.id;\n            this.title = data.title;\n        }\n    }\n}\nclass PluginDef {\n    constructor(data) {\n        if (data) {\n            this.name = data.name;\n        }\n    }\n}\nclass PluginConfigModule {\n    constructor(data) {\n        if (data) {\n            this.module = data.module;\n            if (data.plugins) {\n                this.plugins = new Map([...data.plugins]);\n            }\n        }\n    }\n}\n/*export class BasePlugin implements Plugin {\n}*/\n\n/*\n * Public API Surface of plugin\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BasePluginManager, ConfigDiscovery, Plugin, PluginConfig, PluginConfigModule, PluginConfigurationManager, PluginDef, PluginModule };\n"],"sourceRoot":"webpack:///","file":"common.e9dbf6b1a8c51f97.js"}