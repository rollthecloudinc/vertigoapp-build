{"version":3,"file":"2035.c63f6dbfe98021c7.js","mappings":"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","names":["Portal","_classCallCheck","this","_createClass","key","value","host","_attachedHost","attach","detach","get","ComponentPortal","_Portal","_inherits","_super","_createSuper","component","viewContainerRef","injector","componentFactoryResolver","projectableNodes","_this","call","TemplatePortal","_Portal2","_super2","templateRef","context","_this2","elementRef","arguments","length","undefined","_get","_getPrototypeOf","prototype","DomPortal","_Portal3","_super3","element","_this3","ElementRef","nativeElement","BasePortalOutlet","_isDisposed","attachDomPortal","_attachedPortal","portal","attachComponentPortal","attachTemplatePortal","setAttachedHost","_invokeDisposeFn","hasAttached","fn","_disposeFn","BasePortalHost","_BasePortalOutlet","_super4","apply","DomPortalOutlet","_BasePortalOutlet2","_super5","outletElement","_componentFactoryResolver","_appRef","_defaultInjector","_document","_thisSuper","_this4","anchorNode","createComment","parentNode","insertBefore","appendChild","_assertThisInitialized","replaceChild","componentRef","_this5","componentFactory","resolveComponentFactory","createComponent","setDisposeFn","destroy","create","Injector","attachView","hostView","viewCount","detachView","_getComponentRootNode","_this6","viewContainer","viewRef","createEmbeddedView","rootNodes","forEach","rootNode","detectChanges","index","indexOf","remove","DomPortalHost","_DomPortalOutlet","_super6","CdkPortal","_TemplatePortal","_super7","ɵfac","t","i0","ɵdir","type","selectors","exportAs","features","TemplatePortalDirective","_CdkPortal","_super8","ɵTemplatePortalDirective_BaseFactory","provide","useExisting","CdkPortalOutlet","_BasePortalOutlet3","_super9","_viewContainerRef","_thisSuper2","_this7","_isInitialized","attached","EventEmitter","_getRootNode","set","_attachedRef","ref","emit","_this8","clear","nodeType","ELEMENT_NODE","DOCUMENT","inputs","outputs","PortalHostDirective","_CdkPortalOutlet","_super10","ɵPortalHostDirective_BaseFactory","PortalModule","ɵmod","ɵinj","PortalInjector","_parentInjector","_customTokens","token","notFoundValue","self","ReferenceError","Derived","hasNativeReflectConstruct","isNativeReflectConstruct","Z","result","Super","getPrototypeOf","NewTarget","constructor","Reflect","construct","_possibleConstructorReturn","esm_typeof","TypeError","assertThisInitialized","bind","target","property","receiver","base","_superPropBase","object","Object","hasOwnProperty","desc","getOwnPropertyDescriptor","o","setPrototypeOf","__proto__","subClass","superClass","writable","configurable","defineProperty","_setPrototypeOf_js__WEBPACK_IMPORTED_MODULE_0__","_isNativeReflectConstruct","sham","Proxy","Boolean","valueOf","_setPrototypeOf","p"],"sourceRoot":"webpack:///","sources":["./node_modules/@angular/cdk/fesm2022/portal.mjs","./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","./node_modules/@babel/runtime/helpers/esm/createSuper.js","./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","./node_modules/@babel/runtime/helpers/esm/get.js","./node_modules/@babel/runtime/helpers/esm/superPropBase.js","./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","./node_modules/@babel/runtime/helpers/esm/inherits.js","./node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js","./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { ElementRef, Injector, Directive, EventEmitter, Inject, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * Throws an exception when attempting to attach a null portal to a host.\n * @docs-private\n */\nfunction throwNullPortalError() {\n    throw Error('Must provide a portal to attach');\n}\n/**\n * Throws an exception when attempting to attach a portal to a host that is already attached.\n * @docs-private\n */\nfunction throwPortalAlreadyAttachedError() {\n    throw Error('Host already has a portal attached');\n}\n/**\n * Throws an exception when attempting to attach a portal to an already-disposed host.\n * @docs-private\n */\nfunction throwPortalOutletAlreadyDisposedError() {\n    throw Error('This PortalOutlet has already been disposed');\n}\n/**\n * Throws an exception when attempting to attach an unknown portal type.\n * @docs-private\n */\nfunction throwUnknownPortalTypeError() {\n    throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' +\n        'a ComponentPortal or a TemplatePortal.');\n}\n/**\n * Throws an exception when attempting to attach a portal to a null host.\n * @docs-private\n */\nfunction throwNullPortalOutletError() {\n    throw Error('Attempting to attach a portal to a null PortalOutlet');\n}\n/**\n * Throws an exception when attempting to detach a portal that is not attached.\n * @docs-private\n */\nfunction throwNoPortalAttachedError() {\n    throw Error('Attempting to detach a portal that is not attached to a host');\n}\n\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalOutlet`.\n */\nclass Portal {\n    /** Attach this portal to a host. */\n    attach(host) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (host == null) {\n                throwNullPortalOutletError();\n            }\n            if (host.hasAttached()) {\n                throwPortalAlreadyAttachedError();\n            }\n        }\n        this._attachedHost = host;\n        return host.attach(this);\n    }\n    /** Detach this portal from its host */\n    detach() {\n        let host = this._attachedHost;\n        if (host != null) {\n            this._attachedHost = null;\n            host.detach();\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throwNoPortalAttachedError();\n        }\n    }\n    /** Whether this portal is attached to a host. */\n    get isAttached() {\n        return this._attachedHost != null;\n    }\n    /**\n     * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n     * the PortalOutlet when it is performing an `attach()` or `detach()`.\n     */\n    setAttachedHost(host) {\n        this._attachedHost = host;\n    }\n}\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nclass ComponentPortal extends Portal {\n    constructor(component, viewContainerRef, injector, componentFactoryResolver, projectableNodes) {\n        super();\n        this.component = component;\n        this.viewContainerRef = viewContainerRef;\n        this.injector = injector;\n        this.componentFactoryResolver = componentFactoryResolver;\n        this.projectableNodes = projectableNodes;\n    }\n}\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n */\nclass TemplatePortal extends Portal {\n    constructor(\n    /** The embedded template that will be used to instantiate an embedded View in the host. */\n    templateRef, \n    /** Reference to the ViewContainer into which the template will be stamped out. */\n    viewContainerRef, \n    /** Contextual data to be passed in to the embedded view. */\n    context, \n    /** The injector to use for the embedded view. */\n    injector) {\n        super();\n        this.templateRef = templateRef;\n        this.viewContainerRef = viewContainerRef;\n        this.context = context;\n        this.injector = injector;\n    }\n    get origin() {\n        return this.templateRef.elementRef;\n    }\n    /**\n     * Attach the portal to the provided `PortalOutlet`.\n     * When a context is provided it will override the `context` property of the `TemplatePortal`\n     * instance.\n     */\n    attach(host, context = this.context) {\n        this.context = context;\n        return super.attach(host);\n    }\n    detach() {\n        this.context = undefined;\n        return super.detach();\n    }\n}\n/**\n * A `DomPortal` is a portal whose DOM element will be taken from its current position\n * in the DOM and moved into a portal outlet, when it is attached. On detach, the content\n * will be restored to its original position.\n */\nclass DomPortal extends Portal {\n    constructor(element) {\n        super();\n        this.element = element instanceof ElementRef ? element.nativeElement : element;\n    }\n}\n/**\n * Partial implementation of PortalOutlet that handles attaching\n * ComponentPortal and TemplatePortal.\n */\nclass BasePortalOutlet {\n    constructor() {\n        /** Whether this host has already been permanently disposed. */\n        this._isDisposed = false;\n        // @breaking-change 10.0.0 `attachDomPortal` to become a required abstract method.\n        this.attachDomPortal = null;\n    }\n    /** Whether this host has an attached portal. */\n    hasAttached() {\n        return !!this._attachedPortal;\n    }\n    /** Attaches a portal. */\n    attach(portal) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!portal) {\n                throwNullPortalError();\n            }\n            if (this.hasAttached()) {\n                throwPortalAlreadyAttachedError();\n            }\n            if (this._isDisposed) {\n                throwPortalOutletAlreadyDisposedError();\n            }\n        }\n        if (portal instanceof ComponentPortal) {\n            this._attachedPortal = portal;\n            return this.attachComponentPortal(portal);\n        }\n        else if (portal instanceof TemplatePortal) {\n            this._attachedPortal = portal;\n            return this.attachTemplatePortal(portal);\n            // @breaking-change 10.0.0 remove null check for `this.attachDomPortal`.\n        }\n        else if (this.attachDomPortal && portal instanceof DomPortal) {\n            this._attachedPortal = portal;\n            return this.attachDomPortal(portal);\n        }\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throwUnknownPortalTypeError();\n        }\n    }\n    /** Detaches a previously attached portal. */\n    detach() {\n        if (this._attachedPortal) {\n            this._attachedPortal.setAttachedHost(null);\n            this._attachedPortal = null;\n        }\n        this._invokeDisposeFn();\n    }\n    /** Permanently dispose of this portal host. */\n    dispose() {\n        if (this.hasAttached()) {\n            this.detach();\n        }\n        this._invokeDisposeFn();\n        this._isDisposed = true;\n    }\n    /** @docs-private */\n    setDisposeFn(fn) {\n        this._disposeFn = fn;\n    }\n    _invokeDisposeFn() {\n        if (this._disposeFn) {\n            this._disposeFn();\n            this._disposeFn = null;\n        }\n    }\n}\n/**\n * @deprecated Use `BasePortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nclass BasePortalHost extends BasePortalOutlet {\n}\n\n/**\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n */\nclass DomPortalOutlet extends BasePortalOutlet {\n    /**\n     * @param outletElement Element into which the content is projected.\n     * @param _componentFactoryResolver Used to resolve the component factory.\n     *   Only required when attaching component portals.\n     * @param _appRef Reference to the application. Only used in component portals when there\n     *   is no `ViewContainerRef` available.\n     * @param _defaultInjector Injector to use as a fallback when the portal being attached doesn't\n     *   have one. Only used for component portals.\n     * @param _document Reference to the document. Used when attaching a DOM portal. Will eventually\n     *   become a required parameter.\n     */\n    constructor(\n    /** Element into which the content is projected. */\n    outletElement, _componentFactoryResolver, _appRef, _defaultInjector, \n    /**\n     * @deprecated `_document` Parameter to be made required.\n     * @breaking-change 10.0.0\n     */\n    _document) {\n        super();\n        this.outletElement = outletElement;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n        this._defaultInjector = _defaultInjector;\n        /**\n         * Attaches a DOM portal by transferring its content into the outlet.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            // @breaking-change 10.0.0 Remove check and error once the\n            // `_document` constructor parameter is required.\n            if (!this._document && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('Cannot attach DOM portal without _document constructor parameter');\n            }\n            const element = portal.element;\n            if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('DOM portal content must be attached to a parent node.');\n            }\n            // Anchor used to save the element's previous position so\n            // that we can restore it when the portal is detached.\n            const anchorNode = this._document.createComment('dom-portal');\n            element.parentNode.insertBefore(anchorNode, element);\n            this.outletElement.appendChild(element);\n            this._attachedPortal = portal;\n            super.setDisposeFn(() => {\n                // We can't use `replaceWith` here because IE doesn't support it.\n                if (anchorNode.parentNode) {\n                    anchorNode.parentNode.replaceChild(element, anchorNode);\n                }\n            });\n        };\n        this._document = _document;\n    }\n    /**\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n     * @param portal Portal to be attached\n     * @returns Reference to the created component.\n     */\n    attachComponentPortal(portal) {\n        const resolver = (portal.componentFactoryResolver || this._componentFactoryResolver);\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) && !resolver) {\n            throw Error('Cannot attach component portal to outlet without a ComponentFactoryResolver.');\n        }\n        const componentFactory = resolver.resolveComponentFactory(portal.component);\n        let componentRef;\n        // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n        // for the component (in terms of Angular's component tree, not rendering).\n        // When the ViewContainerRef is missing, we use the factory to create the component directly\n        // and then manually attach the view to the application.\n        if (portal.viewContainerRef) {\n            componentRef = portal.viewContainerRef.createComponent(componentFactory, portal.viewContainerRef.length, portal.injector || portal.viewContainerRef.injector, portal.projectableNodes || undefined);\n            this.setDisposeFn(() => componentRef.destroy());\n        }\n        else {\n            if ((typeof ngDevMode === 'undefined' || ngDevMode) && !this._appRef) {\n                throw Error('Cannot attach component portal to outlet without an ApplicationRef.');\n            }\n            componentRef = componentFactory.create(portal.injector || this._defaultInjector || Injector.NULL);\n            this._appRef.attachView(componentRef.hostView);\n            this.setDisposeFn(() => {\n                // Verify that the ApplicationRef has registered views before trying to detach a host view.\n                // This check also protects the `detachView` from being called on a destroyed ApplicationRef.\n                if (this._appRef.viewCount > 0) {\n                    this._appRef.detachView(componentRef.hostView);\n                }\n                componentRef.destroy();\n            });\n        }\n        // At this point the component has been instantiated, so we move it to the location in the DOM\n        // where we want it to be rendered.\n        this.outletElement.appendChild(this._getComponentRootNode(componentRef));\n        this._attachedPortal = portal;\n        return componentRef;\n    }\n    /**\n     * Attaches a template portal to the DOM as an embedded view.\n     * @param portal Portal to be attached.\n     * @returns Reference to the created embedded view.\n     */\n    attachTemplatePortal(portal) {\n        let viewContainer = portal.viewContainerRef;\n        let viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context, {\n            injector: portal.injector,\n        });\n        // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n        // But for the DomPortalOutlet the view can be added everywhere in the DOM\n        // (e.g Overlay Container) To move the view to the specified host element. We just\n        // re-append the existing root nodes.\n        viewRef.rootNodes.forEach(rootNode => this.outletElement.appendChild(rootNode));\n        // Note that we want to detect changes after the nodes have been moved so that\n        // any directives inside the portal that are looking at the DOM inside a lifecycle\n        // hook won't be invoked too early.\n        viewRef.detectChanges();\n        this.setDisposeFn(() => {\n            let index = viewContainer.indexOf(viewRef);\n            if (index !== -1) {\n                viewContainer.remove(index);\n            }\n        });\n        this._attachedPortal = portal;\n        // TODO(jelbourn): Return locals from view.\n        return viewRef;\n    }\n    /**\n     * Clears out a portal from the DOM.\n     */\n    dispose() {\n        super.dispose();\n        this.outletElement.remove();\n    }\n    /** Gets the root HTMLElement for an instantiated component. */\n    _getComponentRootNode(componentRef) {\n        return componentRef.hostView.rootNodes[0];\n    }\n}\n/**\n * @deprecated Use `DomPortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nclass DomPortalHost extends DomPortalOutlet {\n}\n\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n */\nclass CdkPortal extends TemplatePortal {\n    constructor(templateRef, viewContainerRef) {\n        super(templateRef, viewContainerRef);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkPortal, deps: [{ token: i0.TemplateRef }, { token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: CdkPortal, selector: \"[cdkPortal]\", exportAs: [\"cdkPortal\"], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkPortal, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkPortal]',\n                    exportAs: 'cdkPortal',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }, { type: i0.ViewContainerRef }]; } });\n/**\n * @deprecated Use `CdkPortal` instead.\n * @breaking-change 9.0.0\n */\nclass TemplatePortalDirective extends CdkPortal {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: TemplatePortalDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: TemplatePortalDirective, selector: \"[cdk-portal], [portal]\", providers: [\n            {\n                provide: CdkPortal,\n                useExisting: TemplatePortalDirective,\n            },\n        ], exportAs: [\"cdkPortal\"], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: TemplatePortalDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-portal], [portal]',\n                    exportAs: 'cdkPortal',\n                    providers: [\n                        {\n                            provide: CdkPortal,\n                            useExisting: TemplatePortalDirective,\n                        },\n                    ],\n                }]\n        }] });\n/**\n * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\n * directly attached to it, enabling declarative use.\n *\n * Usage:\n * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\n */\nclass CdkPortalOutlet extends BasePortalOutlet {\n    constructor(_componentFactoryResolver, _viewContainerRef, \n    /**\n     * @deprecated `_document` parameter to be made required.\n     * @breaking-change 9.0.0\n     */\n    _document) {\n        super();\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._viewContainerRef = _viewContainerRef;\n        /** Whether the portal component is initialized. */\n        this._isInitialized = false;\n        /** Emits when a portal is attached to the outlet. */\n        this.attached = new EventEmitter();\n        /**\n         * Attaches the given DomPortal to this PortalHost by moving all of the portal content into it.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            // @breaking-change 9.0.0 Remove check and error once the\n            // `_document` constructor parameter is required.\n            if (!this._document && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('Cannot attach DOM portal without _document constructor parameter');\n            }\n            const element = portal.element;\n            if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('DOM portal content must be attached to a parent node.');\n            }\n            // Anchor used to save the element's previous position so\n            // that we can restore it when the portal is detached.\n            const anchorNode = this._document.createComment('dom-portal');\n            portal.setAttachedHost(this);\n            element.parentNode.insertBefore(anchorNode, element);\n            this._getRootNode().appendChild(element);\n            this._attachedPortal = portal;\n            super.setDisposeFn(() => {\n                if (anchorNode.parentNode) {\n                    anchorNode.parentNode.replaceChild(element, anchorNode);\n                }\n            });\n        };\n        this._document = _document;\n    }\n    /** Portal associated with the Portal outlet. */\n    get portal() {\n        return this._attachedPortal;\n    }\n    set portal(portal) {\n        // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have\n        // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`\n        // and attach a portal programmatically in the parent component. When Angular does the first CD\n        // round, it will fire the setter with empty string, causing the user's content to be cleared.\n        if (this.hasAttached() && !portal && !this._isInitialized) {\n            return;\n        }\n        if (this.hasAttached()) {\n            super.detach();\n        }\n        if (portal) {\n            super.attach(portal);\n        }\n        this._attachedPortal = portal || null;\n    }\n    /** Component or view reference that is attached to the portal. */\n    get attachedRef() {\n        return this._attachedRef;\n    }\n    ngOnInit() {\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        super.dispose();\n        this._attachedRef = this._attachedPortal = null;\n    }\n    /**\n     * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n     *\n     * @param portal Portal to be attached to the portal outlet.\n     * @returns Reference to the created component.\n     */\n    attachComponentPortal(portal) {\n        portal.setAttachedHost(this);\n        // If the portal specifies an origin, use that as the logical location of the component\n        // in the application tree. Otherwise use the location of this PortalOutlet.\n        const viewContainerRef = portal.viewContainerRef != null ? portal.viewContainerRef : this._viewContainerRef;\n        const resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n        const componentFactory = resolver.resolveComponentFactory(portal.component);\n        const ref = viewContainerRef.createComponent(componentFactory, viewContainerRef.length, portal.injector || viewContainerRef.injector, portal.projectableNodes || undefined);\n        // If we're using a view container that's different from the injected one (e.g. when the portal\n        // specifies its own) we need to move the component into the outlet, otherwise it'll be rendered\n        // inside of the alternate view container.\n        if (viewContainerRef !== this._viewContainerRef) {\n            this._getRootNode().appendChild(ref.hostView.rootNodes[0]);\n        }\n        super.setDisposeFn(() => ref.destroy());\n        this._attachedPortal = portal;\n        this._attachedRef = ref;\n        this.attached.emit(ref);\n        return ref;\n    }\n    /**\n     * Attach the given TemplatePortal to this PortalHost as an embedded View.\n     * @param portal Portal to be attached.\n     * @returns Reference to the created embedded view.\n     */\n    attachTemplatePortal(portal) {\n        portal.setAttachedHost(this);\n        const viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context, {\n            injector: portal.injector,\n        });\n        super.setDisposeFn(() => this._viewContainerRef.clear());\n        this._attachedPortal = portal;\n        this._attachedRef = viewRef;\n        this.attached.emit(viewRef);\n        return viewRef;\n    }\n    /** Gets the root node of the portal outlet. */\n    _getRootNode() {\n        const nativeElement = this._viewContainerRef.element.nativeElement;\n        // The directive could be set on a template which will result in a comment\n        // node being the root. Use the comment's parent node if that is the case.\n        return (nativeElement.nodeType === nativeElement.ELEMENT_NODE\n            ? nativeElement\n            : nativeElement.parentNode);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkPortalOutlet, deps: [{ token: i0.ComponentFactoryResolver }, { token: i0.ViewContainerRef }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: { portal: [\"cdkPortalOutlet\", \"portal\"] }, outputs: { attached: \"attached\" }, exportAs: [\"cdkPortalOutlet\"], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkPortalOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkPortalOutlet]',\n                    exportAs: 'cdkPortalOutlet',\n                    inputs: ['portal: cdkPortalOutlet'],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; }, propDecorators: { attached: [{\n                type: Output\n            }] } });\n/**\n * @deprecated Use `CdkPortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nclass PortalHostDirective extends CdkPortalOutlet {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: PortalHostDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: PortalHostDirective, selector: \"[cdkPortalHost], [portalHost]\", inputs: { portal: [\"cdkPortalHost\", \"portal\"] }, providers: [\n            {\n                provide: CdkPortalOutlet,\n                useExisting: PortalHostDirective,\n            },\n        ], exportAs: [\"cdkPortalHost\"], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: PortalHostDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkPortalHost], [portalHost]',\n                    exportAs: 'cdkPortalHost',\n                    inputs: ['portal: cdkPortalHost'],\n                    providers: [\n                        {\n                            provide: CdkPortalOutlet,\n                            useExisting: PortalHostDirective,\n                        },\n                    ],\n                }]\n        }] });\nclass PortalModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: PortalModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.0\", ngImport: i0, type: PortalModule, declarations: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective], exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: PortalModule }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: PortalModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n                    declarations: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n                }]\n        }] });\n\n/**\n * Custom injector to be used when providing custom\n * injection tokens to components inside a portal.\n * @docs-private\n * @deprecated Use `Injector.create` instead.\n * @breaking-change 11.0.0\n */\nclass PortalInjector {\n    constructor(_parentInjector, _customTokens) {\n        this._parentInjector = _parentInjector;\n        this._customTokens = _customTokens;\n    }\n    get(token, notFoundValue) {\n        const value = this._customTokens.get(token);\n        if (typeof value !== 'undefined') {\n            return value;\n        }\n        return this._parentInjector.get(token, notFoundValue);\n    }\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BasePortalHost, BasePortalOutlet, CdkPortal, CdkPortalOutlet, ComponentPortal, DomPortal, DomPortalHost, DomPortalOutlet, Portal, PortalHostDirective, PortalInjector, PortalModule, TemplatePortal, TemplatePortalDirective };\n","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}","import getPrototypeOf from \"./getPrototypeOf.js\";\nimport isNativeReflectConstruct from \"./isNativeReflectConstruct.js\";\nimport possibleConstructorReturn from \"./possibleConstructorReturn.js\";\nexport default function _createSuper(Derived) {\n  var hasNativeReflectConstruct = isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return possibleConstructorReturn(this, result);\n  };\n}","import _typeof from \"./typeof.js\";\nimport assertThisInitialized from \"./assertThisInitialized.js\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return assertThisInitialized(self);\n}","import superPropBase from \"./superPropBase.js\";\nexport default function _get() {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get.bind();\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n      if (desc.get) {\n        return desc.get.call(arguments.length < 3 ? target : receiver);\n      }\n      return desc.value;\n    };\n  }\n  return _get.apply(this, arguments);\n}","import getPrototypeOf from \"./getPrototypeOf.js\";\nexport default function _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = getPrototypeOf(object);\n    if (object === null) break;\n  }\n  return object;\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","export default function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}"],"x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9]}