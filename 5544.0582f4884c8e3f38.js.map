{"version":3,"file":"5544.0582f4884c8e3f38.js","mappings":"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","names":["ObjectUnsubscribedError","createErrorClass","_super","this","name","message","Subject","_Observable","_inherits","_createSuper","_this","_classCallCheck","call","closed","currentObservers","observers","isStopped","hasError","thrownError","_createClass","key","value","operator","subject","AnonymousSubject","_this2","errorContext","_throwIfClosed","Array","from","_step","_iterator","_createForOfIteratorHelper","s","n","done","next","err","e","f","_this3","length","shift","error","_this4","complete","get","_a","subscriber","_get","_getPrototypeOf","prototype","_checkFinalizedStatuses","_innerSubscribe","_this5","EMPTY_SUBSCRIPTION","push","Subscription","arrRemove","observable","Observable","source","create","destination","_Subject","_super2","_this6","_b","subscribe","EMPTY","subscribeOn","scheduler","delay","arguments","undefined","operate","add","schedule","scheduleAsyncIterable","input","Error","executeSchedule","iterator","Symbol","asyncIterator","then","result","scheduled","isInteropObservable","scheduleObservable","innerFrom","pipe","observeOn","isArrayLike","scheduleArray","i","isPromise","schedulePromise","isAsyncIterable","isIterable","scheduleIterable","Symbol_iterator","_iterator$next","isFunction","return","isReadableStreamLike","scheduleReadableStreamLike","readableStreamLikeToAsyncGenerator","createInvalidObservableTypeError","merge","_len","args","_key","popScheduler","concurrent","popNumber","Infinity","sources","mergeAll","createOperatorSubscriber","onNext","onComplete","onError","onFinalize","OperatorSubscriber","_Subscriber","shouldUnsubscribe","_thisSuper","_thisSuper2","_thisSuper3","_next","_assertThisInitialized","_error","unsubscribe","_complete","Subscriber","filter","predicate","thisArg","index","map","project","mergeMap","identity","resultSelector","a","b","ii","mergeInternals","onBeforeNext","expand","innerSubScheduler","additionalFinalizer","buffer","active","isComplete","checkComplete","outerNext","doInnerSub","innerComplete","innerValue","_loop","bufferedValue","take","count","seen","takeUntil","notifier","noop","last","arr","popResultSelector","pop","isScheduler","defaultValue","parentSubscription","work","repeat","scheduleSubscription","hasLift","lift","init","liftedSource","TypeError","scrollBehaviorSupported","supportsScrollBehavior","BlockScrollStrategy","_viewportRuler","document","_previousHTMLStyles","top","left","_isEnabled","_document","_canBeEnabled","root","documentElement","_previousScrollPosition","getViewportScrollPosition","style","coerceCssPixelValue","classList","html","htmlStyle","bodyStyle","body","previousHtmlScrollBehavior","scrollBehavior","previousBodyScrollBehavior","remove","window","scroll","contains","viewport","getViewportSize","scrollHeight","height","scrollWidth","width","CloseScrollStrategy","_scrollDispatcher","_ngZone","_config","_scrollSubscription","_detach","disable","_overlayRef","hasAttached","run","detach","overlayRef","stream","scrolled","scrollable","overlayElement","getElementRef","nativeElement","threshold","_initialScrollPosition","scrollPosition","Math","abs","updatePosition","NoopScrollStrategy","isElementScrolledOutsideView","element","scrollContainers","some","containerBounds","bottom","right","isElementClippedByScrolling","scrollContainerRect","RepositionScrollStrategy","scrollThrottle","autoClose","overlayRect","getBoundingClientRect","_this3$_viewportRuler","ScrollStrategyOptions","close","config","block","reposition","ɵfac","t","i0","i1","DOCUMENT","ɵprov","token","factory","providedIn","OverlayConfig","scrollStrategy","panelClass","hasBackdrop","backdropClass","disposeOnNavigation","_i","_configKeys","Object","keys","ConnectionPositionPair","origin","overlay","offsetX","offsetY","originX","originY","overlayX","overlayY","ScrollingVisibility","ConnectedOverlayPositionChange","connectionPair","scrollableViewProperties","validateVerticalPosition","property","concat","validateHorizontalPosition","BaseOverlayDispatcher","_attachedOverlays","indexOf","splice","OverlayKeyboardDispatcher","_BaseOverlayDispatche","_keydownListener","event","overlays","_keydownEvents","keydownEvents","_isAttached","runOutsideAngular","addEventListener","removeEventListener","OverlayOutsideClickDispatcher","_BaseOverlayDispatche2","_platform","_this7","_cursorStyleIsSet","_pointerDownListener","_pointerDownEventTarget","_getEventTarget","_clickListener","target","type","slice","_loop2","_outsidePointerEvents","outsidePointerEvents","_ret2","_this8","_addEventListeners","IOS","_cursorOriginalValue","cursor","i1$1","OverlayContainer","_this$_containerEleme","_containerElement","_createContainer","containerClass","isBrowser","_isTestEnvironment","oppositePlatformContainers","querySelectorAll","container","createElement","setAttribute","appendChild","OverlayRef","_portalOutlet","_host","_pane","_keyboardDispatcher","_location","_outsideClickDispatcher","_this9","_animationsDisabled","_backdropElement","_backdropClick","_attachments","_detachments","_locationChanges","_backdropClickHandler","_backdropTransitionendHandler","_disposeBackdrop","_scrollStrategy","attach","_positionStrategy","positionStrategy","portal","_this10","parentElement","_previousHostParent","attachResult","_updateStackingOrder","_updateElementSize","_updateElementDirection","enable","onStable","_togglePointerEvents","_attachBackdrop","_toggleClasses","dispose","onDestroy","Promise","resolve","detachBackdrop","detachmentResult","_detachContentWhenStable","_this$_host","isAttached","_disposeScrollStrategy","apply","strategy","sizeConfig","_objectSpread","dir","direction","classes","getDirection","minWidth","minHeight","maxWidth","maxHeight","enablePointer","pointerEvents","_this11","showingClass","insertBefore","requestAnimationFrame","nextSibling","parentNode","_this12","backdropToDetach","_backdropTimeout","setTimeout","cssClasses","isAdd","_element$classList","_element$classList2","coerceArray","c","_toConsumableArray","_this13","subscription","children","backdrop","clearTimeout","boundingBoxClass","cssUnitPattern","FlexibleConnectedPositionStrategy","connectedTo","_overlayContainer","_lastBoundingBoxSize","_isPushed","_canPush","_growAfterOpen","_hasFlexibleDimensions","_positionLocked","_viewportMargin","_scrollables","_preferredPositions","_positionChanges","_resizeSubscription","_offsetX","_offsetY","_appliedPanelClasses","positionChanges","setOrigin","_this14","_validatePositions","hostElement","_boundingBox","_isDisposed","_isInitialRender","_lastPosition","change","reapplyLastPosition","_clearPanelClasses","_resetOverlayElementStyles","_resetBoundingBoxStyles","_viewportRect","_getNarrowedViewportRect","_originRect","_getOriginRect","_overlayRect","_containerRect","getContainerElement","fallback","originRect","viewportRect","containerRect","flexibleFits","pos","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","position","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","_step2","bestFit","bestScore","_iterator2","fit","score","weight","_previousPushAmount","extendStyles","alignItems","justifyContent","lastPosition","scrollables","positions","margin","_origin","offset","selector","_transformOriginSelector","x","y","startX","_isRtl","endX","overlayStartX","point","rawOverlayRect","getRoundedBoundingClientRect","_getOffset","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","availableHeight","availableWidth","getPixelValue","getConfig","horizontalFit","start","pushX","pushY","overflowRight","max","overflowBottom","overflowTop","overflowLeft","_setTransformOrigin","_setOverlayElementStyles","_setBoundingBoxStyles","_addPanelClasses","_getScrollVisibility","changeEvent","xOrigin","elements","yOrigin","transformOrigin","isRtl","smallestDistanceToViewportEdge","min","previousHeight","previousWidth","styles","_hasExactPosition","transform","hasExactPosition","hasFlexibleDimensions","_getExactOverlayY","_getExactOverlayX","transformString","trim","_pushOverlayOnScreen","clientHeight","clientWidth","originBounds","overlayBounds","scrollContainerBounds","isOriginClipped","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","overflows","reduce","currentValue","currentOverflow","axis","_this15","forEach","cssClass","_this16","ElementRef","Element","hasOwnProperty","_input$split","split","_input$split2","_slicedToArray","units","parseFloat","clientRect","floor","STANDARD_DROPDOWN_BELOW_POSITIONS","STANDARD_DROPDOWN_ADJACENT_POSITIONS","wrapperClass","GlobalPositionStrategy","_cssPosition","_topOffset","_bottomOffset","_alignItems","_xPosition","_xOffset","_width","_height","updateSize","parentStyles","shouldBeFlushHorizontally","shouldBeFlushVertically","xPosition","xOffset","marginLeft","marginRight","marginTop","marginBottom","parent","OverlayPositionBuilder","nextUniqueId","Overlay","scrollStrategies","_componentFactoryResolver","_positionBuilder","_injector","_directionality","_animationsModuleType","host","_createHostElement","pane","_createPaneElement","portalOutlet","_createPortalOutlet","overlayConfig","id","_appRef","ApplicationRef","DomPortalOutlet","i5","i6","ANIMATION_MODULE_TYPE","defaultPositionList","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY","InjectionToken","CdkOverlayOrigin","elementRef","ɵdir","selectors","exportAs","standalone","CdkConnectedOverlay","_overlay","templateRef","viewContainerRef","scrollStrategyFactory","_dir","_hasBackdrop","_lockPosition","_flexibleDimensions","_push","_backdropSubscription","_attachSubscription","_detachSubscription","_positionSubscription","viewportMargin","open","disableClose","backdropClick","EventEmitter","positionChange","overlayKeydown","overlayOutsideClick","_templatePortal","TemplatePortal","_scrollStrategyFactory","set","_position","_updatePositionStrategy","coerceBooleanProperty","changes","_attachOverlay","_detachOverlay","_this17","_buildConfig","attachments","emit","detachments","keyCode","ESCAPE","hasModifierKey","preventDefault","_createPositionStrategy","_this18","currentPosition","_getFlexibleConnectedPositionStrategyOrigin","withPositions","withFlexibleDimensions","flexibleDimensions","withPush","withGrowAfterOpen","growAfterOpen","withViewportMargin","withLockedPosition","lockPosition","withTransformOriginOn","transformOriginSelector","flexibleConnectedTo","_this19","_createOverlay","takeWhile","inclusive","inputs","outputs","features","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY","OverlayModule","ɵmod","ɵinj","providers","imports","BidiModule","PortalModule","ScrollingModule","FullscreenOverlayContainer","_OverlayContainer","_super3","platform","_fullScreenEventName","_fullScreenListener","_this20","_adjustParentForFullscreenChange","_addFullscreenChangeListener","getFullscreenElement","fn","eventName","_getEventName","fullscreenEnabled","webkitFullscreenEnabled","mozFullScreenEnabled","msFullscreenEnabled","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","_arrayLikeToArray","len","arr2","_arrayWithHoles","isArray","o","allowArrayLike","it","_unsupportedIterableToArray_js__WEBPACK_IMPORTED_MODULE_0__","Z","F","_e","normalCompletion","didErr","step","_e2","_defineProperty","obj","_toPropertyKey_js__WEBPACK_IMPORTED_MODULE_0__","defineProperty","enumerable","configurable","writable","Reflect","bind","receiver","base","_superPropBase","object","getPrototypeOf","desc","getOwnPropertyDescriptor","_iterableToArray","iter","_nonIterableRest","ownKeys","enumerableOnly","getOwnPropertySymbols","symbols","sym","_objectSpread2","_defineProperty_js__WEBPACK_IMPORTED_MODULE_0__","getOwnPropertyDescriptors","defineProperties","arrayWithHoles","_iterableToArrayLimit","_s","_x","_r","_arr","_n","_d","unsupportedIterableToArray","nonIterableRest","_arrayWithoutHoles","arrayLikeToArray","iterableToArray","_nonIterableSpread","_unsupportedIterableToArray","minLen","_arrayLikeToArray_js__WEBPACK_IMPORTED_MODULE_0__","toString","constructor","test"],"sourceRoot":"webpack:///","sources":["./node_modules/rxjs/dist/esm/internal/util/ObjectUnsubscribedError.js","./node_modules/rxjs/dist/esm/internal/Subject.js","./node_modules/rxjs/dist/esm/internal/observable/empty.js","./node_modules/rxjs/dist/esm/internal/operators/subscribeOn.js","./node_modules/rxjs/dist/esm/internal/scheduled/scheduleAsyncIterable.js","./node_modules/rxjs/dist/esm/internal/observable/from.js","./node_modules/rxjs/dist/esm/internal/scheduled/scheduled.js","./node_modules/rxjs/dist/esm/internal/scheduled/scheduleObservable.js","./node_modules/rxjs/dist/esm/internal/scheduled/scheduleArray.js","./node_modules/rxjs/dist/esm/internal/scheduled/schedulePromise.js","./node_modules/rxjs/dist/esm/internal/scheduled/scheduleIterable.js","./node_modules/rxjs/dist/esm/internal/scheduled/scheduleReadableStreamLike.js","./node_modules/rxjs/dist/esm/internal/observable/merge.js","./node_modules/rxjs/dist/esm/internal/operators/OperatorSubscriber.js","./node_modules/rxjs/dist/esm/internal/operators/filter.js","./node_modules/rxjs/dist/esm/internal/operators/map.js","./node_modules/rxjs/dist/esm/internal/operators/mergeAll.js","./node_modules/rxjs/dist/esm/internal/operators/mergeMap.js","./node_modules/rxjs/dist/esm/internal/operators/mergeInternals.js","./node_modules/rxjs/dist/esm/internal/operators/observeOn.js","./node_modules/rxjs/dist/esm/internal/operators/take.js","./node_modules/rxjs/dist/esm/internal/operators/takeUntil.js","./node_modules/rxjs/dist/esm/internal/util/args.js","./node_modules/rxjs/dist/esm/internal/util/executeSchedule.js","./node_modules/rxjs/dist/esm/internal/util/isScheduler.js","./node_modules/rxjs/dist/esm/internal/util/lift.js","./node_modules/@angular/cdk/fesm2022/overlay.mjs","./node_modules/rxjs/dist/esm/internal/operators/takeWhile.js","./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","./node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","./node_modules/@babel/runtime/helpers/esm/defineProperty.js","./node_modules/@babel/runtime/helpers/esm/get.js","./node_modules/@babel/runtime/helpers/esm/superPropBase.js","./node_modules/@babel/runtime/helpers/esm/iterableToArray.js","./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","./node_modules/@babel/runtime/helpers/esm/objectSpread2.js","./node_modules/@babel/runtime/helpers/esm/slicedToArray.js","./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js"],"sourcesContent":["import { createErrorClass } from './createErrorClass';\nexport const ObjectUnsubscribedError = createErrorClass((_super) => function ObjectUnsubscribedErrorImpl() {\n    _super(this);\n    this.name = 'ObjectUnsubscribedError';\n    this.message = 'object unsubscribed';\n});\n","import { Observable } from './Observable';\nimport { Subscription, EMPTY_SUBSCRIPTION } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { arrRemove } from './util/arrRemove';\nimport { errorContext } from './util/errorContext';\nexport class Subject extends Observable {\n    constructor() {\n        super();\n        this.closed = false;\n        this.currentObservers = null;\n        this.observers = [];\n        this.isStopped = false;\n        this.hasError = false;\n        this.thrownError = null;\n    }\n    lift(operator) {\n        const subject = new AnonymousSubject(this, this);\n        subject.operator = operator;\n        return subject;\n    }\n    _throwIfClosed() {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n    }\n    next(value) {\n        errorContext(() => {\n            this._throwIfClosed();\n            if (!this.isStopped) {\n                if (!this.currentObservers) {\n                    this.currentObservers = Array.from(this.observers);\n                }\n                for (const observer of this.currentObservers) {\n                    observer.next(value);\n                }\n            }\n        });\n    }\n    error(err) {\n        errorContext(() => {\n            this._throwIfClosed();\n            if (!this.isStopped) {\n                this.hasError = this.isStopped = true;\n                this.thrownError = err;\n                const { observers } = this;\n                while (observers.length) {\n                    observers.shift().error(err);\n                }\n            }\n        });\n    }\n    complete() {\n        errorContext(() => {\n            this._throwIfClosed();\n            if (!this.isStopped) {\n                this.isStopped = true;\n                const { observers } = this;\n                while (observers.length) {\n                    observers.shift().complete();\n                }\n            }\n        });\n    }\n    unsubscribe() {\n        this.isStopped = this.closed = true;\n        this.observers = this.currentObservers = null;\n    }\n    get observed() {\n        var _a;\n        return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;\n    }\n    _trySubscribe(subscriber) {\n        this._throwIfClosed();\n        return super._trySubscribe(subscriber);\n    }\n    _subscribe(subscriber) {\n        this._throwIfClosed();\n        this._checkFinalizedStatuses(subscriber);\n        return this._innerSubscribe(subscriber);\n    }\n    _innerSubscribe(subscriber) {\n        const { hasError, isStopped, observers } = this;\n        if (hasError || isStopped) {\n            return EMPTY_SUBSCRIPTION;\n        }\n        this.currentObservers = null;\n        observers.push(subscriber);\n        return new Subscription(() => {\n            this.currentObservers = null;\n            arrRemove(observers, subscriber);\n        });\n    }\n    _checkFinalizedStatuses(subscriber) {\n        const { hasError, thrownError, isStopped } = this;\n        if (hasError) {\n            subscriber.error(thrownError);\n        }\n        else if (isStopped) {\n            subscriber.complete();\n        }\n    }\n    asObservable() {\n        const observable = new Observable();\n        observable.source = this;\n        return observable;\n    }\n}\nSubject.create = (destination, source) => {\n    return new AnonymousSubject(destination, source);\n};\nexport class AnonymousSubject extends Subject {\n    constructor(destination, source) {\n        super();\n        this.destination = destination;\n        this.source = source;\n    }\n    next(value) {\n        var _a, _b;\n        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.call(_a, value);\n    }\n    error(err) {\n        var _a, _b;\n        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.call(_a, err);\n    }\n    complete() {\n        var _a, _b;\n        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);\n    }\n    _subscribe(subscriber) {\n        var _a, _b;\n        return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : EMPTY_SUBSCRIPTION;\n    }\n}\n","import { Observable } from '../Observable';\nexport const EMPTY = new Observable((subscriber) => subscriber.complete());\nexport function empty(scheduler) {\n    return scheduler ? emptyScheduled(scheduler) : EMPTY;\n}\nfunction emptyScheduled(scheduler) {\n    return new Observable((subscriber) => scheduler.schedule(() => subscriber.complete()));\n}\n","import { operate } from '../util/lift';\nexport function subscribeOn(scheduler, delay = 0) {\n    return operate((source, subscriber) => {\n        subscriber.add(scheduler.schedule(() => source.subscribe(subscriber), delay));\n    });\n}\n","import { Observable } from '../Observable';\nimport { executeSchedule } from '../util/executeSchedule';\nexport function scheduleAsyncIterable(input, scheduler) {\n    if (!input) {\n        throw new Error('Iterable cannot be null');\n    }\n    return new Observable((subscriber) => {\n        executeSchedule(subscriber, scheduler, () => {\n            const iterator = input[Symbol.asyncIterator]();\n            executeSchedule(subscriber, scheduler, () => {\n                iterator.next().then((result) => {\n                    if (result.done) {\n                        subscriber.complete();\n                    }\n                    else {\n                        subscriber.next(result.value);\n                    }\n                });\n            }, 0, true);\n        });\n    });\n}\n","import { scheduled } from '../scheduled/scheduled';\nimport { innerFrom } from './innerFrom';\nexport function from(input, scheduler) {\n    return scheduler ? scheduled(input, scheduler) : innerFrom(input);\n}\n","import { scheduleObservable } from './scheduleObservable';\nimport { schedulePromise } from './schedulePromise';\nimport { scheduleArray } from './scheduleArray';\nimport { scheduleIterable } from './scheduleIterable';\nimport { scheduleAsyncIterable } from './scheduleAsyncIterable';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isPromise } from '../util/isPromise';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isIterable } from '../util/isIterable';\nimport { isAsyncIterable } from '../util/isAsyncIterable';\nimport { createInvalidObservableTypeError } from '../util/throwUnobservableError';\nimport { isReadableStreamLike } from '../util/isReadableStreamLike';\nimport { scheduleReadableStreamLike } from './scheduleReadableStreamLike';\nexport function scheduled(input, scheduler) {\n    if (input != null) {\n        if (isInteropObservable(input)) {\n            return scheduleObservable(input, scheduler);\n        }\n        if (isArrayLike(input)) {\n            return scheduleArray(input, scheduler);\n        }\n        if (isPromise(input)) {\n            return schedulePromise(input, scheduler);\n        }\n        if (isAsyncIterable(input)) {\n            return scheduleAsyncIterable(input, scheduler);\n        }\n        if (isIterable(input)) {\n            return scheduleIterable(input, scheduler);\n        }\n        if (isReadableStreamLike(input)) {\n            return scheduleReadableStreamLike(input, scheduler);\n        }\n    }\n    throw createInvalidObservableTypeError(input);\n}\n","import { innerFrom } from '../observable/innerFrom';\nimport { observeOn } from '../operators/observeOn';\nimport { subscribeOn } from '../operators/subscribeOn';\nexport function scheduleObservable(input, scheduler) {\n    return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));\n}\n","import { Observable } from '../Observable';\nexport function scheduleArray(input, scheduler) {\n    return new Observable((subscriber) => {\n        let i = 0;\n        return scheduler.schedule(function () {\n            if (i === input.length) {\n                subscriber.complete();\n            }\n            else {\n                subscriber.next(input[i++]);\n                if (!subscriber.closed) {\n                    this.schedule();\n                }\n            }\n        });\n    });\n}\n","import { innerFrom } from '../observable/innerFrom';\nimport { observeOn } from '../operators/observeOn';\nimport { subscribeOn } from '../operators/subscribeOn';\nexport function schedulePromise(input, scheduler) {\n    return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));\n}\n","import { Observable } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { isFunction } from '../util/isFunction';\nimport { executeSchedule } from '../util/executeSchedule';\nexport function scheduleIterable(input, scheduler) {\n    return new Observable((subscriber) => {\n        let iterator;\n        executeSchedule(subscriber, scheduler, () => {\n            iterator = input[Symbol_iterator]();\n            executeSchedule(subscriber, scheduler, () => {\n                let value;\n                let done;\n                try {\n                    ({ value, done } = iterator.next());\n                }\n                catch (err) {\n                    subscriber.error(err);\n                    return;\n                }\n                if (done) {\n                    subscriber.complete();\n                }\n                else {\n                    subscriber.next(value);\n                }\n            }, 0, true);\n        });\n        return () => isFunction(iterator === null || iterator === void 0 ? void 0 : iterator.return) && iterator.return();\n    });\n}\n","import { scheduleAsyncIterable } from './scheduleAsyncIterable';\nimport { readableStreamLikeToAsyncGenerator } from '../util/isReadableStreamLike';\nexport function scheduleReadableStreamLike(input, scheduler) {\n    return scheduleAsyncIterable(readableStreamLikeToAsyncGenerator(input), scheduler);\n}\n","import { mergeAll } from '../operators/mergeAll';\nimport { innerFrom } from './innerFrom';\nimport { EMPTY } from './empty';\nimport { popNumber, popScheduler } from '../util/args';\nimport { from } from './from';\nexport function merge(...args) {\n    const scheduler = popScheduler(args);\n    const concurrent = popNumber(args, Infinity);\n    const sources = args;\n    return !sources.length\n        ?\n            EMPTY\n        : sources.length === 1\n            ?\n                innerFrom(sources[0])\n            :\n                mergeAll(concurrent)(from(sources, scheduler));\n}\n","import { Subscriber } from '../Subscriber';\nexport function createOperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {\n    return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);\n}\nexport class OperatorSubscriber extends Subscriber {\n    constructor(destination, onNext, onComplete, onError, onFinalize, shouldUnsubscribe) {\n        super(destination);\n        this.onFinalize = onFinalize;\n        this.shouldUnsubscribe = shouldUnsubscribe;\n        this._next = onNext\n            ? function (value) {\n                try {\n                    onNext(value);\n                }\n                catch (err) {\n                    destination.error(err);\n                }\n            }\n            : super._next;\n        this._error = onError\n            ? function (err) {\n                try {\n                    onError(err);\n                }\n                catch (err) {\n                    destination.error(err);\n                }\n                finally {\n                    this.unsubscribe();\n                }\n            }\n            : super._error;\n        this._complete = onComplete\n            ? function () {\n                try {\n                    onComplete();\n                }\n                catch (err) {\n                    destination.error(err);\n                }\n                finally {\n                    this.unsubscribe();\n                }\n            }\n            : super._complete;\n    }\n    unsubscribe() {\n        var _a;\n        if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {\n            const { closed } = this;\n            super.unsubscribe();\n            !closed && ((_a = this.onFinalize) === null || _a === void 0 ? void 0 : _a.call(this));\n        }\n    }\n}\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function filter(predicate, thisArg) {\n    return operate((source, subscriber) => {\n        let index = 0;\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => predicate.call(thisArg, value, index++) && subscriber.next(value)));\n    });\n}\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function map(project, thisArg) {\n    return operate((source, subscriber) => {\n        let index = 0;\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            subscriber.next(project.call(thisArg, value, index++));\n        }));\n    });\n}\n","import { mergeMap } from './mergeMap';\nimport { identity } from '../util/identity';\nexport function mergeAll(concurrent = Infinity) {\n    return mergeMap(identity, concurrent);\n}\n","import { map } from './map';\nimport { innerFrom } from '../observable/innerFrom';\nimport { operate } from '../util/lift';\nimport { mergeInternals } from './mergeInternals';\nimport { isFunction } from '../util/isFunction';\nexport function mergeMap(project, resultSelector, concurrent = Infinity) {\n    if (isFunction(resultSelector)) {\n        return mergeMap((a, i) => map((b, ii) => resultSelector(a, b, i, ii))(innerFrom(project(a, i))), concurrent);\n    }\n    else if (typeof resultSelector === 'number') {\n        concurrent = resultSelector;\n    }\n    return operate((source, subscriber) => mergeInternals(source, subscriber, project, concurrent));\n}\n","import { innerFrom } from '../observable/innerFrom';\nimport { executeSchedule } from '../util/executeSchedule';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function mergeInternals(source, subscriber, project, concurrent, onBeforeNext, expand, innerSubScheduler, additionalFinalizer) {\n    const buffer = [];\n    let active = 0;\n    let index = 0;\n    let isComplete = false;\n    const checkComplete = () => {\n        if (isComplete && !buffer.length && !active) {\n            subscriber.complete();\n        }\n    };\n    const outerNext = (value) => (active < concurrent ? doInnerSub(value) : buffer.push(value));\n    const doInnerSub = (value) => {\n        expand && subscriber.next(value);\n        active++;\n        let innerComplete = false;\n        innerFrom(project(value, index++)).subscribe(createOperatorSubscriber(subscriber, (innerValue) => {\n            onBeforeNext === null || onBeforeNext === void 0 ? void 0 : onBeforeNext(innerValue);\n            if (expand) {\n                outerNext(innerValue);\n            }\n            else {\n                subscriber.next(innerValue);\n            }\n        }, () => {\n            innerComplete = true;\n        }, undefined, () => {\n            if (innerComplete) {\n                try {\n                    active--;\n                    while (buffer.length && active < concurrent) {\n                        const bufferedValue = buffer.shift();\n                        if (innerSubScheduler) {\n                            executeSchedule(subscriber, innerSubScheduler, () => doInnerSub(bufferedValue));\n                        }\n                        else {\n                            doInnerSub(bufferedValue);\n                        }\n                    }\n                    checkComplete();\n                }\n                catch (err) {\n                    subscriber.error(err);\n                }\n            }\n        }));\n    };\n    source.subscribe(createOperatorSubscriber(subscriber, outerNext, () => {\n        isComplete = true;\n        checkComplete();\n    }));\n    return () => {\n        additionalFinalizer === null || additionalFinalizer === void 0 ? void 0 : additionalFinalizer();\n    };\n}\n","import { executeSchedule } from '../util/executeSchedule';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function observeOn(scheduler, delay = 0) {\n    return operate((source, subscriber) => {\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => executeSchedule(subscriber, scheduler, () => subscriber.next(value), delay), () => executeSchedule(subscriber, scheduler, () => subscriber.complete(), delay), (err) => executeSchedule(subscriber, scheduler, () => subscriber.error(err), delay)));\n    });\n}\n","import { EMPTY } from '../observable/empty';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function take(count) {\n    return count <= 0\n        ?\n            () => EMPTY\n        : operate((source, subscriber) => {\n            let seen = 0;\n            source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n                if (++seen <= count) {\n                    subscriber.next(value);\n                    if (count <= seen) {\n                        subscriber.complete();\n                    }\n                }\n            }));\n        });\n}\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\nimport { noop } from '../util/noop';\nexport function takeUntil(notifier) {\n    return operate((source, subscriber) => {\n        innerFrom(notifier).subscribe(createOperatorSubscriber(subscriber, () => subscriber.complete(), noop));\n        !subscriber.closed && source.subscribe(subscriber);\n    });\n}\n","import { isFunction } from './isFunction';\nimport { isScheduler } from './isScheduler';\nfunction last(arr) {\n    return arr[arr.length - 1];\n}\nexport function popResultSelector(args) {\n    return isFunction(last(args)) ? args.pop() : undefined;\n}\nexport function popScheduler(args) {\n    return isScheduler(last(args)) ? args.pop() : undefined;\n}\nexport function popNumber(args, defaultValue) {\n    return typeof last(args) === 'number' ? args.pop() : defaultValue;\n}\n","export function executeSchedule(parentSubscription, scheduler, work, delay = 0, repeat = false) {\n    const scheduleSubscription = scheduler.schedule(function () {\n        work();\n        if (repeat) {\n            parentSubscription.add(this.schedule(null, delay));\n        }\n        else {\n            this.unsubscribe();\n        }\n    }, delay);\n    parentSubscription.add(scheduleSubscription);\n    if (!repeat) {\n        return scheduleSubscription;\n    }\n}\n","import { isFunction } from './isFunction';\nexport function isScheduler(value) {\n    return value && isFunction(value.schedule);\n}\n","import { isFunction } from './isFunction';\nexport function hasLift(source) {\n    return isFunction(source === null || source === void 0 ? void 0 : source.lift);\n}\nexport function operate(init) {\n    return (source) => {\n        if (hasLift(source)) {\n            return source.lift(function (liftedSource) {\n                try {\n                    return init(liftedSource, this);\n                }\n                catch (err) {\n                    this.error(err);\n                }\n            });\n        }\n        throw new TypeError('Unable to lift unknown Observable type');\n    };\n}\n","import * as i1 from '@angular/cdk/scrolling';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nexport { CdkScrollable, ScrollDispatcher, ViewportRuler } from '@angular/cdk/scrolling';\nimport * as i6 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, Optional, ElementRef, ApplicationRef, ANIMATION_MODULE_TYPE, InjectionToken, Directive, EventEmitter, Input, Output, NgModule } from '@angular/core';\nimport { coerceCssPixelValue, coerceArray, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i1$1 from '@angular/cdk/platform';\nimport { supportsScrollBehavior, _getEventTarget, _isTestEnvironment } from '@angular/cdk/platform';\nimport { filter, take, takeUntil, takeWhile } from 'rxjs/operators';\nimport * as i5 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport { DomPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { Subject, Subscription, merge } from 'rxjs';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n\nconst scrollBehaviorSupported = supportsScrollBehavior();\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nclass BlockScrollStrategy {\n    constructor(_viewportRuler, document) {\n        this._viewportRuler = _viewportRuler;\n        this._previousHTMLStyles = { top: '', left: '' };\n        this._isEnabled = false;\n        this._document = document;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach() { }\n    /** Blocks page-level scroll while the attached overlay is open. */\n    enable() {\n        if (this._canBeEnabled()) {\n            const root = this._document.documentElement;\n            this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            // Cache the previous inline styles in case the user had set them.\n            this._previousHTMLStyles.left = root.style.left || '';\n            this._previousHTMLStyles.top = root.style.top || '';\n            // Note: we're using the `html` node, instead of the `body`, because the `body` may\n            // have the user agent margin, whereas the `html` is guaranteed not to have one.\n            root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n            root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n            root.classList.add('cdk-global-scrollblock');\n            this._isEnabled = true;\n        }\n    }\n    /** Unblocks page-level scroll while the attached overlay is open. */\n    disable() {\n        if (this._isEnabled) {\n            const html = this._document.documentElement;\n            const body = this._document.body;\n            const htmlStyle = html.style;\n            const bodyStyle = body.style;\n            const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n            const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n            this._isEnabled = false;\n            htmlStyle.left = this._previousHTMLStyles.left;\n            htmlStyle.top = this._previousHTMLStyles.top;\n            html.classList.remove('cdk-global-scrollblock');\n            // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n            // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n            // Note that we don't mutate the property if the browser doesn't support `scroll-behavior`,\n            // because it can throw off feature detections in `supportsScrollBehavior` which\n            // checks for `'scrollBehavior' in documentElement.style`.\n            if (scrollBehaviorSupported) {\n                htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n            }\n            window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n            if (scrollBehaviorSupported) {\n                htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n                bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n            }\n        }\n    }\n    _canBeEnabled() {\n        // Since the scroll strategies can't be singletons, we have to use a global CSS class\n        // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n        // scrolling multiple times.\n        const html = this._document.documentElement;\n        if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n            return false;\n        }\n        const body = this._document.body;\n        const viewport = this._viewportRuler.getViewportSize();\n        return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n    }\n}\n\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n */\nfunction getMatScrollStrategyAlreadyAttachedError() {\n    return Error(`Scroll strategy has already been attached.`);\n}\n\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nclass CloseScrollStrategy {\n    constructor(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._config = _config;\n        this._scrollSubscription = null;\n        /** Detaches the overlay ref and disables the scroll strategy. */\n        this._detach = () => {\n            this.disable();\n            if (this._overlayRef.hasAttached()) {\n                this._ngZone.run(() => this._overlayRef.detach());\n            }\n        };\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables the closing of the attached overlay on scroll. */\n    enable() {\n        if (this._scrollSubscription) {\n            return;\n        }\n        const stream = this._scrollDispatcher.scrolled(0).pipe(filter(scrollable => {\n            return (!scrollable ||\n                !this._overlayRef.overlayElement.contains(scrollable.getElementRef().nativeElement));\n        }));\n        if (this._config && this._config.threshold && this._config.threshold > 1) {\n            this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n            this._scrollSubscription = stream.subscribe(() => {\n                const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n                if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config.threshold) {\n                    this._detach();\n                }\n                else {\n                    this._overlayRef.updatePosition();\n                }\n            });\n        }\n        else {\n            this._scrollSubscription = stream.subscribe(this._detach);\n        }\n    }\n    /** Disables the closing the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/** Scroll strategy that doesn't do anything. */\nclass NoopScrollStrategy {\n    /** Does nothing, as this scroll strategy is a no-op. */\n    enable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    disable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    attach() { }\n}\n\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\nfunction isElementScrolledOutsideView(element, scrollContainers) {\n    return scrollContainers.some(containerBounds => {\n        const outsideAbove = element.bottom < containerBounds.top;\n        const outsideBelow = element.top > containerBounds.bottom;\n        const outsideLeft = element.right < containerBounds.left;\n        const outsideRight = element.left > containerBounds.right;\n        return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n    });\n}\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\nfunction isElementClippedByScrolling(element, scrollContainers) {\n    return scrollContainers.some(scrollContainerRect => {\n        const clippedAbove = element.top < scrollContainerRect.top;\n        const clippedBelow = element.bottom > scrollContainerRect.bottom;\n        const clippedLeft = element.left < scrollContainerRect.left;\n        const clippedRight = element.right > scrollContainerRect.right;\n        return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n    });\n}\n\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nclass RepositionScrollStrategy {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        this._config = _config;\n        this._scrollSubscription = null;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables repositioning of the attached overlay on scroll. */\n    enable() {\n        if (!this._scrollSubscription) {\n            const throttle = this._config ? this._config.scrollThrottle : 0;\n            this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n                this._overlayRef.updatePosition();\n                // TODO(crisbeto): make `close` on by default once all components can handle it.\n                if (this._config && this._config.autoClose) {\n                    const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n                    const { width, height } = this._viewportRuler.getViewportSize();\n                    // TODO(crisbeto): include all ancestor scroll containers here once\n                    // we have a way of exposing the trigger element to the scroll strategy.\n                    const parentRects = [{ width, height, bottom: height, right: width, top: 0, left: 0 }];\n                    if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n                        this.disable();\n                        this._ngZone.run(() => this._overlayRef.detach());\n                    }\n                }\n            });\n        }\n    }\n    /** Disables repositioning of the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\nclass ScrollStrategyOptions {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        /** Do nothing on scroll. */\n        this.noop = () => new NoopScrollStrategy();\n        /**\n         * Close the overlay as soon as the user scrolls.\n         * @param config Configuration to be used inside the scroll strategy.\n         */\n        this.close = (config) => new CloseScrollStrategy(this._scrollDispatcher, this._ngZone, this._viewportRuler, config);\n        /** Block scrolling. */\n        this.block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n        /**\n         * Update the overlay's position on scroll.\n         * @param config Configuration to be used inside the scroll strategy.\n         * Allows debouncing the reposition calls.\n         */\n        this.reposition = (config) => new RepositionScrollStrategy(this._scrollDispatcher, this._viewportRuler, this._ngZone, config);\n        this._document = document;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: ScrollStrategyOptions, deps: [{ token: i1.ScrollDispatcher }, { token: i1.ViewportRuler }, { token: i0.NgZone }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: ScrollStrategyOptions, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: ScrollStrategyOptions, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1.ScrollDispatcher }, { type: i1.ViewportRuler }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\n/** Initial configuration used when creating an overlay. */\nclass OverlayConfig {\n    constructor(config) {\n        /** Strategy to be used when handling scroll events while the overlay is open. */\n        this.scrollStrategy = new NoopScrollStrategy();\n        /** Custom class to add to the overlay pane. */\n        this.panelClass = '';\n        /** Whether the overlay has a backdrop. */\n        this.hasBackdrop = false;\n        /** Custom class to add to the backdrop */\n        this.backdropClass = 'cdk-overlay-dark-backdrop';\n        /**\n         * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.disposeOnNavigation = false;\n        if (config) {\n            // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n            // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n            // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n            const configKeys = Object.keys(config);\n            for (const key of configKeys) {\n                if (config[key] !== undefined) {\n                    // TypeScript, as of version 3.5, sees the left-hand-side of this expression\n                    // as \"I don't know *which* key this is, so the only valid value is the intersection\n                    // of all the possible values.\" In this case, that happens to be `undefined`. TypeScript\n                    // is not smart enough to see that the right-hand-side is actually an access of the same\n                    // exact type with the same exact key, meaning that the value type must be identical.\n                    // So we use `any` to work around this.\n                    this[key] = config[key];\n                }\n            }\n        }\n    }\n}\n\n/** The points of the origin element and the overlay element to connect. */\nclass ConnectionPositionPair {\n    constructor(origin, overlay, \n    /** Offset along the X axis. */\n    offsetX, \n    /** Offset along the Y axis. */\n    offsetY, \n    /** Class(es) to be applied to the panel while this position is active. */\n    panelClass) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        this.panelClass = panelClass;\n        this.originX = origin.originX;\n        this.originY = origin.originY;\n        this.overlayX = overlay.overlayX;\n        this.overlayY = overlay.overlayY;\n    }\n}\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\nclass ScrollingVisibility {\n}\n/** The change event emitted by the strategy when a fallback position is used. */\nclass ConnectedOverlayPositionChange {\n    constructor(\n    /** The position used as a result of this change. */\n    connectionPair, \n    /** @docs-private */\n    scrollableViewProperties) {\n        this.connectionPair = connectionPair;\n        this.scrollableViewProperties = scrollableViewProperties;\n    }\n}\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateVerticalPosition(property, value) {\n    if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"top\", \"bottom\" or \"center\".`);\n    }\n}\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateHorizontalPosition(property, value) {\n    if (value !== 'start' && value !== 'end' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"start\", \"end\" or \"center\".`);\n    }\n}\n\n/**\n * Service for dispatching events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass BaseOverlayDispatcher {\n    constructor(document) {\n        /** Currently attached overlays in the order they were attached. */\n        this._attachedOverlays = [];\n        this._document = document;\n    }\n    ngOnDestroy() {\n        this.detach();\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        // Ensure that we don't get the same overlay multiple times.\n        this.remove(overlayRef);\n        this._attachedOverlays.push(overlayRef);\n    }\n    /** Remove an overlay from the list of attached overlay refs. */\n    remove(overlayRef) {\n        const index = this._attachedOverlays.indexOf(overlayRef);\n        if (index > -1) {\n            this._attachedOverlays.splice(index, 1);\n        }\n        // Remove the global listener once there are no more overlays.\n        if (this._attachedOverlays.length === 0) {\n            this.detach();\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: BaseOverlayDispatcher, deps: [{ token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: BaseOverlayDispatcher, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: BaseOverlayDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayKeyboardDispatcher extends BaseOverlayDispatcher {\n    constructor(document, \n    /** @breaking-change 14.0.0 _ngZone will be required. */\n    _ngZone) {\n        super(document);\n        this._ngZone = _ngZone;\n        /** Keyboard event listener that will be attached to the body. */\n        this._keydownListener = (event) => {\n            const overlays = this._attachedOverlays;\n            for (let i = overlays.length - 1; i > -1; i--) {\n                // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n                // We want to target the most recent overlay, rather than trying to match where the event came\n                // from, because some components might open an overlay, but keep focus on a trigger element\n                // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n                // because we don't want overlays that don't handle keyboard events to block the ones below\n                // them that do.\n                if (overlays[i]._keydownEvents.observers.length > 0) {\n                    const keydownEvents = overlays[i]._keydownEvents;\n                    /** @breaking-change 14.0.0 _ngZone will be required. */\n                    if (this._ngZone) {\n                        this._ngZone.run(() => keydownEvents.next(event));\n                    }\n                    else {\n                        keydownEvents.next(event);\n                    }\n                    break;\n                }\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // Lazily start dispatcher once first overlay is added\n        if (!this._isAttached) {\n            /** @breaking-change 14.0.0 _ngZone will be required. */\n            if (this._ngZone) {\n                this._ngZone.runOutsideAngular(() => this._document.body.addEventListener('keydown', this._keydownListener));\n            }\n            else {\n                this._document.body.addEventListener('keydown', this._keydownListener);\n            }\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            this._document.body.removeEventListener('keydown', this._keydownListener);\n            this._isAttached = false;\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: OverlayKeyboardDispatcher, deps: [{ token: DOCUMENT }, { token: i0.NgZone, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: OverlayKeyboardDispatcher, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: OverlayKeyboardDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.NgZone, decorators: [{\n                    type: Optional\n                }] }]; } });\n\n/**\n * Service for dispatching mouse click events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayOutsideClickDispatcher extends BaseOverlayDispatcher {\n    constructor(document, _platform, \n    /** @breaking-change 14.0.0 _ngZone will be required. */\n    _ngZone) {\n        super(document);\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._cursorStyleIsSet = false;\n        /** Store pointerdown event target to track origin of click. */\n        this._pointerDownListener = (event) => {\n            this._pointerDownEventTarget = _getEventTarget(event);\n        };\n        /** Click event listener that will be attached to the body propagate phase. */\n        this._clickListener = (event) => {\n            const target = _getEventTarget(event);\n            // In case of a click event, we want to check the origin of the click\n            // (e.g. in case where a user starts a click inside the overlay and\n            // releases the click outside of it).\n            // This is done by using the event target of the preceding pointerdown event.\n            // Every click event caused by a pointer device has a preceding pointerdown\n            // event, unless the click was programmatically triggered (e.g. in a unit test).\n            const origin = event.type === 'click' && this._pointerDownEventTarget\n                ? this._pointerDownEventTarget\n                : target;\n            // Reset the stored pointerdown event target, to avoid having it interfere\n            // in subsequent events.\n            this._pointerDownEventTarget = null;\n            // We copy the array because the original may be modified asynchronously if the\n            // outsidePointerEvents listener decides to detach overlays resulting in index errors inside\n            // the for loop.\n            const overlays = this._attachedOverlays.slice();\n            // Dispatch the mouse event to the top overlay which has subscribers to its mouse events.\n            // We want to target all overlays for which the click could be considered as outside click.\n            // As soon as we reach an overlay for which the click is not outside click we break off\n            // the loop.\n            for (let i = overlays.length - 1; i > -1; i--) {\n                const overlayRef = overlays[i];\n                if (overlayRef._outsidePointerEvents.observers.length < 1 || !overlayRef.hasAttached()) {\n                    continue;\n                }\n                // If it's a click inside the overlay, just break - we should do nothing\n                // If it's an outside click (both origin and target of the click) dispatch the mouse event,\n                // and proceed with the next overlay\n                if (overlayRef.overlayElement.contains(target) ||\n                    overlayRef.overlayElement.contains(origin)) {\n                    break;\n                }\n                const outsidePointerEvents = overlayRef._outsidePointerEvents;\n                /** @breaking-change 14.0.0 _ngZone will be required. */\n                if (this._ngZone) {\n                    this._ngZone.run(() => outsidePointerEvents.next(event));\n                }\n                else {\n                    outsidePointerEvents.next(event);\n                }\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // Safari on iOS does not generate click events for non-interactive\n        // elements. However, we want to receive a click for any element outside\n        // the overlay. We can force a \"clickable\" state by setting\n        // `cursor: pointer` on the document body. See:\n        // https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event#Safari_Mobile\n        // https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html\n        if (!this._isAttached) {\n            const body = this._document.body;\n            /** @breaking-change 14.0.0 _ngZone will be required. */\n            if (this._ngZone) {\n                this._ngZone.runOutsideAngular(() => this._addEventListeners(body));\n            }\n            else {\n                this._addEventListeners(body);\n            }\n            // click event is not fired on iOS. To make element \"clickable\" we are\n            // setting the cursor to pointer\n            if (this._platform.IOS && !this._cursorStyleIsSet) {\n                this._cursorOriginalValue = body.style.cursor;\n                body.style.cursor = 'pointer';\n                this._cursorStyleIsSet = true;\n            }\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            const body = this._document.body;\n            body.removeEventListener('pointerdown', this._pointerDownListener, true);\n            body.removeEventListener('click', this._clickListener, true);\n            body.removeEventListener('auxclick', this._clickListener, true);\n            body.removeEventListener('contextmenu', this._clickListener, true);\n            if (this._platform.IOS && this._cursorStyleIsSet) {\n                body.style.cursor = this._cursorOriginalValue;\n                this._cursorStyleIsSet = false;\n            }\n            this._isAttached = false;\n        }\n    }\n    _addEventListeners(body) {\n        body.addEventListener('pointerdown', this._pointerDownListener, true);\n        body.addEventListener('click', this._clickListener, true);\n        body.addEventListener('auxclick', this._clickListener, true);\n        body.addEventListener('contextmenu', this._clickListener, true);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: OverlayOutsideClickDispatcher, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }, { token: i0.NgZone, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: OverlayOutsideClickDispatcher, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: OverlayOutsideClickDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i1$1.Platform }, { type: i0.NgZone, decorators: [{\n                    type: Optional\n                }] }]; } });\n\n/** Container inside which all overlays will render. */\nclass OverlayContainer {\n    constructor(document, _platform) {\n        this._platform = _platform;\n        this._document = document;\n    }\n    ngOnDestroy() {\n        this._containerElement?.remove();\n    }\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time it is called to facilitate using\n     * the container in non-browser environments.\n     * @returns the container element\n     */\n    getContainerElement() {\n        if (!this._containerElement) {\n            this._createContainer();\n        }\n        return this._containerElement;\n    }\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     */\n    _createContainer() {\n        const containerClass = 'cdk-overlay-container';\n        // TODO(crisbeto): remove the testing check once we have an overlay testing\n        // module or Angular starts tearing down the testing `NgModule`. See:\n        // https://github.com/angular/angular/issues/18831\n        if (this._platform.isBrowser || _isTestEnvironment()) {\n            const oppositePlatformContainers = this._document.querySelectorAll(`.${containerClass}[platform=\"server\"], ` + `.${containerClass}[platform=\"test\"]`);\n            // Remove any old containers from the opposite platform.\n            // This can happen when transitioning from the server to the client.\n            for (let i = 0; i < oppositePlatformContainers.length; i++) {\n                oppositePlatformContainers[i].remove();\n            }\n        }\n        const container = this._document.createElement('div');\n        container.classList.add(containerClass);\n        // A long time ago we kept adding new overlay containers whenever a new app was instantiated,\n        // but at some point we added logic which clears the duplicate ones in order to avoid leaks.\n        // The new logic was a little too aggressive since it was breaking some legitimate use cases.\n        // To mitigate the problem we made it so that only containers from a different platform are\n        // cleared, but the side-effect was that people started depending on the overly-aggressive\n        // logic to clean up their tests for them. Until we can introduce an overlay-specific testing\n        // module which does the cleanup, we try to detect that we're in a test environment and we\n        // always clear the container. See #17006.\n        // TODO(crisbeto): remove the test environment check once we have an overlay testing module.\n        if (_isTestEnvironment()) {\n            container.setAttribute('platform', 'test');\n        }\n        else if (!this._platform.isBrowser) {\n            container.setAttribute('platform', 'server');\n        }\n        this._document.body.appendChild(container);\n        this._containerElement = container;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: OverlayContainer, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: OverlayContainer, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: OverlayContainer, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i1$1.Platform }]; } });\n\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nclass OverlayRef {\n    constructor(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, _location, _outsideClickDispatcher, _animationsDisabled = false) {\n        this._portalOutlet = _portalOutlet;\n        this._host = _host;\n        this._pane = _pane;\n        this._config = _config;\n        this._ngZone = _ngZone;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._document = _document;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n        this._animationsDisabled = _animationsDisabled;\n        this._backdropElement = null;\n        this._backdropClick = new Subject();\n        this._attachments = new Subject();\n        this._detachments = new Subject();\n        this._locationChanges = Subscription.EMPTY;\n        this._backdropClickHandler = (event) => this._backdropClick.next(event);\n        this._backdropTransitionendHandler = (event) => {\n            this._disposeBackdrop(event.target);\n        };\n        /** Stream of keydown events dispatched to this overlay. */\n        this._keydownEvents = new Subject();\n        /** Stream of mouse outside events dispatched to this overlay. */\n        this._outsidePointerEvents = new Subject();\n        if (_config.scrollStrategy) {\n            this._scrollStrategy = _config.scrollStrategy;\n            this._scrollStrategy.attach(this);\n        }\n        this._positionStrategy = _config.positionStrategy;\n    }\n    /** The overlay's HTML element */\n    get overlayElement() {\n        return this._pane;\n    }\n    /** The overlay's backdrop HTML element. */\n    get backdropElement() {\n        return this._backdropElement;\n    }\n    /**\n     * Wrapper around the panel element. Can be used for advanced\n     * positioning where a wrapper with specific styling is\n     * required around the overlay pane.\n     */\n    get hostElement() {\n        return this._host;\n    }\n    /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param portal Portal instance to which to attach the overlay.\n     * @returns The portal attachment result.\n     */\n    attach(portal) {\n        // Insert the host into the DOM before attaching the portal, otherwise\n        // the animations module will skip animations on repeat attachments.\n        if (!this._host.parentElement && this._previousHostParent) {\n            this._previousHostParent.appendChild(this._host);\n        }\n        const attachResult = this._portalOutlet.attach(portal);\n        if (this._positionStrategy) {\n            this._positionStrategy.attach(this);\n        }\n        this._updateStackingOrder();\n        this._updateElementSize();\n        this._updateElementDirection();\n        if (this._scrollStrategy) {\n            this._scrollStrategy.enable();\n        }\n        // Update the position once the zone is stable so that the overlay will be fully rendered\n        // before attempting to position it, as the position may depend on the size of the rendered\n        // content.\n        this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n            // The overlay could've been detached before the zone has stabilized.\n            if (this.hasAttached()) {\n                this.updatePosition();\n            }\n        });\n        // Enable pointer events for the overlay pane element.\n        this._togglePointerEvents(true);\n        if (this._config.hasBackdrop) {\n            this._attachBackdrop();\n        }\n        if (this._config.panelClass) {\n            this._toggleClasses(this._pane, this._config.panelClass, true);\n        }\n        // Only emit the `attachments` event once all other setup is done.\n        this._attachments.next();\n        // Track this overlay by the keyboard dispatcher\n        this._keyboardDispatcher.add(this);\n        if (this._config.disposeOnNavigation) {\n            this._locationChanges = this._location.subscribe(() => this.dispose());\n        }\n        this._outsideClickDispatcher.add(this);\n        // TODO(crisbeto): the null check is here, because the portal outlet returns `any`.\n        // We should be guaranteed for the result to be `ComponentRef | EmbeddedViewRef`, but\n        // `instanceof EmbeddedViewRef` doesn't appear to work at the moment.\n        if (typeof attachResult?.onDestroy === 'function') {\n            // In most cases we control the portal and we know when it is being detached so that\n            // we can finish the disposal process. The exception is if the user passes in a custom\n            // `ViewContainerRef` that isn't destroyed through the overlay API. Note that we use\n            // `detach` here instead of `dispose`, because we don't know if the user intends to\n            // reattach the overlay at a later point. It also has the advantage of waiting for animations.\n            attachResult.onDestroy(() => {\n                if (this.hasAttached()) {\n                    // We have to delay the `detach` call, because detaching immediately prevents\n                    // other destroy hooks from running. This is likely a framework bug similar to\n                    // https://github.com/angular/angular/issues/46119\n                    this._ngZone.runOutsideAngular(() => Promise.resolve().then(() => this.detach()));\n                }\n            });\n        }\n        return attachResult;\n    }\n    /**\n     * Detaches an overlay from a portal.\n     * @returns The portal detachment result.\n     */\n    detach() {\n        if (!this.hasAttached()) {\n            return;\n        }\n        this.detachBackdrop();\n        // When the overlay is detached, the pane element should disable pointer events.\n        // This is necessary because otherwise the pane element will cover the page and disable\n        // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n        this._togglePointerEvents(false);\n        if (this._positionStrategy && this._positionStrategy.detach) {\n            this._positionStrategy.detach();\n        }\n        if (this._scrollStrategy) {\n            this._scrollStrategy.disable();\n        }\n        const detachmentResult = this._portalOutlet.detach();\n        // Only emit after everything is detached.\n        this._detachments.next();\n        // Remove this overlay from keyboard dispatcher tracking.\n        this._keyboardDispatcher.remove(this);\n        // Keeping the host element in the DOM can cause scroll jank, because it still gets\n        // rendered, even though it's transparent and unclickable which is why we remove it.\n        this._detachContentWhenStable();\n        this._locationChanges.unsubscribe();\n        this._outsideClickDispatcher.remove(this);\n        return detachmentResult;\n    }\n    /** Cleans up the overlay from the DOM. */\n    dispose() {\n        const isAttached = this.hasAttached();\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._disposeScrollStrategy();\n        this._disposeBackdrop(this._backdropElement);\n        this._locationChanges.unsubscribe();\n        this._keyboardDispatcher.remove(this);\n        this._portalOutlet.dispose();\n        this._attachments.complete();\n        this._backdropClick.complete();\n        this._keydownEvents.complete();\n        this._outsidePointerEvents.complete();\n        this._outsideClickDispatcher.remove(this);\n        this._host?.remove();\n        this._previousHostParent = this._pane = this._host = null;\n        if (isAttached) {\n            this._detachments.next();\n        }\n        this._detachments.complete();\n    }\n    /** Whether the overlay has attached content. */\n    hasAttached() {\n        return this._portalOutlet.hasAttached();\n    }\n    /** Gets an observable that emits when the backdrop has been clicked. */\n    backdropClick() {\n        return this._backdropClick;\n    }\n    /** Gets an observable that emits when the overlay has been attached. */\n    attachments() {\n        return this._attachments;\n    }\n    /** Gets an observable that emits when the overlay has been detached. */\n    detachments() {\n        return this._detachments;\n    }\n    /** Gets an observable of keydown events targeted to this overlay. */\n    keydownEvents() {\n        return this._keydownEvents;\n    }\n    /** Gets an observable of pointer events targeted outside this overlay. */\n    outsidePointerEvents() {\n        return this._outsidePointerEvents;\n    }\n    /** Gets the current overlay configuration, which is immutable. */\n    getConfig() {\n        return this._config;\n    }\n    /** Updates the position of the overlay based on the position strategy. */\n    updatePosition() {\n        if (this._positionStrategy) {\n            this._positionStrategy.apply();\n        }\n    }\n    /** Switches to a new position strategy and updates the overlay position. */\n    updatePositionStrategy(strategy) {\n        if (strategy === this._positionStrategy) {\n            return;\n        }\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._positionStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            this.updatePosition();\n        }\n    }\n    /** Update the size properties of the overlay. */\n    updateSize(sizeConfig) {\n        this._config = { ...this._config, ...sizeConfig };\n        this._updateElementSize();\n    }\n    /** Sets the LTR/RTL direction for the overlay. */\n    setDirection(dir) {\n        this._config = { ...this._config, direction: dir };\n        this._updateElementDirection();\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, true);\n        }\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, false);\n        }\n    }\n    /**\n     * Returns the layout direction of the overlay panel.\n     */\n    getDirection() {\n        const direction = this._config.direction;\n        if (!direction) {\n            return 'ltr';\n        }\n        return typeof direction === 'string' ? direction : direction.value;\n    }\n    /** Switches to a new scroll strategy. */\n    updateScrollStrategy(strategy) {\n        if (strategy === this._scrollStrategy) {\n            return;\n        }\n        this._disposeScrollStrategy();\n        this._scrollStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            strategy.enable();\n        }\n    }\n    /** Updates the text direction of the overlay panel. */\n    _updateElementDirection() {\n        this._host.setAttribute('dir', this.getDirection());\n    }\n    /** Updates the size of the overlay element based on the overlay config. */\n    _updateElementSize() {\n        if (!this._pane) {\n            return;\n        }\n        const style = this._pane.style;\n        style.width = coerceCssPixelValue(this._config.width);\n        style.height = coerceCssPixelValue(this._config.height);\n        style.minWidth = coerceCssPixelValue(this._config.minWidth);\n        style.minHeight = coerceCssPixelValue(this._config.minHeight);\n        style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n        style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n    }\n    /** Toggles the pointer events for the overlay pane element. */\n    _togglePointerEvents(enablePointer) {\n        this._pane.style.pointerEvents = enablePointer ? '' : 'none';\n    }\n    /** Attaches a backdrop for this overlay. */\n    _attachBackdrop() {\n        const showingClass = 'cdk-overlay-backdrop-showing';\n        this._backdropElement = this._document.createElement('div');\n        this._backdropElement.classList.add('cdk-overlay-backdrop');\n        if (this._animationsDisabled) {\n            this._backdropElement.classList.add('cdk-overlay-backdrop-noop-animation');\n        }\n        if (this._config.backdropClass) {\n            this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n        }\n        // Insert the backdrop before the pane in the DOM order,\n        // in order to handle stacked overlays properly.\n        this._host.parentElement.insertBefore(this._backdropElement, this._host);\n        // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n        // action desired when such a click occurs (usually closing the overlay).\n        this._backdropElement.addEventListener('click', this._backdropClickHandler);\n        // Add class to fade-in the backdrop after one frame.\n        if (!this._animationsDisabled && typeof requestAnimationFrame !== 'undefined') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    if (this._backdropElement) {\n                        this._backdropElement.classList.add(showingClass);\n                    }\n                });\n            });\n        }\n        else {\n            this._backdropElement.classList.add(showingClass);\n        }\n    }\n    /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     */\n    _updateStackingOrder() {\n        if (this._host.nextSibling) {\n            this._host.parentNode.appendChild(this._host);\n        }\n    }\n    /** Detaches the backdrop (if any) associated with the overlay. */\n    detachBackdrop() {\n        const backdropToDetach = this._backdropElement;\n        if (!backdropToDetach) {\n            return;\n        }\n        if (this._animationsDisabled) {\n            this._disposeBackdrop(backdropToDetach);\n            return;\n        }\n        backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n        this._ngZone.runOutsideAngular(() => {\n            backdropToDetach.addEventListener('transitionend', this._backdropTransitionendHandler);\n        });\n        // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n        // In this case we make it unclickable and we try to remove it after a delay.\n        backdropToDetach.style.pointerEvents = 'none';\n        // Run this outside the Angular zone because there's nothing that Angular cares about.\n        // If it were to run inside the Angular zone, every test that used Overlay would have to be\n        // either async or fakeAsync.\n        this._backdropTimeout = this._ngZone.runOutsideAngular(() => setTimeout(() => {\n            this._disposeBackdrop(backdropToDetach);\n        }, 500));\n    }\n    /** Toggles a single CSS class or an array of classes on an element. */\n    _toggleClasses(element, cssClasses, isAdd) {\n        const classes = coerceArray(cssClasses || []).filter(c => !!c);\n        if (classes.length) {\n            isAdd ? element.classList.add(...classes) : element.classList.remove(...classes);\n        }\n    }\n    /** Detaches the overlay content next time the zone stabilizes. */\n    _detachContentWhenStable() {\n        // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n        // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n        // be patched to run inside the zone, which will throw us into an infinite loop.\n        this._ngZone.runOutsideAngular(() => {\n            // We can't remove the host here immediately, because the overlay pane's content\n            // might still be animating. This stream helps us avoid interrupting the animation\n            // by waiting for the pane to become empty.\n            const subscription = this._ngZone.onStable\n                .pipe(takeUntil(merge(this._attachments, this._detachments)))\n                .subscribe(() => {\n                // Needs a couple of checks for the pane and host, because\n                // they may have been removed by the time the zone stabilizes.\n                if (!this._pane || !this._host || this._pane.children.length === 0) {\n                    if (this._pane && this._config.panelClass) {\n                        this._toggleClasses(this._pane, this._config.panelClass, false);\n                    }\n                    if (this._host && this._host.parentElement) {\n                        this._previousHostParent = this._host.parentElement;\n                        this._host.remove();\n                    }\n                    subscription.unsubscribe();\n                }\n            });\n        });\n    }\n    /** Disposes of a scroll strategy. */\n    _disposeScrollStrategy() {\n        const scrollStrategy = this._scrollStrategy;\n        if (scrollStrategy) {\n            scrollStrategy.disable();\n            if (scrollStrategy.detach) {\n                scrollStrategy.detach();\n            }\n        }\n    }\n    /** Removes a backdrop element from the DOM. */\n    _disposeBackdrop(backdrop) {\n        if (backdrop) {\n            backdrop.removeEventListener('click', this._backdropClickHandler);\n            backdrop.removeEventListener('transitionend', this._backdropTransitionendHandler);\n            backdrop.remove();\n            // It is possible that a new portal has been attached to this overlay since we started\n            // removing the backdrop. If that is the case, only clear the backdrop reference if it\n            // is still the same instance that we started to remove.\n            if (this._backdropElement === backdrop) {\n                this._backdropElement = null;\n            }\n        }\n        if (this._backdropTimeout) {\n            clearTimeout(this._backdropTimeout);\n            this._backdropTimeout = undefined;\n        }\n    }\n}\n\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n/** Class to be added to the overlay bounding box. */\nconst boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nclass FlexibleConnectedPositionStrategy {\n    /** Ordered list of preferred positions, from most to least desirable. */\n    get positions() {\n        return this._preferredPositions;\n    }\n    constructor(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n        /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n        this._lastBoundingBoxSize = { width: 0, height: 0 };\n        /** Whether the overlay was pushed in a previous positioning. */\n        this._isPushed = false;\n        /** Whether the overlay can be pushed on-screen on the initial open. */\n        this._canPush = true;\n        /** Whether the overlay can grow via flexible width/height after the initial open. */\n        this._growAfterOpen = false;\n        /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n        this._hasFlexibleDimensions = true;\n        /** Whether the overlay position is locked. */\n        this._positionLocked = false;\n        /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n        this._viewportMargin = 0;\n        /** The Scrollable containers used to check scrollable view properties on position change. */\n        this._scrollables = [];\n        /** Ordered list of preferred positions, from most to least desirable. */\n        this._preferredPositions = [];\n        /** Subject that emits whenever the position changes. */\n        this._positionChanges = new Subject();\n        /** Subscription to viewport size changes. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Default offset for the overlay along the x axis. */\n        this._offsetX = 0;\n        /** Default offset for the overlay along the y axis. */\n        this._offsetY = 0;\n        /** Keeps track of the CSS classes that the position strategy has applied on the overlay panel. */\n        this._appliedPanelClasses = [];\n        /** Observable sequence of position changes. */\n        this.positionChanges = this._positionChanges;\n        this.setOrigin(connectedTo);\n    }\n    /** Attaches this position strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef &&\n            overlayRef !== this._overlayRef &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('This position strategy is already attached to an overlay');\n        }\n        this._validatePositions();\n        overlayRef.hostElement.classList.add(boundingBoxClass);\n        this._overlayRef = overlayRef;\n        this._boundingBox = overlayRef.hostElement;\n        this._pane = overlayRef.overlayElement;\n        this._isDisposed = false;\n        this._isInitialRender = true;\n        this._lastPosition = null;\n        this._resizeSubscription.unsubscribe();\n        this._resizeSubscription = this._viewportRuler.change().subscribe(() => {\n            // When the window is resized, we want to trigger the next reposition as if it\n            // was an initial render, in order for the strategy to pick a new optimal position,\n            // otherwise position locking will cause it to stay at the old one.\n            this._isInitialRender = true;\n            this.apply();\n        });\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satisfies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * @docs-private\n     */\n    apply() {\n        // We shouldn't do anything if the strategy was disposed or we're on the server.\n        if (this._isDisposed || !this._platform.isBrowser) {\n            return;\n        }\n        // If the position has been applied already (e.g. when the overlay was opened) and the\n        // consumer opted into locking in the position, re-use the old position, in order to\n        // prevent the overlay from jumping around.\n        if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n            this.reapplyLastPosition();\n            return;\n        }\n        this._clearPanelClasses();\n        this._resetOverlayElementStyles();\n        this._resetBoundingBoxStyles();\n        // We need the bounding rects for the origin, the overlay and the container to determine how to position\n        // the overlay relative to the origin.\n        // We use the viewport rect to determine whether a position would go off-screen.\n        this._viewportRect = this._getNarrowedViewportRect();\n        this._originRect = this._getOriginRect();\n        this._overlayRect = this._pane.getBoundingClientRect();\n        this._containerRect = this._overlayContainer.getContainerElement().getBoundingClientRect();\n        const originRect = this._originRect;\n        const overlayRect = this._overlayRect;\n        const viewportRect = this._viewportRect;\n        const containerRect = this._containerRect;\n        // Positions where the overlay will fit with flexible dimensions.\n        const flexibleFits = [];\n        // Fallback if none of the preferred positions fit within the viewport.\n        let fallback;\n        // Go through each of the preferred positions looking for a good fit.\n        // If a good fit is found, it will be applied immediately.\n        for (let pos of this._preferredPositions) {\n            // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n            let originPoint = this._getOriginPoint(originRect, containerRect, pos);\n            // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n            // overlay in this position. We use the top-left corner for calculations and later translate\n            // this into an appropriate (top, left, bottom, right) style.\n            let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n            // Calculate how well the overlay would fit into the viewport with this point.\n            let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n            // If the overlay, without any further work, fits into the viewport, use this position.\n            if (overlayFit.isCompletelyWithinViewport) {\n                this._isPushed = false;\n                this._applyPosition(pos, originPoint);\n                return;\n            }\n            // If the overlay has flexible dimensions, we can use this position\n            // so long as there's enough space for the minimum dimensions.\n            if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n                // Save positions where the overlay will fit with flexible dimensions. We will use these\n                // if none of the positions fit *without* flexible dimensions.\n                flexibleFits.push({\n                    position: pos,\n                    origin: originPoint,\n                    overlayRect,\n                    boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos),\n                });\n                continue;\n            }\n            // If the current preferred position does not fit on the screen, remember the position\n            // if it has more visible area on-screen than we've seen and move onto the next preferred\n            // position.\n            if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n                fallback = { overlayFit, overlayPoint, originPoint, position: pos, overlayRect };\n            }\n        }\n        // If there are any positions where the overlay would fit with flexible dimensions, choose the\n        // one that has the greatest area available modified by the position's weight\n        if (flexibleFits.length) {\n            let bestFit = null;\n            let bestScore = -1;\n            for (const fit of flexibleFits) {\n                const score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n                if (score > bestScore) {\n                    bestScore = score;\n                    bestFit = fit;\n                }\n            }\n            this._isPushed = false;\n            this._applyPosition(bestFit.position, bestFit.origin);\n            return;\n        }\n        // When none of the preferred positions fit within the viewport, take the position\n        // that went off-screen the least and attempt to push it on-screen.\n        if (this._canPush) {\n            // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n            this._isPushed = true;\n            this._applyPosition(fallback.position, fallback.originPoint);\n            return;\n        }\n        // All options for getting the overlay within the viewport have been exhausted, so go with the\n        // position that went off-screen the least.\n        this._applyPosition(fallback.position, fallback.originPoint);\n    }\n    detach() {\n        this._clearPanelClasses();\n        this._lastPosition = null;\n        this._previousPushAmount = null;\n        this._resizeSubscription.unsubscribe();\n    }\n    /** Cleanup after the element gets destroyed. */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        // We can't use `_resetBoundingBoxStyles` here, because it resets\n        // some properties to zero, rather than removing them.\n        if (this._boundingBox) {\n            extendStyles(this._boundingBox.style, {\n                top: '',\n                left: '',\n                right: '',\n                bottom: '',\n                height: '',\n                width: '',\n                alignItems: '',\n                justifyContent: '',\n            });\n        }\n        if (this._pane) {\n            this._resetOverlayElementStyles();\n        }\n        if (this._overlayRef) {\n            this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n        }\n        this.detach();\n        this._positionChanges.complete();\n        this._overlayRef = this._boundingBox = null;\n        this._isDisposed = true;\n    }\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n    reapplyLastPosition() {\n        if (this._isDisposed || !this._platform.isBrowser) {\n            return;\n        }\n        const lastPosition = this._lastPosition;\n        if (lastPosition) {\n            this._originRect = this._getOriginRect();\n            this._overlayRect = this._pane.getBoundingClientRect();\n            this._viewportRect = this._getNarrowedViewportRect();\n            this._containerRect = this._overlayContainer.getContainerElement().getBoundingClientRect();\n            const originPoint = this._getOriginPoint(this._originRect, this._containerRect, lastPosition);\n            this._applyPosition(lastPosition, originPoint);\n        }\n        else {\n            this.apply();\n        }\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n    withScrollableContainers(scrollables) {\n        this._scrollables = scrollables;\n        return this;\n    }\n    /**\n     * Adds new preferred positions.\n     * @param positions List of positions options for this overlay.\n     */\n    withPositions(positions) {\n        this._preferredPositions = positions;\n        // If the last calculated position object isn't part of the positions anymore, clear\n        // it in order to avoid it being picked up if the consumer tries to re-apply.\n        if (positions.indexOf(this._lastPosition) === -1) {\n            this._lastPosition = null;\n        }\n        this._validatePositions();\n        return this;\n    }\n    /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @param margin Required margin between the overlay and the viewport edge in pixels.\n     */\n    withViewportMargin(margin) {\n        this._viewportMargin = margin;\n        return this;\n    }\n    /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n    withFlexibleDimensions(flexibleDimensions = true) {\n        this._hasFlexibleDimensions = flexibleDimensions;\n        return this;\n    }\n    /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n    withGrowAfterOpen(growAfterOpen = true) {\n        this._growAfterOpen = growAfterOpen;\n        return this;\n    }\n    /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    withPush(canPush = true) {\n        this._canPush = canPush;\n        return this;\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n    withLockedPosition(isLocked = true) {\n        this._positionLocked = isLocked;\n        return this;\n    }\n    /**\n     * Sets the origin, relative to which to position the overlay.\n     * Using an element origin is useful for building components that need to be positioned\n     * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n     * used for cases like contextual menus which open relative to the user's pointer.\n     * @param origin Reference to the new origin.\n     */\n    setOrigin(origin) {\n        this._origin = origin;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @param offset New offset in the X axis.\n     */\n    withDefaultOffsetX(offset) {\n        this._offsetX = offset;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @param offset New offset in the Y axis.\n     */\n    withDefaultOffsetY(offset) {\n        this._offsetY = offset;\n        return this;\n    }\n    /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @param selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     */\n    withTransformOriginOn(selector) {\n        this._transformOriginSelector = selector;\n        return this;\n    }\n    /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     */\n    _getOriginPoint(originRect, containerRect, pos) {\n        let x;\n        if (pos.originX == 'center') {\n            // Note: when centering we should always use the `left`\n            // offset, otherwise the position will be wrong in RTL.\n            x = originRect.left + originRect.width / 2;\n        }\n        else {\n            const startX = this._isRtl() ? originRect.right : originRect.left;\n            const endX = this._isRtl() ? originRect.left : originRect.right;\n            x = pos.originX == 'start' ? startX : endX;\n        }\n        // When zooming in Safari the container rectangle contains negative values for the position\n        // and we need to re-add them to the calculated coordinates.\n        if (containerRect.left < 0) {\n            x -= containerRect.left;\n        }\n        let y;\n        if (pos.originY == 'center') {\n            y = originRect.top + originRect.height / 2;\n        }\n        else {\n            y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n        }\n        // Normally the containerRect's top value would be zero, however when the overlay is attached to an input\n        // (e.g. in an autocomplete), mobile browsers will shift everything in order to put the input in the middle\n        // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n        // otherwise our positioning will be thrown off.\n        // Additionally, when zooming in Safari this fixes the vertical position.\n        if (containerRect.top < 0) {\n            y -= containerRect.top;\n        }\n        return { x, y };\n    }\n    /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     */\n    _getOverlayPoint(originPoint, overlayRect, pos) {\n        // Calculate the (overlayStartX, overlayStartY), the start of the\n        // potential overlay position relative to the origin point.\n        let overlayStartX;\n        if (pos.overlayX == 'center') {\n            overlayStartX = -overlayRect.width / 2;\n        }\n        else if (pos.overlayX === 'start') {\n            overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n        }\n        else {\n            overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n        }\n        let overlayStartY;\n        if (pos.overlayY == 'center') {\n            overlayStartY = -overlayRect.height / 2;\n        }\n        else {\n            overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n        }\n        // The (x, y) coordinates of the overlay.\n        return {\n            x: originPoint.x + overlayStartX,\n            y: originPoint.y + overlayStartY,\n        };\n    }\n    /** Gets how well an overlay at the given point will fit within the viewport. */\n    _getOverlayFit(point, rawOverlayRect, viewport, position) {\n        // Round the overlay rect when comparing against the\n        // viewport, because the viewport is always rounded.\n        const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n        let { x, y } = point;\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        // Account for the offsets since they could push the overlay out of the viewport.\n        if (offsetX) {\n            x += offsetX;\n        }\n        if (offsetY) {\n            y += offsetY;\n        }\n        // How much the overlay would overflow at this position, on each side.\n        let leftOverflow = 0 - x;\n        let rightOverflow = x + overlay.width - viewport.width;\n        let topOverflow = 0 - y;\n        let bottomOverflow = y + overlay.height - viewport.height;\n        // Visible parts of the element on each axis.\n        let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n        let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n        let visibleArea = visibleWidth * visibleHeight;\n        return {\n            visibleArea,\n            isCompletelyWithinViewport: overlay.width * overlay.height === visibleArea,\n            fitsInViewportVertically: visibleHeight === overlay.height,\n            fitsInViewportHorizontally: visibleWidth == overlay.width,\n        };\n    }\n    /**\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\n     * @param fit How well the overlay fits in the viewport at some position.\n     * @param point The (x, y) coordinates of the overlay at some position.\n     * @param viewport The geometry of the viewport.\n     */\n    _canFitWithFlexibleDimensions(fit, point, viewport) {\n        if (this._hasFlexibleDimensions) {\n            const availableHeight = viewport.bottom - point.y;\n            const availableWidth = viewport.right - point.x;\n            const minHeight = getPixelValue(this._overlayRef.getConfig().minHeight);\n            const minWidth = getPixelValue(this._overlayRef.getConfig().minWidth);\n            const verticalFit = fit.fitsInViewportVertically || (minHeight != null && minHeight <= availableHeight);\n            const horizontalFit = fit.fitsInViewportHorizontally || (minWidth != null && minWidth <= availableWidth);\n            return verticalFit && horizontalFit;\n        }\n        return false;\n    }\n    /**\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occurring on the\n     * right and bottom).\n     *\n     * @param start Starting point from which the overlay is pushed.\n     * @param rawOverlayRect Dimensions of the overlay.\n     * @param scrollPosition Current viewport scroll position.\n     * @returns The point at which to position the overlay after pushing. This is effectively a new\n     *     originPoint.\n     */\n    _pushOverlayOnScreen(start, rawOverlayRect, scrollPosition) {\n        // If the position is locked and we've pushed the overlay already, reuse the previous push\n        // amount, rather than pushing it again. If we were to continue pushing, the element would\n        // remain in the viewport, which goes against the expectations when position locking is enabled.\n        if (this._previousPushAmount && this._positionLocked) {\n            return {\n                x: start.x + this._previousPushAmount.x,\n                y: start.y + this._previousPushAmount.y,\n            };\n        }\n        // Round the overlay rect when comparing against the\n        // viewport, because the viewport is always rounded.\n        const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n        const viewport = this._viewportRect;\n        // Determine how much the overlay goes outside the viewport on each\n        // side, which we'll use to decide which direction to push it.\n        const overflowRight = Math.max(start.x + overlay.width - viewport.width, 0);\n        const overflowBottom = Math.max(start.y + overlay.height - viewport.height, 0);\n        const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n        const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n        // Amount by which to push the overlay in each axis such that it remains on-screen.\n        let pushX = 0;\n        let pushY = 0;\n        // If the overlay fits completely within the bounds of the viewport, push it from whichever\n        // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n        // viewport and allow for the trailing end of the overlay to go out of bounds.\n        if (overlay.width <= viewport.width) {\n            pushX = overflowLeft || -overflowRight;\n        }\n        else {\n            pushX = start.x < this._viewportMargin ? viewport.left - scrollPosition.left - start.x : 0;\n        }\n        if (overlay.height <= viewport.height) {\n            pushY = overflowTop || -overflowBottom;\n        }\n        else {\n            pushY = start.y < this._viewportMargin ? viewport.top - scrollPosition.top - start.y : 0;\n        }\n        this._previousPushAmount = { x: pushX, y: pushY };\n        return {\n            x: start.x + pushX,\n            y: start.y + pushY,\n        };\n    }\n    /**\n     * Applies a computed position to the overlay and emits a position change.\n     * @param position The position preference\n     * @param originPoint The point on the origin element where the overlay is connected.\n     */\n    _applyPosition(position, originPoint) {\n        this._setTransformOrigin(position);\n        this._setOverlayElementStyles(originPoint, position);\n        this._setBoundingBoxStyles(originPoint, position);\n        if (position.panelClass) {\n            this._addPanelClasses(position.panelClass);\n        }\n        // Save the last connected position in case the position needs to be re-calculated.\n        this._lastPosition = position;\n        // Notify that the position has been changed along with its change properties.\n        // We only emit if we've got any subscriptions, because the scroll visibility\n        // calculations can be somewhat expensive.\n        if (this._positionChanges.observers.length) {\n            const scrollableViewProperties = this._getScrollVisibility();\n            const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n            this._positionChanges.next(changeEvent);\n        }\n        this._isInitialRender = false;\n    }\n    /** Sets the transform origin based on the configured selector and the passed-in position.  */\n    _setTransformOrigin(position) {\n        if (!this._transformOriginSelector) {\n            return;\n        }\n        const elements = this._boundingBox.querySelectorAll(this._transformOriginSelector);\n        let xOrigin;\n        let yOrigin = position.overlayY;\n        if (position.overlayX === 'center') {\n            xOrigin = 'center';\n        }\n        else if (this._isRtl()) {\n            xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n        }\n        else {\n            xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n        }\n        for (let i = 0; i < elements.length; i++) {\n            elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n        }\n    }\n    /**\n     * Gets the position and size of the overlay's sizing container.\n     *\n     * This method does no measuring and applies no styles so that we can cheaply compute the\n     * bounds for all positions and choose the best fit based on these results.\n     */\n    _calculateBoundingBoxRect(origin, position) {\n        const viewport = this._viewportRect;\n        const isRtl = this._isRtl();\n        let height, top, bottom;\n        if (position.overlayY === 'top') {\n            // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n            top = origin.y;\n            height = viewport.height - top + this._viewportMargin;\n        }\n        else if (position.overlayY === 'bottom') {\n            // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n            // the viewport margin back in, because the viewport rect is narrowed down to remove the\n            // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n            bottom = viewport.height - origin.y + this._viewportMargin * 2;\n            height = viewport.height - bottom + this._viewportMargin;\n        }\n        else {\n            // If neither top nor bottom, it means that the overlay is vertically centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n            // `origin.y - viewport.top`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n            const previousHeight = this._lastBoundingBoxSize.height;\n            height = smallestDistanceToViewportEdge * 2;\n            top = origin.y - smallestDistanceToViewportEdge;\n            if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n                top = origin.y - previousHeight / 2;\n            }\n        }\n        // The overlay is opening 'right-ward' (the content flows to the right).\n        const isBoundedByRightViewportEdge = (position.overlayX === 'start' && !isRtl) || (position.overlayX === 'end' && isRtl);\n        // The overlay is opening 'left-ward' (the content flows to the left).\n        const isBoundedByLeftViewportEdge = (position.overlayX === 'end' && !isRtl) || (position.overlayX === 'start' && isRtl);\n        let width, left, right;\n        if (isBoundedByLeftViewportEdge) {\n            right = viewport.width - origin.x + this._viewportMargin;\n            width = origin.x - this._viewportMargin;\n        }\n        else if (isBoundedByRightViewportEdge) {\n            left = origin.x;\n            width = viewport.right - origin.x;\n        }\n        else {\n            // If neither start nor end, it means that the overlay is horizontally centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.right - origin.x` and\n            // `origin.x - viewport.left`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\n            const previousWidth = this._lastBoundingBoxSize.width;\n            width = smallestDistanceToViewportEdge * 2;\n            left = origin.x - smallestDistanceToViewportEdge;\n            if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n                left = origin.x - previousWidth / 2;\n            }\n        }\n        return { top: top, left: left, bottom: bottom, right: right, width, height };\n    }\n    /**\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n     * origin's connection point and stretches to the bounds of the viewport.\n     *\n     * @param origin The point on the origin element where the overlay is connected.\n     * @param position The position preference\n     */\n    _setBoundingBoxStyles(origin, position) {\n        const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n        // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n        // when applying a new size.\n        if (!this._isInitialRender && !this._growAfterOpen) {\n            boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n            boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n        }\n        const styles = {};\n        if (this._hasExactPosition()) {\n            styles.top = styles.left = '0';\n            styles.bottom = styles.right = styles.maxHeight = styles.maxWidth = '';\n            styles.width = styles.height = '100%';\n        }\n        else {\n            const maxHeight = this._overlayRef.getConfig().maxHeight;\n            const maxWidth = this._overlayRef.getConfig().maxWidth;\n            styles.height = coerceCssPixelValue(boundingBoxRect.height);\n            styles.top = coerceCssPixelValue(boundingBoxRect.top);\n            styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n            styles.width = coerceCssPixelValue(boundingBoxRect.width);\n            styles.left = coerceCssPixelValue(boundingBoxRect.left);\n            styles.right = coerceCssPixelValue(boundingBoxRect.right);\n            // Push the pane content towards the proper direction.\n            if (position.overlayX === 'center') {\n                styles.alignItems = 'center';\n            }\n            else {\n                styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n            }\n            if (position.overlayY === 'center') {\n                styles.justifyContent = 'center';\n            }\n            else {\n                styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n            }\n            if (maxHeight) {\n                styles.maxHeight = coerceCssPixelValue(maxHeight);\n            }\n            if (maxWidth) {\n                styles.maxWidth = coerceCssPixelValue(maxWidth);\n            }\n        }\n        this._lastBoundingBoxSize = boundingBoxRect;\n        extendStyles(this._boundingBox.style, styles);\n    }\n    /** Resets the styles for the bounding box so that a new positioning can be computed. */\n    _resetBoundingBoxStyles() {\n        extendStyles(this._boundingBox.style, {\n            top: '0',\n            left: '0',\n            right: '0',\n            bottom: '0',\n            height: '',\n            width: '',\n            alignItems: '',\n            justifyContent: '',\n        });\n    }\n    /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n    _resetOverlayElementStyles() {\n        extendStyles(this._pane.style, {\n            top: '',\n            left: '',\n            bottom: '',\n            right: '',\n            position: '',\n            transform: '',\n        });\n    }\n    /** Sets positioning styles to the overlay element. */\n    _setOverlayElementStyles(originPoint, position) {\n        const styles = {};\n        const hasExactPosition = this._hasExactPosition();\n        const hasFlexibleDimensions = this._hasFlexibleDimensions;\n        const config = this._overlayRef.getConfig();\n        if (hasExactPosition) {\n            const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n            extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n            extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n        }\n        else {\n            styles.position = 'static';\n        }\n        // Use a transform to apply the offsets. We do this because the `center` positions rely on\n        // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n        // off the position. We also can't use margins, because they won't have an effect in some\n        // cases where the element doesn't have anything to \"push off of\". Finally, this works\n        // better both with flexible and non-flexible positioning.\n        let transformString = '';\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        if (offsetX) {\n            transformString += `translateX(${offsetX}px) `;\n        }\n        if (offsetY) {\n            transformString += `translateY(${offsetY}px)`;\n        }\n        styles.transform = transformString.trim();\n        // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n        // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n        // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n        // Note that this doesn't apply when we have an exact position, in which case we do want to\n        // apply them because they'll be cleared from the bounding box.\n        if (config.maxHeight) {\n            if (hasExactPosition) {\n                styles.maxHeight = coerceCssPixelValue(config.maxHeight);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxHeight = '';\n            }\n        }\n        if (config.maxWidth) {\n            if (hasExactPosition) {\n                styles.maxWidth = coerceCssPixelValue(config.maxWidth);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxWidth = '';\n            }\n        }\n        extendStyles(this._pane.style, styles);\n    }\n    /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayY(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the\n        // preferred position has changed since the last `apply`.\n        let styles = { top: '', bottom: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n        // above or below the origin and the direction in which the element will expand.\n        if (position.overlayY === 'bottom') {\n            // When using `bottom`, we adjust the y position such that it is the distance\n            // from the bottom of the viewport rather than the top.\n            const documentHeight = this._document.documentElement.clientHeight;\n            styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n        }\n        else {\n            styles.top = coerceCssPixelValue(overlayPoint.y);\n        }\n        return styles;\n    }\n    /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayX(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the preferred position has\n        // changed since the last `apply`.\n        let styles = { left: '', right: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n        // or \"after\" the origin, which determines the direction in which the element will expand.\n        // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n        // page is in RTL or LTR.\n        let horizontalStyleProperty;\n        if (this._isRtl()) {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n        }\n        else {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n        }\n        // When we're setting `right`, we adjust the x position such that it is the distance\n        // from the right edge of the viewport rather than the left edge.\n        if (horizontalStyleProperty === 'right') {\n            const documentWidth = this._document.documentElement.clientWidth;\n            styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n        }\n        else {\n            styles.left = coerceCssPixelValue(overlayPoint.x);\n        }\n        return styles;\n    }\n    /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     */\n    _getScrollVisibility() {\n        // Note: needs fresh rects since the position could've changed.\n        const originBounds = this._getOriginRect();\n        const overlayBounds = this._pane.getBoundingClientRect();\n        // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n        // every time, we should be able to use the scrollTop of the containers if the size of those\n        // containers hasn't changed.\n        const scrollContainerBounds = this._scrollables.map(scrollable => {\n            return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n        });\n        return {\n            isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n            isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n            isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n            isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n        };\n    }\n    /** Subtracts the amount that an element is overflowing on an axis from its length. */\n    _subtractOverflows(length, ...overflows) {\n        return overflows.reduce((currentValue, currentOverflow) => {\n            return currentValue - Math.max(currentOverflow, 0);\n        }, length);\n    }\n    /** Narrows the given viewport rect by the current _viewportMargin. */\n    _getNarrowedViewportRect() {\n        // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n        // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n        // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n        // and `innerHeight` that do. This is necessary, because the overlay container uses\n        // 100% `width` and `height` which don't include the scrollbar either.\n        const width = this._document.documentElement.clientWidth;\n        const height = this._document.documentElement.clientHeight;\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n        return {\n            top: scrollPosition.top + this._viewportMargin,\n            left: scrollPosition.left + this._viewportMargin,\n            right: scrollPosition.left + width - this._viewportMargin,\n            bottom: scrollPosition.top + height - this._viewportMargin,\n            width: width - 2 * this._viewportMargin,\n            height: height - 2 * this._viewportMargin,\n        };\n    }\n    /** Whether the we're dealing with an RTL context */\n    _isRtl() {\n        return this._overlayRef.getDirection() === 'rtl';\n    }\n    /** Determines whether the overlay uses exact or flexible positioning. */\n    _hasExactPosition() {\n        return !this._hasFlexibleDimensions || this._isPushed;\n    }\n    /** Retrieves the offset of a position along the x or y axis. */\n    _getOffset(position, axis) {\n        if (axis === 'x') {\n            // We don't do something like `position['offset' + axis]` in\n            // order to avoid breaking minifiers that rename properties.\n            return position.offsetX == null ? this._offsetX : position.offsetX;\n        }\n        return position.offsetY == null ? this._offsetY : position.offsetY;\n    }\n    /** Validates that the current position match the expected values. */\n    _validatePositions() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!this._preferredPositions.length) {\n                throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n            }\n            // TODO(crisbeto): remove these once Angular's template type\n            // checking is advanced enough to catch these cases.\n            this._preferredPositions.forEach(pair => {\n                validateHorizontalPosition('originX', pair.originX);\n                validateVerticalPosition('originY', pair.originY);\n                validateHorizontalPosition('overlayX', pair.overlayX);\n                validateVerticalPosition('overlayY', pair.overlayY);\n            });\n        }\n    }\n    /** Adds a single CSS class or an array of classes on the overlay panel. */\n    _addPanelClasses(cssClasses) {\n        if (this._pane) {\n            coerceArray(cssClasses).forEach(cssClass => {\n                if (cssClass !== '' && this._appliedPanelClasses.indexOf(cssClass) === -1) {\n                    this._appliedPanelClasses.push(cssClass);\n                    this._pane.classList.add(cssClass);\n                }\n            });\n        }\n    }\n    /** Clears the classes that the position strategy has applied from the overlay panel. */\n    _clearPanelClasses() {\n        if (this._pane) {\n            this._appliedPanelClasses.forEach(cssClass => {\n                this._pane.classList.remove(cssClass);\n            });\n            this._appliedPanelClasses = [];\n        }\n    }\n    /** Returns the ClientRect of the current origin. */\n    _getOriginRect() {\n        const origin = this._origin;\n        if (origin instanceof ElementRef) {\n            return origin.nativeElement.getBoundingClientRect();\n        }\n        // Check for Element so SVG elements are also supported.\n        if (origin instanceof Element) {\n            return origin.getBoundingClientRect();\n        }\n        const width = origin.width || 0;\n        const height = origin.height || 0;\n        // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n        return {\n            top: origin.y,\n            bottom: origin.y + height,\n            left: origin.x,\n            right: origin.x + width,\n            height,\n            width,\n        };\n    }\n}\n/** Shallow-extends a stylesheet object with another stylesheet object. */\nfunction extendStyles(destination, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            destination[key] = source[key];\n        }\n    }\n    return destination;\n}\n/**\n * Extracts the pixel value as a number from a value, if it's a number\n * or a CSS pixel string (e.g. `1337px`). Otherwise returns null.\n */\nfunction getPixelValue(input) {\n    if (typeof input !== 'number' && input != null) {\n        const [value, units] = input.split(cssUnitPattern);\n        return !units || units === 'px' ? parseFloat(value) : null;\n    }\n    return input || null;\n}\n/**\n * Gets a version of an element's bounding `ClientRect` where all the values are rounded down to\n * the nearest pixel. This allows us to account for the cases where there may be sub-pixel\n * deviations in the `ClientRect` returned by the browser (e.g. when zoomed in with a percentage\n * size, see #21350).\n */\nfunction getRoundedBoundingClientRect(clientRect) {\n    return {\n        top: Math.floor(clientRect.top),\n        right: Math.floor(clientRect.right),\n        bottom: Math.floor(clientRect.bottom),\n        left: Math.floor(clientRect.left),\n        width: Math.floor(clientRect.width),\n        height: Math.floor(clientRect.height),\n    };\n}\nconst STANDARD_DROPDOWN_BELOW_POSITIONS = [\n    { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\n    { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom' },\n    { originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'top' },\n    { originX: 'end', originY: 'top', overlayX: 'end', overlayY: 'bottom' },\n];\nconst STANDARD_DROPDOWN_ADJACENT_POSITIONS = [\n    { originX: 'end', originY: 'top', overlayX: 'start', overlayY: 'top' },\n    { originX: 'end', originY: 'bottom', overlayX: 'start', overlayY: 'bottom' },\n    { originX: 'start', originY: 'top', overlayX: 'end', overlayY: 'top' },\n    { originX: 'start', originY: 'bottom', overlayX: 'end', overlayY: 'bottom' },\n];\n\n/** Class to be added to the overlay pane wrapper. */\nconst wrapperClass = 'cdk-global-overlay-wrapper';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nclass GlobalPositionStrategy {\n    constructor() {\n        this._cssPosition = 'static';\n        this._topOffset = '';\n        this._bottomOffset = '';\n        this._alignItems = '';\n        this._xPosition = '';\n        this._xOffset = '';\n        this._width = '';\n        this._height = '';\n        this._isDisposed = false;\n    }\n    attach(overlayRef) {\n        const config = overlayRef.getConfig();\n        this._overlayRef = overlayRef;\n        if (this._width && !config.width) {\n            overlayRef.updateSize({ width: this._width });\n        }\n        if (this._height && !config.height) {\n            overlayRef.updateSize({ height: this._height });\n        }\n        overlayRef.hostElement.classList.add(wrapperClass);\n        this._isDisposed = false;\n    }\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @param value New top offset.\n     */\n    top(value = '') {\n        this._bottomOffset = '';\n        this._topOffset = value;\n        this._alignItems = 'flex-start';\n        return this;\n    }\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @param value New left offset.\n     */\n    left(value = '') {\n        this._xOffset = value;\n        this._xPosition = 'left';\n        return this;\n    }\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @param value New bottom offset.\n     */\n    bottom(value = '') {\n        this._topOffset = '';\n        this._bottomOffset = value;\n        this._alignItems = 'flex-end';\n        return this;\n    }\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @param value New right offset.\n     */\n    right(value = '') {\n        this._xOffset = value;\n        this._xPosition = 'right';\n        return this;\n    }\n    /**\n     * Sets the overlay to the start of the viewport, depending on the overlay direction.\n     * This will be to the left in LTR layouts and to the right in RTL.\n     * @param offset Offset from the edge of the screen.\n     */\n    start(value = '') {\n        this._xOffset = value;\n        this._xPosition = 'start';\n        return this;\n    }\n    /**\n     * Sets the overlay to the end of the viewport, depending on the overlay direction.\n     * This will be to the right in LTR layouts and to the left in RTL.\n     * @param offset Offset from the edge of the screen.\n     */\n    end(value = '') {\n        this._xOffset = value;\n        this._xPosition = 'end';\n        return this;\n    }\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @param value New width for the overlay\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    width(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ width: value });\n        }\n        else {\n            this._width = value;\n        }\n        return this;\n    }\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @param value New height for the overlay\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    height(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ height: value });\n        }\n        else {\n            this._height = value;\n        }\n        return this;\n    }\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @param offset Overlay offset from the horizontal center.\n     */\n    centerHorizontally(offset = '') {\n        this.left(offset);\n        this._xPosition = 'center';\n        return this;\n    }\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @param offset Overlay offset from the vertical center.\n     */\n    centerVertically(offset = '') {\n        this.top(offset);\n        this._alignItems = 'center';\n        return this;\n    }\n    /**\n     * Apply the position to the element.\n     * @docs-private\n     */\n    apply() {\n        // Since the overlay ref applies the strategy asynchronously, it could\n        // have been disposed before it ends up being applied. If that is the\n        // case, we shouldn't do anything.\n        if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parentStyles = this._overlayRef.hostElement.style;\n        const config = this._overlayRef.getConfig();\n        const { width, height, maxWidth, maxHeight } = config;\n        const shouldBeFlushHorizontally = (width === '100%' || width === '100vw') &&\n            (!maxWidth || maxWidth === '100%' || maxWidth === '100vw');\n        const shouldBeFlushVertically = (height === '100%' || height === '100vh') &&\n            (!maxHeight || maxHeight === '100%' || maxHeight === '100vh');\n        const xPosition = this._xPosition;\n        const xOffset = this._xOffset;\n        const isRtl = this._overlayRef.getConfig().direction === 'rtl';\n        let marginLeft = '';\n        let marginRight = '';\n        let justifyContent = '';\n        if (shouldBeFlushHorizontally) {\n            justifyContent = 'flex-start';\n        }\n        else if (xPosition === 'center') {\n            justifyContent = 'center';\n            if (isRtl) {\n                marginRight = xOffset;\n            }\n            else {\n                marginLeft = xOffset;\n            }\n        }\n        else if (isRtl) {\n            if (xPosition === 'left' || xPosition === 'end') {\n                justifyContent = 'flex-end';\n                marginLeft = xOffset;\n            }\n            else if (xPosition === 'right' || xPosition === 'start') {\n                justifyContent = 'flex-start';\n                marginRight = xOffset;\n            }\n        }\n        else if (xPosition === 'left' || xPosition === 'start') {\n            justifyContent = 'flex-start';\n            marginLeft = xOffset;\n        }\n        else if (xPosition === 'right' || xPosition === 'end') {\n            justifyContent = 'flex-end';\n            marginRight = xOffset;\n        }\n        styles.position = this._cssPosition;\n        styles.marginLeft = shouldBeFlushHorizontally ? '0' : marginLeft;\n        styles.marginTop = shouldBeFlushVertically ? '0' : this._topOffset;\n        styles.marginBottom = this._bottomOffset;\n        styles.marginRight = shouldBeFlushHorizontally ? '0' : marginRight;\n        parentStyles.justifyContent = justifyContent;\n        parentStyles.alignItems = shouldBeFlushVertically ? 'flex-start' : this._alignItems;\n    }\n    /**\n     * Cleans up the DOM changes from the position strategy.\n     * @docs-private\n     */\n    dispose() {\n        if (this._isDisposed || !this._overlayRef) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parent = this._overlayRef.hostElement;\n        const parentStyles = parent.style;\n        parent.classList.remove(wrapperClass);\n        parentStyles.justifyContent =\n            parentStyles.alignItems =\n                styles.marginTop =\n                    styles.marginBottom =\n                        styles.marginLeft =\n                            styles.marginRight =\n                                styles.position =\n                                    '';\n        this._overlayRef = null;\n        this._isDisposed = true;\n    }\n}\n\n/** Builder for overlay position strategy. */\nclass OverlayPositionBuilder {\n    constructor(_viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n    }\n    /**\n     * Creates a global position strategy.\n     */\n    global() {\n        return new GlobalPositionStrategy();\n    }\n    /**\n     * Creates a flexible position strategy.\n     * @param origin Origin relative to which to position the overlay.\n     */\n    flexibleConnectedTo(origin) {\n        return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: OverlayPositionBuilder, deps: [{ token: i1.ViewportRuler }, { token: DOCUMENT }, { token: i1$1.Platform }, { token: OverlayContainer }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: OverlayPositionBuilder, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: OverlayPositionBuilder, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1.ViewportRuler }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i1$1.Platform }, { type: OverlayContainer }]; } });\n\n/** Next overlay unique ID. */\nlet nextUniqueId = 0;\n// Note that Overlay is *not* scoped to the app root because of the ComponentFactoryResolver\n// which needs to be different depending on where OverlayModule is imported.\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\nclass Overlay {\n    constructor(\n    /** Scrolling strategies that can be used when creating an overlay. */\n    scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, _location, _outsideClickDispatcher, _animationsModuleType) {\n        this.scrollStrategies = scrollStrategies;\n        this._overlayContainer = _overlayContainer;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._positionBuilder = _positionBuilder;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._injector = _injector;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        this._directionality = _directionality;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n        this._animationsModuleType = _animationsModuleType;\n    }\n    /**\n     * Creates an overlay.\n     * @param config Configuration applied to the overlay.\n     * @returns Reference to the created overlay.\n     */\n    create(config) {\n        const host = this._createHostElement();\n        const pane = this._createPaneElement(host);\n        const portalOutlet = this._createPortalOutlet(pane);\n        const overlayConfig = new OverlayConfig(config);\n        overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n        return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location, this._outsideClickDispatcher, this._animationsModuleType === 'NoopAnimations');\n    }\n    /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @returns An overlay position builder.\n     */\n    position() {\n        return this._positionBuilder;\n    }\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @returns Newly-created pane element\n     */\n    _createPaneElement(host) {\n        const pane = this._document.createElement('div');\n        pane.id = `cdk-overlay-${nextUniqueId++}`;\n        pane.classList.add('cdk-overlay-pane');\n        host.appendChild(pane);\n        return pane;\n    }\n    /**\n     * Creates the host element that wraps around an overlay\n     * and can be used for advanced positioning.\n     * @returns Newly-create host element.\n     */\n    _createHostElement() {\n        const host = this._document.createElement('div');\n        this._overlayContainer.getContainerElement().appendChild(host);\n        return host;\n    }\n    /**\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\n     * @param pane The DOM element to turn into a portal outlet.\n     * @returns A portal outlet for the given DOM element.\n     */\n    _createPortalOutlet(pane) {\n        // We have to resolve the ApplicationRef later in order to allow people\n        // to use overlay-based providers during app initialization.\n        if (!this._appRef) {\n            this._appRef = this._injector.get(ApplicationRef);\n        }\n        return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector, this._document);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: Overlay, deps: [{ token: ScrollStrategyOptions }, { token: OverlayContainer }, { token: i0.ComponentFactoryResolver }, { token: OverlayPositionBuilder }, { token: OverlayKeyboardDispatcher }, { token: i0.Injector }, { token: i0.NgZone }, { token: DOCUMENT }, { token: i5.Directionality }, { token: i6.Location }, { token: OverlayOutsideClickDispatcher }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: Overlay, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: Overlay, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: ScrollStrategyOptions }, { type: OverlayContainer }, { type: i0.ComponentFactoryResolver }, { type: OverlayPositionBuilder }, { type: OverlayKeyboardDispatcher }, { type: i0.Injector }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i5.Directionality }, { type: i6.Location }, { type: OverlayOutsideClickDispatcher }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }, {\n                    type: Optional\n                }] }]; } });\n\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\nconst defaultPositionList = [\n    {\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top',\n    },\n    {\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom',\n    },\n    {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom',\n    },\n    {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top',\n    },\n];\n/** Injection token that determines the scroll handling while the connected overlay is open. */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken('cdk-connected-overlay-scroll-strategy');\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nclass CdkOverlayOrigin {\n    constructor(\n    /** Reference to the element on which the directive is applied. */\n    elementRef) {\n        this.elementRef = elementRef;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkOverlayOrigin, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: CdkOverlayOrigin, isStandalone: true, selector: \"[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]\", exportAs: [\"cdkOverlayOrigin\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkOverlayOrigin, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n                    exportAs: 'cdkOverlayOrigin',\n                    standalone: true,\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; } });\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\nclass CdkConnectedOverlay {\n    /** The offset in pixels for the overlay connection point on the x-axis */\n    get offsetX() {\n        return this._offsetX;\n    }\n    set offsetX(offsetX) {\n        this._offsetX = offsetX;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** The offset in pixels for the overlay connection point on the y-axis */\n    get offsetY() {\n        return this._offsetY;\n    }\n    set offsetY(offsetY) {\n        this._offsetY = offsetY;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** Whether or not the overlay should attach a backdrop. */\n    get hasBackdrop() {\n        return this._hasBackdrop;\n    }\n    set hasBackdrop(value) {\n        this._hasBackdrop = coerceBooleanProperty(value);\n    }\n    /** Whether or not the overlay should be locked when scrolling. */\n    get lockPosition() {\n        return this._lockPosition;\n    }\n    set lockPosition(value) {\n        this._lockPosition = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n    get flexibleDimensions() {\n        return this._flexibleDimensions;\n    }\n    set flexibleDimensions(value) {\n        this._flexibleDimensions = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n    get growAfterOpen() {\n        return this._growAfterOpen;\n    }\n    set growAfterOpen(value) {\n        this._growAfterOpen = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    get push() {\n        return this._push;\n    }\n    set push(value) {\n        this._push = coerceBooleanProperty(value);\n    }\n    // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n    constructor(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {\n        this._overlay = _overlay;\n        this._dir = _dir;\n        this._hasBackdrop = false;\n        this._lockPosition = false;\n        this._growAfterOpen = false;\n        this._flexibleDimensions = false;\n        this._push = false;\n        this._backdropSubscription = Subscription.EMPTY;\n        this._attachSubscription = Subscription.EMPTY;\n        this._detachSubscription = Subscription.EMPTY;\n        this._positionSubscription = Subscription.EMPTY;\n        /** Margin between the overlay and the viewport edges. */\n        this.viewportMargin = 0;\n        /** Whether the overlay is open. */\n        this.open = false;\n        /** Whether the overlay can be closed by user interaction. */\n        this.disableClose = false;\n        /** Event emitted when the backdrop is clicked. */\n        this.backdropClick = new EventEmitter();\n        /** Event emitted when the position has changed. */\n        this.positionChange = new EventEmitter();\n        /** Event emitted when the overlay has been attached. */\n        this.attach = new EventEmitter();\n        /** Event emitted when the overlay has been detached. */\n        this.detach = new EventEmitter();\n        /** Emits when there are keyboard events that are targeted at the overlay. */\n        this.overlayKeydown = new EventEmitter();\n        /** Emits when there are mouse outside click events that are targeted at the overlay. */\n        this.overlayOutsideClick = new EventEmitter();\n        this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this.scrollStrategy = this._scrollStrategyFactory();\n    }\n    /** The associated overlay reference. */\n    get overlayRef() {\n        return this._overlayRef;\n    }\n    /** The element's layout direction. */\n    get dir() {\n        return this._dir ? this._dir.value : 'ltr';\n    }\n    ngOnDestroy() {\n        this._attachSubscription.unsubscribe();\n        this._detachSubscription.unsubscribe();\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n        }\n    }\n    ngOnChanges(changes) {\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n            this._overlayRef.updateSize({\n                width: this.width,\n                minWidth: this.minWidth,\n                height: this.height,\n                minHeight: this.minHeight,\n            });\n            if (changes['origin'] && this.open) {\n                this._position.apply();\n            }\n        }\n        if (changes['open']) {\n            this.open ? this._attachOverlay() : this._detachOverlay();\n        }\n    }\n    /** Creates an overlay */\n    _createOverlay() {\n        if (!this.positions || !this.positions.length) {\n            this.positions = defaultPositionList;\n        }\n        const overlayRef = (this._overlayRef = this._overlay.create(this._buildConfig()));\n        this._attachSubscription = overlayRef.attachments().subscribe(() => this.attach.emit());\n        this._detachSubscription = overlayRef.detachments().subscribe(() => this.detach.emit());\n        overlayRef.keydownEvents().subscribe((event) => {\n            this.overlayKeydown.next(event);\n            if (event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)) {\n                event.preventDefault();\n                this._detachOverlay();\n            }\n        });\n        this._overlayRef.outsidePointerEvents().subscribe((event) => {\n            this.overlayOutsideClick.next(event);\n        });\n    }\n    /** Builds the overlay config based on the directive's inputs */\n    _buildConfig() {\n        const positionStrategy = (this._position =\n            this.positionStrategy || this._createPositionStrategy());\n        const overlayConfig = new OverlayConfig({\n            direction: this._dir,\n            positionStrategy,\n            scrollStrategy: this.scrollStrategy,\n            hasBackdrop: this.hasBackdrop,\n        });\n        if (this.width || this.width === 0) {\n            overlayConfig.width = this.width;\n        }\n        if (this.height || this.height === 0) {\n            overlayConfig.height = this.height;\n        }\n        if (this.minWidth || this.minWidth === 0) {\n            overlayConfig.minWidth = this.minWidth;\n        }\n        if (this.minHeight || this.minHeight === 0) {\n            overlayConfig.minHeight = this.minHeight;\n        }\n        if (this.backdropClass) {\n            overlayConfig.backdropClass = this.backdropClass;\n        }\n        if (this.panelClass) {\n            overlayConfig.panelClass = this.panelClass;\n        }\n        return overlayConfig;\n    }\n    /** Updates the state of a position strategy, based on the values of the directive inputs. */\n    _updatePositionStrategy(positionStrategy) {\n        const positions = this.positions.map(currentPosition => ({\n            originX: currentPosition.originX,\n            originY: currentPosition.originY,\n            overlayX: currentPosition.overlayX,\n            overlayY: currentPosition.overlayY,\n            offsetX: currentPosition.offsetX || this.offsetX,\n            offsetY: currentPosition.offsetY || this.offsetY,\n            panelClass: currentPosition.panelClass || undefined,\n        }));\n        return positionStrategy\n            .setOrigin(this._getFlexibleConnectedPositionStrategyOrigin())\n            .withPositions(positions)\n            .withFlexibleDimensions(this.flexibleDimensions)\n            .withPush(this.push)\n            .withGrowAfterOpen(this.growAfterOpen)\n            .withViewportMargin(this.viewportMargin)\n            .withLockedPosition(this.lockPosition)\n            .withTransformOriginOn(this.transformOriginSelector);\n    }\n    /** Returns the position strategy of the overlay to be set on the overlay config */\n    _createPositionStrategy() {\n        const strategy = this._overlay\n            .position()\n            .flexibleConnectedTo(this._getFlexibleConnectedPositionStrategyOrigin());\n        this._updatePositionStrategy(strategy);\n        return strategy;\n    }\n    _getFlexibleConnectedPositionStrategyOrigin() {\n        if (this.origin instanceof CdkOverlayOrigin) {\n            return this.origin.elementRef;\n        }\n        else {\n            return this.origin;\n        }\n    }\n    /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n    _attachOverlay() {\n        if (!this._overlayRef) {\n            this._createOverlay();\n        }\n        else {\n            // Update the overlay size, in case the directive's inputs have changed\n            this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n        }\n        if (!this._overlayRef.hasAttached()) {\n            this._overlayRef.attach(this._templatePortal);\n        }\n        if (this.hasBackdrop) {\n            this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\n                this.backdropClick.emit(event);\n            });\n        }\n        else {\n            this._backdropSubscription.unsubscribe();\n        }\n        this._positionSubscription.unsubscribe();\n        // Only subscribe to `positionChanges` if requested, because putting\n        // together all the information for it can be expensive.\n        if (this.positionChange.observers.length > 0) {\n            this._positionSubscription = this._position.positionChanges\n                .pipe(takeWhile(() => this.positionChange.observers.length > 0))\n                .subscribe(position => {\n                this.positionChange.emit(position);\n                if (this.positionChange.observers.length === 0) {\n                    this._positionSubscription.unsubscribe();\n                }\n            });\n        }\n    }\n    /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n    _detachOverlay() {\n        if (this._overlayRef) {\n            this._overlayRef.detach();\n        }\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkConnectedOverlay, deps: [{ token: Overlay }, { token: i0.TemplateRef }, { token: i0.ViewContainerRef }, { token: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY }, { token: i5.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: CdkConnectedOverlay, isStandalone: true, selector: \"[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]\", inputs: { origin: [\"cdkConnectedOverlayOrigin\", \"origin\"], positions: [\"cdkConnectedOverlayPositions\", \"positions\"], positionStrategy: [\"cdkConnectedOverlayPositionStrategy\", \"positionStrategy\"], offsetX: [\"cdkConnectedOverlayOffsetX\", \"offsetX\"], offsetY: [\"cdkConnectedOverlayOffsetY\", \"offsetY\"], width: [\"cdkConnectedOverlayWidth\", \"width\"], height: [\"cdkConnectedOverlayHeight\", \"height\"], minWidth: [\"cdkConnectedOverlayMinWidth\", \"minWidth\"], minHeight: [\"cdkConnectedOverlayMinHeight\", \"minHeight\"], backdropClass: [\"cdkConnectedOverlayBackdropClass\", \"backdropClass\"], panelClass: [\"cdkConnectedOverlayPanelClass\", \"panelClass\"], viewportMargin: [\"cdkConnectedOverlayViewportMargin\", \"viewportMargin\"], scrollStrategy: [\"cdkConnectedOverlayScrollStrategy\", \"scrollStrategy\"], open: [\"cdkConnectedOverlayOpen\", \"open\"], disableClose: [\"cdkConnectedOverlayDisableClose\", \"disableClose\"], transformOriginSelector: [\"cdkConnectedOverlayTransformOriginOn\", \"transformOriginSelector\"], hasBackdrop: [\"cdkConnectedOverlayHasBackdrop\", \"hasBackdrop\"], lockPosition: [\"cdkConnectedOverlayLockPosition\", \"lockPosition\"], flexibleDimensions: [\"cdkConnectedOverlayFlexibleDimensions\", \"flexibleDimensions\"], growAfterOpen: [\"cdkConnectedOverlayGrowAfterOpen\", \"growAfterOpen\"], push: [\"cdkConnectedOverlayPush\", \"push\"] }, outputs: { backdropClick: \"backdropClick\", positionChange: \"positionChange\", attach: \"attach\", detach: \"detach\", overlayKeydown: \"overlayKeydown\", overlayOutsideClick: \"overlayOutsideClick\" }, exportAs: [\"cdkConnectedOverlay\"], usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkConnectedOverlay, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n                    exportAs: 'cdkConnectedOverlay',\n                    standalone: true,\n                }]\n        }], ctorParameters: function () { return [{ type: Overlay }, { type: i0.TemplateRef }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]\n                }] }, { type: i5.Directionality, decorators: [{\n                    type: Optional\n                }] }]; }, propDecorators: { origin: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOrigin']\n            }], positions: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPositions']\n            }], positionStrategy: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPositionStrategy']\n            }], offsetX: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOffsetX']\n            }], offsetY: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOffsetY']\n            }], width: [{\n                type: Input,\n                args: ['cdkConnectedOverlayWidth']\n            }], height: [{\n                type: Input,\n                args: ['cdkConnectedOverlayHeight']\n            }], minWidth: [{\n                type: Input,\n                args: ['cdkConnectedOverlayMinWidth']\n            }], minHeight: [{\n                type: Input,\n                args: ['cdkConnectedOverlayMinHeight']\n            }], backdropClass: [{\n                type: Input,\n                args: ['cdkConnectedOverlayBackdropClass']\n            }], panelClass: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPanelClass']\n            }], viewportMargin: [{\n                type: Input,\n                args: ['cdkConnectedOverlayViewportMargin']\n            }], scrollStrategy: [{\n                type: Input,\n                args: ['cdkConnectedOverlayScrollStrategy']\n            }], open: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOpen']\n            }], disableClose: [{\n                type: Input,\n                args: ['cdkConnectedOverlayDisableClose']\n            }], transformOriginSelector: [{\n                type: Input,\n                args: ['cdkConnectedOverlayTransformOriginOn']\n            }], hasBackdrop: [{\n                type: Input,\n                args: ['cdkConnectedOverlayHasBackdrop']\n            }], lockPosition: [{\n                type: Input,\n                args: ['cdkConnectedOverlayLockPosition']\n            }], flexibleDimensions: [{\n                type: Input,\n                args: ['cdkConnectedOverlayFlexibleDimensions']\n            }], growAfterOpen: [{\n                type: Input,\n                args: ['cdkConnectedOverlayGrowAfterOpen']\n            }], push: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPush']\n            }], backdropClick: [{\n                type: Output\n            }], positionChange: [{\n                type: Output\n            }], attach: [{\n                type: Output\n            }], detach: [{\n                type: Output\n            }], overlayKeydown: [{\n                type: Output\n            }], overlayOutsideClick: [{\n                type: Output\n            }] } });\n/** @docs-private */\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n    provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\nclass OverlayModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: OverlayModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.0\", ngImport: i0, type: OverlayModule, imports: [BidiModule, PortalModule, ScrollingModule, CdkConnectedOverlay, CdkOverlayOrigin], exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: OverlayModule, providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER], imports: [BidiModule, PortalModule, ScrollingModule, ScrollingModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: OverlayModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [BidiModule, PortalModule, ScrollingModule, CdkConnectedOverlay, CdkOverlayOrigin],\n                    exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n                    providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\nclass FullscreenOverlayContainer extends OverlayContainer {\n    constructor(_document, platform) {\n        super(_document, platform);\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        if (this._fullScreenEventName && this._fullScreenListener) {\n            this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n        }\n    }\n    _createContainer() {\n        super._createContainer();\n        this._adjustParentForFullscreenChange();\n        this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n    }\n    _adjustParentForFullscreenChange() {\n        if (!this._containerElement) {\n            return;\n        }\n        const fullscreenElement = this.getFullscreenElement();\n        const parent = fullscreenElement || this._document.body;\n        parent.appendChild(this._containerElement);\n    }\n    _addFullscreenChangeListener(fn) {\n        const eventName = this._getEventName();\n        if (eventName) {\n            if (this._fullScreenListener) {\n                this._document.removeEventListener(eventName, this._fullScreenListener);\n            }\n            this._document.addEventListener(eventName, fn);\n            this._fullScreenListener = fn;\n        }\n    }\n    _getEventName() {\n        if (!this._fullScreenEventName) {\n            const _document = this._document;\n            if (_document.fullscreenEnabled) {\n                this._fullScreenEventName = 'fullscreenchange';\n            }\n            else if (_document.webkitFullscreenEnabled) {\n                this._fullScreenEventName = 'webkitfullscreenchange';\n            }\n            else if (_document.mozFullScreenEnabled) {\n                this._fullScreenEventName = 'mozfullscreenchange';\n            }\n            else if (_document.msFullscreenEnabled) {\n                this._fullScreenEventName = 'MSFullscreenChange';\n            }\n        }\n        return this._fullScreenEventName;\n    }\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     */\n    getFullscreenElement() {\n        const _document = this._document;\n        return (_document.fullscreenElement ||\n            _document.webkitFullscreenElement ||\n            _document.mozFullScreenElement ||\n            _document.msFullscreenElement ||\n            null);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: FullscreenOverlayContainer, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: FullscreenOverlayContainer, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: FullscreenOverlayContainer, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i1$1.Platform }]; } });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BlockScrollStrategy, CdkConnectedOverlay, CdkOverlayOrigin, CloseScrollStrategy, ConnectedOverlayPositionChange, ConnectionPositionPair, FlexibleConnectedPositionStrategy, FullscreenOverlayContainer, GlobalPositionStrategy, NoopScrollStrategy, Overlay, OverlayConfig, OverlayContainer, OverlayKeyboardDispatcher, OverlayModule, OverlayOutsideClickDispatcher, OverlayPositionBuilder, OverlayRef, RepositionScrollStrategy, STANDARD_DROPDOWN_ADJACENT_POSITIONS, STANDARD_DROPDOWN_BELOW_POSITIONS, ScrollStrategyOptions, ScrollingVisibility, validateHorizontalPosition, validateVerticalPosition };\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function takeWhile(predicate, inclusive = false) {\n    return operate((source, subscriber) => {\n        let index = 0;\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            const result = predicate(value, index++);\n            (result || inclusive) && subscriber.next(value);\n            !result && subscriber.complete();\n        }));\n    });\n}\n","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import toPropertyKey from \"./toPropertyKey.js\";\nexport default function _defineProperty(obj, key, value) {\n  key = toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}","import superPropBase from \"./superPropBase.js\";\nexport default function _get() {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get.bind();\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n      if (desc.get) {\n        return desc.get.call(arguments.length < 3 ? target : receiver);\n      }\n      return desc.value;\n    };\n  }\n  return _get.apply(this, arguments);\n}","import getPrototypeOf from \"./getPrototypeOf.js\";\nexport default function _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = getPrototypeOf(object);\n    if (object === null) break;\n  }\n  return object;\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import defineProperty from \"./defineProperty.js\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (null != _i) {\n    var _s,\n      _e,\n      _x,\n      _r,\n      _arr = [],\n      _n = !0,\n      _d = !1;\n    try {\n      if (_x = (_i = _i.call(arr)).next, 0 === i) {\n        if (Object(_i) !== _i) return;\n        _n = !1;\n      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);\n    } catch (err) {\n      _d = !0, _e = err;\n    } finally {\n      try {\n        if (!_n && null != _i[\"return\"] && (_r = _i[\"return\"](), Object(_r) !== _r)) return;\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}"],"x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42]}