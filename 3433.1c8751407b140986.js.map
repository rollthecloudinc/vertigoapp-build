{"version":3,"file":"3433.1c8751407b140986.js","mappings":"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","names":["MatLegacyDialogContainer_ng_template_0_Template","rf","ctx","defaultParams","MatLegacyDialogConfig","_MatDialogConfig","_inherits","_super","_createSuper","_this","_classCallCheck","this","apply","arguments","enterAnimationDuration","_defaultParams","exitAnimationDuration","_createClass","MatDialogConfig","MatLegacyDialogContainer","_MatDialogContainerBa","_super2","elementRef","focusTrapFactory","document","dialogConfig","checker","ngZone","overlayRef","_changeDetectorRef","focusMonitor","_this2","call","_state","key","value","_ref","toState","totalTime","_openAnimationDone","_animationStateChanged","next","state","_ref2","markForCheck","params","_config","_MatDialogContainerBase","ɵfac","t","i0","i1","DOCUMENT","i1$1","ɵcmp","type","selectors","hostAttrs","hostVars","hostBindings","$event","_onAnimationStart","_onAnimationDone","id","ariaModal","role","ariaLabel","_ariaLabelledBy","ariaDescribedBy","_getAnimationState","features","decls","vars","consts","template","dependencies","i4","styles","encapsulation","data","animation","matDialogAnimations","MatLegacyDialogRef","_MatDialogRef","_super3","MatDialogRef","MAT_LEGACY_DIALOG_DATA","InjectionToken","MAT_LEGACY_DIALOG_DEFAULT_OPTIONS","MAT_LEGACY_DIALOG_SCROLL_STRATEGY","MAT_LEGACY_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","overlay","scrollStrategies","block","MAT_LEGACY_DIALOG_SCROLL_STRATEGY_PROVIDER","provide","deps","Overlay","useFactory","MatLegacyDialog","_MatDialogBase2","_super4","injector","_location","defaultOptions","scrollStrategy","parentDialog","overlayContainer","animationMode","_this3","dialogConfigClass","_MatDialogBase","i2","ANIMATION_MODULE_TYPE","ɵprov","token","factory","dialogElementUid","MatLegacyDialogClose","dialogRef","_elementRef","_dialog","getClosestDialog","openDialogs","changes","proxiedChange","_matDialogClose","_matDialogCloseResult","dialogResult","currentValue","event","_closeDialogVia","screenX","screenY","ɵdir","_onButtonClick","inputs","exportAs","MatLegacyDialogTitle","_dialogRef","concat","_this4","Promise","resolve","then","container","_containerInstance","MatLegacyDialogContent","MatLegacyDialogActions","align","element","parent","nativeElement","parentElement","classList","contains","find","dialog","MatLegacyDialogModule","ɵmod","ɵinj","providers","imports","DialogModule","OverlayModule","PortalModule","MatCommonModule","_assertThisInitialized","self","ReferenceError","Derived","hasNativeReflectConstruct","isNativeReflectConstruct","Z","result","Super","getPrototypeOf","NewTarget","constructor","Reflect","construct","_possibleConstructorReturn","esm_typeof","TypeError","assertThisInitialized","_getPrototypeOf","o","Object","setPrototypeOf","bind","__proto__","subClass","superClass","prototype","create","writable","configurable","defineProperty","_setPrototypeOf_js__WEBPACK_IMPORTED_MODULE_0__","_isNativeReflectConstruct","sham","Proxy","Boolean","valueOf","_setPrototypeOf","p"],"sourceRoot":"webpack:///","sources":["./node_modules/@angular/material/fesm2022/legacy-dialog.mjs","./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","./node_modules/@babel/runtime/helpers/esm/createSuper.js","./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","./node_modules/@babel/runtime/helpers/esm/inherits.js","./node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js","./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js"],"sourcesContent":["import { DialogModule } from '@angular/cdk/dialog';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport * as i4 from '@angular/cdk/portal';\nimport { PortalModule } from '@angular/cdk/portal';\nimport * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, InjectionToken, Injectable, SkipSelf, Directive, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i2 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport * as i1 from '@angular/cdk/a11y';\nimport { MatDialogConfig, _defaultParams, _MatDialogContainerBase, matDialogAnimations, MatDialogRef, _MatDialogBase, _closeDialogVia } from '@angular/material/dialog';\nexport { MAT_DIALOG_SCROLL_STRATEGY_FACTORY as MAT_LEGACY_DIALOG_SCROLL_STRATEGY_FACTORY, _MatDialogBase as _MatLegacyDialogBase, _MatDialogContainerBase as _MatLegacyDialogContainerBase, _closeDialogVia as _closeLegacyDialogVia, matDialogAnimations as matLegacyDialogAnimations } from '@angular/material/dialog';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * Default parameters for the animation for backwards compatibility.\n * @docs-private\n * @deprecated Use `defaultParams` from `@angular/material/dialog` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nconst defaultParams = {\n    params: { enterAnimationDuration: '150ms', exitAnimationDuration: '75ms' },\n};\n\n/**\n * @deprecated Use `MatDialogConfig` from `@angular/material/dialog` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyDialogConfig extends MatDialogConfig {\n    constructor() {\n        super(...arguments);\n        /** Duration of the enter animation. Has to be a valid CSS value (e.g. 100ms). */\n        this.enterAnimationDuration = _defaultParams.params.enterAnimationDuration;\n        /** Duration of the exit animation. Has to be a valid CSS value (e.g. 50ms). */\n        this.exitAnimationDuration = _defaultParams.params.exitAnimationDuration;\n    }\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n * @deprecated Use `MatDialogContainer` from `@angular/material/dialog` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyDialogContainer extends _MatDialogContainerBase {\n    /** Callback, invoked whenever an animation on the host completes. */\n    _onAnimationDone({ toState, totalTime }) {\n        if (toState === 'enter') {\n            this._openAnimationDone(totalTime);\n        }\n        else if (toState === 'exit') {\n            this._animationStateChanged.next({ state: 'closed', totalTime });\n        }\n    }\n    /** Callback, invoked when an animation on the host starts. */\n    _onAnimationStart({ toState, totalTime }) {\n        if (toState === 'enter') {\n            this._animationStateChanged.next({ state: 'opening', totalTime });\n        }\n        else if (toState === 'exit' || toState === 'void') {\n            this._animationStateChanged.next({ state: 'closing', totalTime });\n        }\n    }\n    /** Starts the dialog exit animation. */\n    _startExitAnimation() {\n        this._state = 'exit';\n        // Mark the container for check so it can react if the\n        // view container is using OnPush change detection.\n        this._changeDetectorRef.markForCheck();\n    }\n    constructor(elementRef, focusTrapFactory, document, dialogConfig, checker, ngZone, overlayRef, _changeDetectorRef, focusMonitor) {\n        super(elementRef, focusTrapFactory, document, dialogConfig, checker, ngZone, overlayRef, focusMonitor);\n        this._changeDetectorRef = _changeDetectorRef;\n        /** State of the dialog animation. */\n        this._state = 'enter';\n    }\n    _getAnimationState() {\n        return {\n            value: this._state,\n            params: {\n                'enterAnimationDuration': this._config.enterAnimationDuration || defaultParams.params.enterAnimationDuration,\n                'exitAnimationDuration': this._config.exitAnimationDuration || defaultParams.params.exitAnimationDuration,\n            },\n        };\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatLegacyDialogContainer, deps: [{ token: i0.ElementRef }, { token: i1.FocusTrapFactory }, { token: DOCUMENT, optional: true }, { token: MatLegacyDialogConfig }, { token: i1.InteractivityChecker }, { token: i0.NgZone }, { token: i1$1.OverlayRef }, { token: i0.ChangeDetectorRef }, { token: i1.FocusMonitor }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.0\", type: MatLegacyDialogContainer, selector: \"mat-dialog-container\", host: { attributes: { \"tabindex\": \"-1\" }, listeners: { \"@dialogContainer.start\": \"_onAnimationStart($event)\", \"@dialogContainer.done\": \"_onAnimationDone($event)\" }, properties: { \"attr.aria-modal\": \"_config.ariaModal\", \"id\": \"_config.id\", \"attr.role\": \"_config.role\", \"attr.aria-labelledby\": \"_config.ariaLabel ? null : _ariaLabelledBy\", \"attr.aria-label\": \"_config.ariaLabel\", \"attr.aria-describedby\": \"_config.ariaDescribedBy || null\", \"@dialogContainer\": \"_getAnimationState()\" }, classAttribute: \"mat-dialog-container\" }, usesInheritance: true, ngImport: i0, template: \"<ng-template cdkPortalOutlet></ng-template>\\n\", styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;box-sizing:content-box;margin-bottom:-24px}.mat-dialog-actions.mat-dialog-actions-align-center,.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions.mat-dialog-actions-align-end,.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\"], dependencies: [{ kind: \"directive\", type: i4.CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], animations: [matDialogAnimations.dialogContainer], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatLegacyDialogContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-dialog-container', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, animations: [matDialogAnimations.dialogContainer], host: {\n                        'class': 'mat-dialog-container',\n                        'tabindex': '-1',\n                        '[attr.aria-modal]': '_config.ariaModal',\n                        '[id]': '_config.id',\n                        '[attr.role]': '_config.role',\n                        '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n                        '[attr.aria-label]': '_config.ariaLabel',\n                        '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n                        '[@dialogContainer]': `_getAnimationState()`,\n                        '(@dialogContainer.start)': '_onAnimationStart($event)',\n                        '(@dialogContainer.done)': '_onAnimationDone($event)',\n                    }, template: \"<ng-template cdkPortalOutlet></ng-template>\\n\", styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;box-sizing:content-box;margin-bottom:-24px}.mat-dialog-actions.mat-dialog-actions-align-center,.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions.mat-dialog-actions-align-end,.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.FocusTrapFactory }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: MatLegacyDialogConfig }, { type: i1.InteractivityChecker }, { type: i0.NgZone }, { type: i1$1.OverlayRef }, { type: i0.ChangeDetectorRef }, { type: i1.FocusMonitor }]; } });\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n * @deprecated Use `MatDialogRef` from `@angular/material/dialog` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyDialogRef extends MatDialogRef {\n}\n\n/**\n * Injection token that can be used to access the data that was passed in to a dialog.\n * @deprecated Use `MAT_DIALOG_DATA` from `@angular/material/dialog` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nconst MAT_LEGACY_DIALOG_DATA = new InjectionToken('MatDialogData');\n/**\n * Injection token that can be used to specify default dialog options.\n * @deprecated Use `MAT_DIALOG_DEFAULT_OPTIONS` from `@angular/material/dialog` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nconst MAT_LEGACY_DIALOG_DEFAULT_OPTIONS = new InjectionToken('mat-dialog-default-options');\n/**\n * Injection token that determines the scroll handling while the dialog is open.\n * @deprecated Use `MAT_DIALOG_SCROLL_STRATEGY` from `@angular/material/dialog` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nconst MAT_LEGACY_DIALOG_SCROLL_STRATEGY = new InjectionToken('mat-dialog-scroll-strategy');\n/**\n * @docs-private\n * @deprecated Use `MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY` from `@angular/material/dialog` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nfunction MAT_LEGACY_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.block();\n}\n/**\n * @docs-private\n * @deprecated Use `MAT_DIALOG_SCROLL_STRATEGY_PROVIDER` from `@angular/material/dialog` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nconst MAT_LEGACY_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_LEGACY_DIALOG_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_LEGACY_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Service to open Material Design modal dialogs.\n * @deprecated Use `MatDialog` from `@angular/material/dialog` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyDialog extends _MatDialogBase {\n    constructor(overlay, injector, \n    /**\n     * @deprecated `_location` parameter to be removed.\n     * @breaking-change 10.0.0\n     */\n    _location, defaultOptions, scrollStrategy, parentDialog, \n    /**\n     * @deprecated No longer used. To be removed.\n     * @breaking-change 15.0.0\n     */\n    overlayContainer, \n    /**\n     * @deprecated No longer used. To be removed.\n     * @breaking-change 14.0.0\n     */\n    animationMode) {\n        super(overlay, injector, defaultOptions, parentDialog, overlayContainer, scrollStrategy, MatLegacyDialogRef, MatLegacyDialogContainer, MAT_LEGACY_DIALOG_DATA, animationMode);\n        this.dialogConfigClass = MatLegacyDialogConfig;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatLegacyDialog, deps: [{ token: i1$1.Overlay }, { token: i0.Injector }, { token: i2.Location, optional: true }, { token: MAT_LEGACY_DIALOG_DEFAULT_OPTIONS, optional: true }, { token: MAT_LEGACY_DIALOG_SCROLL_STRATEGY }, { token: MatLegacyDialog, optional: true, skipSelf: true }, { token: i1$1.OverlayContainer }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatLegacyDialog }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatLegacyDialog, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1$1.Overlay }, { type: i0.Injector }, { type: i2.Location, decorators: [{\n                    type: Optional\n                }] }, { type: MatLegacyDialogConfig, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_LEGACY_DIALOG_DEFAULT_OPTIONS]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_LEGACY_DIALOG_SCROLL_STRATEGY]\n                }] }, { type: MatLegacyDialog, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: i1$1.OverlayContainer }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }]; } });\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n * @deprecated Use `MatDialogClose` from `@angular/material/dialog` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyDialogClose {\n    constructor(\n    /**\n     * Reference to the containing dialog.\n     * @deprecated `dialogRef` property to become private.\n     * @breaking-change 13.0.0\n     */\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    dialogRef, _elementRef, _dialog) {\n        this.dialogRef = dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n        /** Default to \"button\" to prevents accidental form submits. */\n        this.type = 'button';\n    }\n    ngOnInit() {\n        if (!this.dialogRef) {\n            // When this directive is included in a dialog via TemplateRef (rather than being\n            // in a Component), the DialogRef isn't available via injection because embedded\n            // views cannot be given a custom injector. Instead, we look up the DialogRef by\n            // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n            // be resolved at constructor time.\n            this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n        }\n    }\n    ngOnChanges(changes) {\n        const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n        if (proxiedChange) {\n            this.dialogResult = proxiedChange.currentValue;\n        }\n    }\n    _onButtonClick(event) {\n        // Determinate the focus origin using the click event, because using the FocusMonitor will\n        // result in incorrect origins. Most of the time, close buttons will be auto focused in the\n        // dialog, and therefore clicking the button won't result in a focus change. This means that\n        // the FocusMonitor won't detect any origin change, and will always output `program`.\n        _closeDialogVia(this.dialogRef, event.screenX === 0 && event.screenY === 0 ? 'keyboard' : 'mouse', this.dialogResult);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatLegacyDialogClose, deps: [{ token: MatLegacyDialogRef, optional: true }, { token: i0.ElementRef }, { token: MatLegacyDialog }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: MatLegacyDialogClose, selector: \"[mat-dialog-close], [matDialogClose]\", inputs: { ariaLabel: [\"aria-label\", \"ariaLabel\"], type: \"type\", dialogResult: [\"mat-dialog-close\", \"dialogResult\"], _matDialogClose: [\"matDialogClose\", \"_matDialogClose\"] }, host: { listeners: { \"click\": \"_onButtonClick($event)\" }, properties: { \"attr.aria-label\": \"ariaLabel || null\", \"attr.type\": \"type\" } }, exportAs: [\"matDialogClose\"], usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatLegacyDialogClose, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[mat-dialog-close], [matDialogClose]',\n                    exportAs: 'matDialogClose',\n                    host: {\n                        '(click)': '_onButtonClick($event)',\n                        '[attr.aria-label]': 'ariaLabel || null',\n                        '[attr.type]': 'type',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: MatLegacyDialogRef, decorators: [{\n                    type: Optional\n                }] }, { type: i0.ElementRef }, { type: MatLegacyDialog }]; }, propDecorators: { ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], type: [{\n                type: Input\n            }], dialogResult: [{\n                type: Input,\n                args: ['mat-dialog-close']\n            }], _matDialogClose: [{\n                type: Input,\n                args: ['matDialogClose']\n            }] } });\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n * @deprecated Use `MatDialogTitle` from `@angular/material/dialog` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyDialogTitle {\n    constructor(\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    _dialogRef, _elementRef, _dialog) {\n        this._dialogRef = _dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n        /** Unique id for the dialog title. If none is supplied, it will be auto-generated. */\n        this.id = `mat-dialog-title-${dialogElementUid++}`;\n    }\n    ngOnInit() {\n        if (!this._dialogRef) {\n            this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n        }\n        if (this._dialogRef) {\n            Promise.resolve().then(() => {\n                const container = this._dialogRef._containerInstance;\n                if (container && !container._ariaLabelledBy) {\n                    container._ariaLabelledBy = this.id;\n                }\n            });\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatLegacyDialogTitle, deps: [{ token: MatLegacyDialogRef, optional: true }, { token: i0.ElementRef }, { token: MatLegacyDialog }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: MatLegacyDialogTitle, selector: \"[mat-dialog-title], [matDialogTitle]\", inputs: { id: \"id\" }, host: { properties: { \"id\": \"id\" }, classAttribute: \"mat-dialog-title\" }, exportAs: [\"matDialogTitle\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatLegacyDialogTitle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[mat-dialog-title], [matDialogTitle]',\n                    exportAs: 'matDialogTitle',\n                    host: {\n                        'class': 'mat-dialog-title',\n                        '[id]': 'id',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: MatLegacyDialogRef, decorators: [{\n                    type: Optional\n                }] }, { type: i0.ElementRef }, { type: MatLegacyDialog }]; }, propDecorators: { id: [{\n                type: Input\n            }] } });\n/**\n * Scrollable content container of a dialog.\n * @deprecated Use `MatDialogContent` from `@angular/material/dialog` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyDialogContent {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatLegacyDialogContent, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: MatLegacyDialogContent, selector: \"[mat-dialog-content], mat-dialog-content, [matDialogContent]\", host: { classAttribute: \"mat-dialog-content\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatLegacyDialogContent, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n                    host: { 'class': 'mat-dialog-content' },\n                }]\n        }] });\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n * @deprecated Use `MatDialogActions` from `@angular/material/dialog` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyDialogActions {\n    constructor() {\n        /**\n         * Horizontal alignment of action buttons.\n         */\n        this.align = 'start';\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatLegacyDialogActions, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: MatLegacyDialogActions, selector: \"[mat-dialog-actions], mat-dialog-actions, [matDialogActions]\", inputs: { align: \"align\" }, host: { properties: { \"class.mat-dialog-actions-align-center\": \"align === \\\"center\\\"\", \"class.mat-dialog-actions-align-end\": \"align === \\\"end\\\"\" }, classAttribute: \"mat-dialog-actions\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatLegacyDialogActions, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n                    host: {\n                        'class': 'mat-dialog-actions',\n                        '[class.mat-dialog-actions-align-center]': 'align === \"center\"',\n                        '[class.mat-dialog-actions-align-end]': 'align === \"end\"',\n                    },\n                }]\n        }], propDecorators: { align: [{\n                type: Input\n            }] } });\n// TODO(crisbeto): this utility shouldn't be necessary anymore, because the dialog ref is provided\n// both to component and template dialogs through DI. We need to keep it around, because there are\n// some internal wrappers around `MatDialog` that happened to work by accident, because we had this\n// fallback logic in place.\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element, openDialogs) {\n    let parent = element.nativeElement.parentElement;\n    while (parent && !parent.classList.contains('mat-dialog-container')) {\n        parent = parent.parentElement;\n    }\n    return parent ? openDialogs.find(dialog => dialog.id === parent.id) : null;\n}\n\n/**\n * @deprecated Use `MatDialogModule` from `@angular/material/dialog` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyDialogModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatLegacyDialogModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.0\", ngImport: i0, type: MatLegacyDialogModule, declarations: [MatLegacyDialogContainer,\n            MatLegacyDialogClose,\n            MatLegacyDialogTitle,\n            MatLegacyDialogActions,\n            MatLegacyDialogContent], imports: [DialogModule, OverlayModule, PortalModule, MatCommonModule], exports: [MatLegacyDialogContainer,\n            MatLegacyDialogClose,\n            MatLegacyDialogTitle,\n            MatLegacyDialogContent,\n            MatLegacyDialogActions,\n            MatCommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatLegacyDialogModule, providers: [MatLegacyDialog, MAT_LEGACY_DIALOG_SCROLL_STRATEGY_PROVIDER], imports: [DialogModule, OverlayModule, PortalModule, MatCommonModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatLegacyDialogModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [DialogModule, OverlayModule, PortalModule, MatCommonModule],\n                    exports: [\n                        MatLegacyDialogContainer,\n                        MatLegacyDialogClose,\n                        MatLegacyDialogTitle,\n                        MatLegacyDialogContent,\n                        MatLegacyDialogActions,\n                        MatCommonModule,\n                    ],\n                    declarations: [\n                        MatLegacyDialogContainer,\n                        MatLegacyDialogClose,\n                        MatLegacyDialogTitle,\n                        MatLegacyDialogActions,\n                        MatLegacyDialogContent,\n                    ],\n                    providers: [MatLegacyDialog, MAT_LEGACY_DIALOG_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_LEGACY_DIALOG_DATA, MAT_LEGACY_DIALOG_DEFAULT_OPTIONS, MAT_LEGACY_DIALOG_SCROLL_STRATEGY, MAT_LEGACY_DIALOG_SCROLL_STRATEGY_PROVIDER, MAT_LEGACY_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MatLegacyDialog, MatLegacyDialogActions, MatLegacyDialogClose, MatLegacyDialogConfig, MatLegacyDialogContainer, MatLegacyDialogContent, MatLegacyDialogModule, MatLegacyDialogRef, MatLegacyDialogTitle };\n","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}","import getPrototypeOf from \"./getPrototypeOf.js\";\nimport isNativeReflectConstruct from \"./isNativeReflectConstruct.js\";\nimport possibleConstructorReturn from \"./possibleConstructorReturn.js\";\nexport default function _createSuper(Derived) {\n  var hasNativeReflectConstruct = isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return possibleConstructorReturn(this, result);\n  };\n}","import _typeof from \"./typeof.js\";\nimport assertThisInitialized from \"./assertThisInitialized.js\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return assertThisInitialized(self);\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","export default function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}"],"x_google_ignoreList":[0,1,2,3,4,5,6,7]}