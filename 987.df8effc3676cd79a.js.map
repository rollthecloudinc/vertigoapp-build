{"version":3,"mappings":"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","names":["project","resultSelector","isFunction","mergeMap","constructor","headers","this","normalizedNames","Map","lazyUpdate","lazyInit","split","forEach","line","index","indexOf","name","slice","key","toLowerCase","value","trim","maybeSetNormalizedName","has","get","push","set","Object","keys","values","length","init","Array","from","getAll","append","clone","op","delete","lcName","HttpHeaders","copyFrom","update","applyUpdate","other","concat","base","undefined","toDelete","existing","filter","a","fn","encodeKey","standardEncoding","encodeValue","decodeKey","decodeURIComponent","decodeValue","STANDARD_ENCODING_REGEX","STANDARD_ENCODING_REPLACEMENTS","v","encodeURIComponent","replace","s","t","options","updates","cloneFrom","encoder","HttpUrlEncodingCodec","fromString","fromObject","Error","map","rawParams","codec","param","eqIdx","val","list","paramParser","isArray","res","appendAll","params","_value","toString","eKey","join","HttpParams","valueToString","idx","splice","r","defaultValue","token","ArrayBuffer","Blob","FormData","method","url","third","fourth","body","reportProgress","withCredentials","responseType","toUpperCase","ce","context","HttpContext","urlWithParams","qIdx","serializeBody","isArrayBuffer","isBlob","isFormData","URLSearchParams","isUrlSearchParams","JSON","stringify","detectContentTypeHeader","type","setHeaders","reduce","setParams","HttpRequest","HttpEventType","Sent","UploadProgress","ResponseHeader","DownloadProgress","Response","User","defaultStatus","defaultStatusText","status","statusText","ok","HttpResponseBase","super","HttpHeaderResponse","HttpResponse","message","error","observe","HttpClient","handler","request","first","req","events$","of","pipe","concatMap","handle","res$","event","head","jsonp","callbackParam","patch","addBody","post","put","ɵfac","i0","HttpHandler","ɵprov","factory","next","interceptor","intercept","HTTP_INTERCEPTORS","InjectionToken","NoopInterceptor","nextRequestId","JsonpClientBackend","callbackMap","document","resolvedPromise","Promise","resolve","nextCallback","Observable","observer","callback","node","createElement","src","finished","cancelled","data","cleanup","parentNode","removeChild","onLoad","then","complete","HttpErrorResponse","onError","addEventListener","appendChild","removeEventListener","JsonpCallbackContext","DOCUMENT","JsonpInterceptor","XSSI_PREFIX","HttpXhrBackend","xhrFactory","xhr","build","open","setRequestHeader","detectedType","reqBody","headerResponse","partialFromXhr","getAllResponseHeaders","responseURL","test","getResponseHeader","getResponseUrl","response","responseText","originalBody","parse","text","sentHeaders","onDownProgress","progressEvent","loaded","lengthComputable","total","partialText","onUpProgress","progress","upload","send","readyState","DONE","abort","i1","XSRF_COOKIE_NAME","XSRF_HEADER_NAME","HttpXsrfCookieExtractor","doc","platform","cookieName","lastCookieString","lastToken","parseCount","getToken","cookieString","cookie","ɵparseCookieValue","PLATFORM_ID","HttpXsrfInterceptor","tokenService","headerName","lcUrl","startsWith","HttpXsrfTokenExtractor","HttpInterceptingHandler","backend","injector","chain","interceptors","reduceRight","HttpInterceptorHandler","HttpBackend","window","HttpClientXsrfModule","static","ngModule","providers","provide","useClass","useValue","ɵmod","ɵinj","useExisting","multi","HttpClientModule","imports","withOptions","HttpClientJsonpModule","useFactory","jsonpCallbackContext","XhrFactory","XhrFactory$1"],"sources":["./node_modules/rxjs/dist/esm/internal/operators/concatMap.js","./node_modules/@angular/common/fesm2020/http.mjs"],"sourcesContent":["import { mergeMap } from './mergeMap';\nimport { isFunction } from '../util/isFunction';\nexport function concatMap(project, resultSelector) {\n    return isFunction(resultSelector) ? mergeMap(project, resultSelector, 1) : mergeMap(project, 1);\n}\n","/**\n * @license Angular v13.1.3\n * (c) 2010-2022 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport * as i1 from '@angular/common';\nimport { DOCUMENT, ɵparseCookieValue, XhrFactory as XhrFactory$1 } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, Inject, PLATFORM_ID, NgModule } from '@angular/core';\nimport { of, Observable } from 'rxjs';\nimport { concatMap, filter, map } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * @publicApi\n */\nclass HttpHandler {\n}\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * @publicApi\n */\nclass HttpBackend {\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Represents the header configuration options for an HTTP request.\n * Instances are immutable. Modifying methods return a cloned\n * instance with the change. The original object is never changed.\n *\n * @publicApi\n */\nclass HttpHeaders {\n    /**  Constructs a new HTTP header object with the given values.*/\n    constructor(headers) {\n        /**\n         * Internal map of lowercased header names to the normalized\n         * form of the name (the form seen first).\n         */\n        this.normalizedNames = new Map();\n        /**\n         * Queued updates to be materialized the next initialization.\n         */\n        this.lazyUpdate = null;\n        if (!headers) {\n            this.headers = new Map();\n        }\n        else if (typeof headers === 'string') {\n            this.lazyInit = () => {\n                this.headers = new Map();\n                headers.split('\\n').forEach(line => {\n                    const index = line.indexOf(':');\n                    if (index > 0) {\n                        const name = line.slice(0, index);\n                        const key = name.toLowerCase();\n                        const value = line.slice(index + 1).trim();\n                        this.maybeSetNormalizedName(name, key);\n                        if (this.headers.has(key)) {\n                            this.headers.get(key).push(value);\n                        }\n                        else {\n                            this.headers.set(key, [value]);\n                        }\n                    }\n                });\n            };\n        }\n        else {\n            this.lazyInit = () => {\n                this.headers = new Map();\n                Object.keys(headers).forEach(name => {\n                    let values = headers[name];\n                    const key = name.toLowerCase();\n                    if (typeof values === 'string') {\n                        values = [values];\n                    }\n                    if (values.length > 0) {\n                        this.headers.set(key, values);\n                        this.maybeSetNormalizedName(name, key);\n                    }\n                });\n            };\n        }\n    }\n    /**\n     * Checks for existence of a given header.\n     *\n     * @param name The header name to check for existence.\n     *\n     * @returns True if the header exists, false otherwise.\n     */\n    has(name) {\n        this.init();\n        return this.headers.has(name.toLowerCase());\n    }\n    /**\n     * Retrieves the first value of a given header.\n     *\n     * @param name The header name.\n     *\n     * @returns The value string if the header exists, null otherwise\n     */\n    get(name) {\n        this.init();\n        const values = this.headers.get(name.toLowerCase());\n        return values && values.length > 0 ? values[0] : null;\n    }\n    /**\n     * Retrieves the names of the headers.\n     *\n     * @returns A list of header names.\n     */\n    keys() {\n        this.init();\n        return Array.from(this.normalizedNames.values());\n    }\n    /**\n     * Retrieves a list of values for a given header.\n     *\n     * @param name The header name from which to retrieve values.\n     *\n     * @returns A string of values if the header exists, null otherwise.\n     */\n    getAll(name) {\n        this.init();\n        return this.headers.get(name.toLowerCase()) || null;\n    }\n    /**\n     * Appends a new value to the existing set of values for a header\n     * and returns them in a clone of the original instance.\n     *\n     * @param name The header name for which to append the values.\n     * @param value The value to append.\n     *\n     * @returns A clone of the HTTP headers object with the value appended to the given header.\n     */\n    append(name, value) {\n        return this.clone({ name, value, op: 'a' });\n    }\n    /**\n     * Sets or modifies a value for a given header in a clone of the original instance.\n     * If the header already exists, its value is replaced with the given value\n     * in the returned object.\n     *\n     * @param name The header name.\n     * @param value The value or values to set or overide for the given header.\n     *\n     * @returns A clone of the HTTP headers object with the newly set header value.\n     */\n    set(name, value) {\n        return this.clone({ name, value, op: 's' });\n    }\n    /**\n     * Deletes values for a given header in a clone of the original instance.\n     *\n     * @param name The header name.\n     * @param value The value or values to delete for the given header.\n     *\n     * @returns A clone of the HTTP headers object with the given value deleted.\n     */\n    delete(name, value) {\n        return this.clone({ name, value, op: 'd' });\n    }\n    maybeSetNormalizedName(name, lcName) {\n        if (!this.normalizedNames.has(lcName)) {\n            this.normalizedNames.set(lcName, name);\n        }\n    }\n    init() {\n        if (!!this.lazyInit) {\n            if (this.lazyInit instanceof HttpHeaders) {\n                this.copyFrom(this.lazyInit);\n            }\n            else {\n                this.lazyInit();\n            }\n            this.lazyInit = null;\n            if (!!this.lazyUpdate) {\n                this.lazyUpdate.forEach(update => this.applyUpdate(update));\n                this.lazyUpdate = null;\n            }\n        }\n    }\n    copyFrom(other) {\n        other.init();\n        Array.from(other.headers.keys()).forEach(key => {\n            this.headers.set(key, other.headers.get(key));\n            this.normalizedNames.set(key, other.normalizedNames.get(key));\n        });\n    }\n    clone(update) {\n        const clone = new HttpHeaders();\n        clone.lazyInit =\n            (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\n        clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n        return clone;\n    }\n    applyUpdate(update) {\n        const key = update.name.toLowerCase();\n        switch (update.op) {\n            case 'a':\n            case 's':\n                let value = update.value;\n                if (typeof value === 'string') {\n                    value = [value];\n                }\n                if (value.length === 0) {\n                    return;\n                }\n                this.maybeSetNormalizedName(update.name, key);\n                const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n                base.push(...value);\n                this.headers.set(key, base);\n                break;\n            case 'd':\n                const toDelete = update.value;\n                if (!toDelete) {\n                    this.headers.delete(key);\n                    this.normalizedNames.delete(key);\n                }\n                else {\n                    let existing = this.headers.get(key);\n                    if (!existing) {\n                        return;\n                    }\n                    existing = existing.filter(value => toDelete.indexOf(value) === -1);\n                    if (existing.length === 0) {\n                        this.headers.delete(key);\n                        this.normalizedNames.delete(key);\n                    }\n                    else {\n                        this.headers.set(key, existing);\n                    }\n                }\n                break;\n        }\n    }\n    /**\n     * @internal\n     */\n    forEach(fn) {\n        this.init();\n        Array.from(this.normalizedNames.keys())\n            .forEach(key => fn(this.normalizedNames.get(key), this.headers.get(key)));\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Provides encoding and decoding of URL parameter and query-string values.\n *\n * Serializes and parses URL parameter keys and values to encode and decode them.\n * If you pass URL query parameters without encoding,\n * the query parameters can be misinterpreted at the receiving end.\n *\n *\n * @publicApi\n */\nclass HttpUrlEncodingCodec {\n    /**\n     * Encodes a key name for a URL parameter or query-string.\n     * @param key The key name.\n     * @returns The encoded key name.\n     */\n    encodeKey(key) {\n        return standardEncoding(key);\n    }\n    /**\n     * Encodes the value of a URL parameter or query-string.\n     * @param value The value.\n     * @returns The encoded value.\n     */\n    encodeValue(value) {\n        return standardEncoding(value);\n    }\n    /**\n     * Decodes an encoded URL parameter or query-string key.\n     * @param key The encoded key name.\n     * @returns The decoded key name.\n     */\n    decodeKey(key) {\n        return decodeURIComponent(key);\n    }\n    /**\n     * Decodes an encoded URL parameter or query-string value.\n     * @param value The encoded value.\n     * @returns The decoded value.\n     */\n    decodeValue(value) {\n        return decodeURIComponent(value);\n    }\n}\nfunction paramParser(rawParams, codec) {\n    const map = new Map();\n    if (rawParams.length > 0) {\n        // The `window.location.search` can be used while creating an instance of the `HttpParams` class\n        // (e.g. `new HttpParams({ fromString: window.location.search })`). The `window.location.search`\n        // may start with the `?` char, so we strip it if it's present.\n        const params = rawParams.replace(/^\\?/, '').split('&');\n        params.forEach((param) => {\n            const eqIdx = param.indexOf('=');\n            const [key, val] = eqIdx == -1 ?\n                [codec.decodeKey(param), ''] :\n                [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\n            const list = map.get(key) || [];\n            list.push(val);\n            map.set(key, list);\n        });\n    }\n    return map;\n}\n/**\n * Encode input string with standard encodeURIComponent and then un-encode specific characters.\n */\nconst STANDARD_ENCODING_REGEX = /%(\\d[a-f0-9])/gi;\nconst STANDARD_ENCODING_REPLACEMENTS = {\n    '40': '@',\n    '3A': ':',\n    '24': '$',\n    '2C': ',',\n    '3B': ';',\n    '2B': '+',\n    '3D': '=',\n    '3F': '?',\n    '2F': '/',\n};\nfunction standardEncoding(v) {\n    return encodeURIComponent(v).replace(STANDARD_ENCODING_REGEX, (s, t) => STANDARD_ENCODING_REPLACEMENTS[t] ?? s);\n}\nfunction valueToString(value) {\n    return `${value}`;\n}\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable; all mutation operations return a new instance.\n *\n * @publicApi\n */\nclass HttpParams {\n    constructor(options = {}) {\n        this.updates = null;\n        this.cloneFrom = null;\n        this.encoder = options.encoder || new HttpUrlEncodingCodec();\n        if (!!options.fromString) {\n            if (!!options.fromObject) {\n                throw new Error(`Cannot specify both fromString and fromObject.`);\n            }\n            this.map = paramParser(options.fromString, this.encoder);\n        }\n        else if (!!options.fromObject) {\n            this.map = new Map();\n            Object.keys(options.fromObject).forEach(key => {\n                const value = options.fromObject[key];\n                this.map.set(key, Array.isArray(value) ? value : [value]);\n            });\n        }\n        else {\n            this.map = null;\n        }\n    }\n    /**\n     * Reports whether the body includes one or more values for a given parameter.\n     * @param param The parameter name.\n     * @returns True if the parameter has one or more values,\n     * false if it has no value or is not present.\n     */\n    has(param) {\n        this.init();\n        return this.map.has(param);\n    }\n    /**\n     * Retrieves the first value for a parameter.\n     * @param param The parameter name.\n     * @returns The first value of the given parameter,\n     * or `null` if the parameter is not present.\n     */\n    get(param) {\n        this.init();\n        const res = this.map.get(param);\n        return !!res ? res[0] : null;\n    }\n    /**\n     * Retrieves all values for a  parameter.\n     * @param param The parameter name.\n     * @returns All values in a string array,\n     * or `null` if the parameter not present.\n     */\n    getAll(param) {\n        this.init();\n        return this.map.get(param) || null;\n    }\n    /**\n     * Retrieves all the parameters for this body.\n     * @returns The parameter names in a string array.\n     */\n    keys() {\n        this.init();\n        return Array.from(this.map.keys());\n    }\n    /**\n     * Appends a new value to existing values for a parameter.\n     * @param param The parameter name.\n     * @param value The new value to add.\n     * @return A new body with the appended value.\n     */\n    append(param, value) {\n        return this.clone({ param, value, op: 'a' });\n    }\n    /**\n     * Constructs a new body with appended values for the given parameter name.\n     * @param params parameters and values\n     * @return A new body with the new value.\n     */\n    appendAll(params) {\n        const updates = [];\n        Object.keys(params).forEach(param => {\n            const value = params[param];\n            if (Array.isArray(value)) {\n                value.forEach(_value => {\n                    updates.push({ param, value: _value, op: 'a' });\n                });\n            }\n            else {\n                updates.push({ param, value: value, op: 'a' });\n            }\n        });\n        return this.clone(updates);\n    }\n    /**\n     * Replaces the value for a parameter.\n     * @param param The parameter name.\n     * @param value The new value.\n     * @return A new body with the new value.\n     */\n    set(param, value) {\n        return this.clone({ param, value, op: 's' });\n    }\n    /**\n     * Removes a given value or all values from a parameter.\n     * @param param The parameter name.\n     * @param value The value to remove, if provided.\n     * @return A new body with the given value removed, or with all values\n     * removed if no value is specified.\n     */\n    delete(param, value) {\n        return this.clone({ param, value, op: 'd' });\n    }\n    /**\n     * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     */\n    toString() {\n        this.init();\n        return this.keys()\n            .map(key => {\n            const eKey = this.encoder.encodeKey(key);\n            // `a: ['1']` produces `'a=1'`\n            // `b: []` produces `''`\n            // `c: ['1', '2']` produces `'c=1&c=2'`\n            return this.map.get(key).map(value => eKey + '=' + this.encoder.encodeValue(value))\n                .join('&');\n        })\n            // filter out empty values because `b: []` produces `''`\n            // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't\n            .filter(param => param !== '')\n            .join('&');\n    }\n    clone(update) {\n        const clone = new HttpParams({ encoder: this.encoder });\n        clone.cloneFrom = this.cloneFrom || this;\n        clone.updates = (this.updates || []).concat(update);\n        return clone;\n    }\n    init() {\n        if (this.map === null) {\n            this.map = new Map();\n        }\n        if (this.cloneFrom !== null) {\n            this.cloneFrom.init();\n            this.cloneFrom.keys().forEach(key => this.map.set(key, this.cloneFrom.map.get(key)));\n            this.updates.forEach(update => {\n                switch (update.op) {\n                    case 'a':\n                    case 's':\n                        const base = (update.op === 'a' ? this.map.get(update.param) : undefined) || [];\n                        base.push(valueToString(update.value));\n                        this.map.set(update.param, base);\n                        break;\n                    case 'd':\n                        if (update.value !== undefined) {\n                            let base = this.map.get(update.param) || [];\n                            const idx = base.indexOf(valueToString(update.value));\n                            if (idx !== -1) {\n                                base.splice(idx, 1);\n                            }\n                            if (base.length > 0) {\n                                this.map.set(update.param, base);\n                            }\n                            else {\n                                this.map.delete(update.param);\n                            }\n                        }\n                        else {\n                            this.map.delete(update.param);\n                            break;\n                        }\n                }\n            });\n            this.cloneFrom = this.updates = null;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A token used to manipulate and access values stored in `HttpContext`.\n *\n * @publicApi\n */\nclass HttpContextToken {\n    constructor(defaultValue) {\n        this.defaultValue = defaultValue;\n    }\n}\n/**\n * Http context stores arbitrary user defined values and ensures type safety without\n * actually knowing the types. It is backed by a `Map` and guarantees that keys do not clash.\n *\n * This context is mutable and is shared between cloned requests unless explicitly specified.\n *\n * @usageNotes\n *\n * ### Usage Example\n *\n * ```typescript\n * // inside cache.interceptors.ts\n * export const IS_CACHE_ENABLED = new HttpContextToken<boolean>(() => false);\n *\n * export class CacheInterceptor implements HttpInterceptor {\n *\n *   intercept(req: HttpRequest<any>, delegate: HttpHandler): Observable<HttpEvent<any>> {\n *     if (req.context.get(IS_CACHE_ENABLED) === true) {\n *       return ...;\n *     }\n *     return delegate.handle(req);\n *   }\n * }\n *\n * // inside a service\n *\n * this.httpClient.get('/api/weather', {\n *   context: new HttpContext().set(IS_CACHE_ENABLED, true)\n * }).subscribe(...);\n * ```\n *\n * @publicApi\n */\nclass HttpContext {\n    constructor() {\n        this.map = new Map();\n    }\n    /**\n     * Store a value in the context. If a value is already present it will be overwritten.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     * @param value The value to store.\n     *\n     * @returns A reference to itself for easy chaining.\n     */\n    set(token, value) {\n        this.map.set(token, value);\n        return this;\n    }\n    /**\n     * Retrieve the value associated with the given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns The stored value or default if one is defined.\n     */\n    get(token) {\n        if (!this.map.has(token)) {\n            this.map.set(token, token.defaultValue());\n        }\n        return this.map.get(token);\n    }\n    /**\n     * Delete the value associated with the given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns A reference to itself for easy chaining.\n     */\n    delete(token) {\n        this.map.delete(token);\n        return this;\n    }\n    /**\n     * Checks for existence of a given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns True if the token exists, false otherwise.\n     */\n    has(token) {\n        return this.map.has(token);\n    }\n    /**\n     * @returns a list of tokens currently stored in the context.\n     */\n    keys() {\n        return this.map.keys();\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Determine whether the given HTTP method may include a body.\n */\nfunction mightHaveBody(method) {\n    switch (method) {\n        case 'DELETE':\n        case 'GET':\n        case 'HEAD':\n        case 'OPTIONS':\n        case 'JSONP':\n            return false;\n        default:\n            return true;\n    }\n}\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n */\nfunction isArrayBuffer(value) {\n    return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n */\nfunction isBlob(value) {\n    return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n */\nfunction isFormData(value) {\n    return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n/**\n * Safely assert whether the given value is a URLSearchParams instance.\n *\n * In some execution environments URLSearchParams is not defined.\n */\nfunction isUrlSearchParams(value) {\n    return typeof URLSearchParams !== 'undefined' && value instanceof URLSearchParams;\n}\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * @publicApi\n */\nclass HttpRequest {\n    constructor(method, url, third, fourth) {\n        this.url = url;\n        /**\n         * The request body, or `null` if one isn't set.\n         *\n         * Bodies are not enforced to be immutable, as they can include a reference to any\n         * user-defined data type. However, interceptors should take care to preserve\n         * idempotence by treating them as such.\n         */\n        this.body = null;\n        /**\n         * Whether this request should be made in a way that exposes progress events.\n         *\n         * Progress events are expensive (change detection runs on each event) and so\n         * they should only be requested if the consumer intends to monitor them.\n         */\n        this.reportProgress = false;\n        /**\n         * Whether this request should be sent with outgoing credentials (cookies).\n         */\n        this.withCredentials = false;\n        /**\n         * The expected response type of the server.\n         *\n         * This is used to parse the response appropriately before returning it to\n         * the requestee.\n         */\n        this.responseType = 'json';\n        this.method = method.toUpperCase();\n        // Next, need to figure out which argument holds the HttpRequestInit\n        // options, if any.\n        let options;\n        // Check whether a body argument is expected. The only valid way to omit\n        // the body argument is to use a known no-body method like GET.\n        if (mightHaveBody(this.method) || !!fourth) {\n            // Body is the third argument, options are the fourth.\n            this.body = (third !== undefined) ? third : null;\n            options = fourth;\n        }\n        else {\n            // No body required, options are the third argument. The body stays null.\n            options = third;\n        }\n        // If options have been passed, interpret them.\n        if (options) {\n            // Normalize reportProgress and withCredentials.\n            this.reportProgress = !!options.reportProgress;\n            this.withCredentials = !!options.withCredentials;\n            // Override default response type of 'json' if one is provided.\n            if (!!options.responseType) {\n                this.responseType = options.responseType;\n            }\n            // Override headers if they're provided.\n            if (!!options.headers) {\n                this.headers = options.headers;\n            }\n            if (!!options.context) {\n                this.context = options.context;\n            }\n            if (!!options.params) {\n                this.params = options.params;\n            }\n        }\n        // If no headers have been passed in, construct a new HttpHeaders instance.\n        if (!this.headers) {\n            this.headers = new HttpHeaders();\n        }\n        // If no context have been passed in, construct a new HttpContext instance.\n        if (!this.context) {\n            this.context = new HttpContext();\n        }\n        // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n        if (!this.params) {\n            this.params = new HttpParams();\n            this.urlWithParams = url;\n        }\n        else {\n            // Encode the parameters to a string in preparation for inclusion in the URL.\n            const params = this.params.toString();\n            if (params.length === 0) {\n                // No parameters, the visible URL is just the URL given at creation time.\n                this.urlWithParams = url;\n            }\n            else {\n                // Does the URL already have query parameters? Look for '?'.\n                const qIdx = url.indexOf('?');\n                // There are 3 cases to handle:\n                // 1) No existing parameters -> append '?' followed by params.\n                // 2) '?' exists and is followed by existing query string ->\n                //    append '&' followed by params.\n                // 3) '?' exists at the end of the url -> append params directly.\n                // This basically amounts to determining the character, if any, with\n                // which to join the URL and parameters.\n                const sep = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\n                this.urlWithParams = url + sep + params;\n            }\n        }\n    }\n    /**\n     * Transform the free-form body into a serialized format suitable for\n     * transmission to the server.\n     */\n    serializeBody() {\n        // If no body is present, no need to serialize it.\n        if (this.body === null) {\n            return null;\n        }\n        // Check whether the body is already in a serialized form. If so,\n        // it can just be returned directly.\n        if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\n            isUrlSearchParams(this.body) || typeof this.body === 'string') {\n            return this.body;\n        }\n        // Check whether the body is an instance of HttpUrlEncodedParams.\n        if (this.body instanceof HttpParams) {\n            return this.body.toString();\n        }\n        // Check whether the body is an object or array, and serialize with JSON if so.\n        if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\n            Array.isArray(this.body)) {\n            return JSON.stringify(this.body);\n        }\n        // Fall back on toString() for everything else.\n        return this.body.toString();\n    }\n    /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     */\n    detectContentTypeHeader() {\n        // An empty body has no content type.\n        if (this.body === null) {\n            return null;\n        }\n        // FormData bodies rely on the browser's content type assignment.\n        if (isFormData(this.body)) {\n            return null;\n        }\n        // Blobs usually have their own content type. If it doesn't, then\n        // no type can be inferred.\n        if (isBlob(this.body)) {\n            return this.body.type || null;\n        }\n        // Array buffers have unknown contents and thus no type can be inferred.\n        if (isArrayBuffer(this.body)) {\n            return null;\n        }\n        // Technically, strings could be a form of JSON data, but it's safe enough\n        // to assume they're plain strings.\n        if (typeof this.body === 'string') {\n            return 'text/plain';\n        }\n        // `HttpUrlEncodedParams` has its own content-type.\n        if (this.body instanceof HttpParams) {\n            return 'application/x-www-form-urlencoded;charset=UTF-8';\n        }\n        // Arrays, objects, boolean and numbers will be encoded as JSON.\n        if (typeof this.body === 'object' || typeof this.body === 'number' ||\n            typeof this.body === 'boolean') {\n            return 'application/json';\n        }\n        // No type could be inferred.\n        return null;\n    }\n    clone(update = {}) {\n        // For method, url, and responseType, take the current value unless\n        // it is overridden in the update hash.\n        const method = update.method || this.method;\n        const url = update.url || this.url;\n        const responseType = update.responseType || this.responseType;\n        // The body is somewhat special - a `null` value in update.body means\n        // whatever current body is present is being overridden with an empty\n        // body, whereas an `undefined` value in update.body implies no\n        // override.\n        const body = (update.body !== undefined) ? update.body : this.body;\n        // Carefully handle the boolean options to differentiate between\n        // `false` and `undefined` in the update args.\n        const withCredentials = (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\n        const reportProgress = (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\n        // Headers and params may be appended to if `setHeaders` or\n        // `setParams` are used.\n        let headers = update.headers || this.headers;\n        let params = update.params || this.params;\n        // Pass on context if needed\n        const context = update.context ?? this.context;\n        // Check whether the caller has asked to add headers.\n        if (update.setHeaders !== undefined) {\n            // Set every requested header.\n            headers =\n                Object.keys(update.setHeaders)\n                    .reduce((headers, name) => headers.set(name, update.setHeaders[name]), headers);\n        }\n        // Check whether the caller has asked to set params.\n        if (update.setParams) {\n            // Set every requested param.\n            params = Object.keys(update.setParams)\n                .reduce((params, param) => params.set(param, update.setParams[param]), params);\n        }\n        // Finally, construct the new HttpRequest using the pieces from above.\n        return new HttpRequest(method, url, body, {\n            params,\n            headers,\n            context,\n            reportProgress,\n            responseType,\n            withCredentials,\n        });\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Type enumeration for the different kinds of `HttpEvent`.\n *\n * @publicApi\n */\nvar HttpEventType;\n(function (HttpEventType) {\n    /**\n     * The request was sent out over the wire.\n     */\n    HttpEventType[HttpEventType[\"Sent\"] = 0] = \"Sent\";\n    /**\n     * An upload progress event was received.\n     */\n    HttpEventType[HttpEventType[\"UploadProgress\"] = 1] = \"UploadProgress\";\n    /**\n     * The response status code and headers were received.\n     */\n    HttpEventType[HttpEventType[\"ResponseHeader\"] = 2] = \"ResponseHeader\";\n    /**\n     * A download progress event was received.\n     */\n    HttpEventType[HttpEventType[\"DownloadProgress\"] = 3] = \"DownloadProgress\";\n    /**\n     * The full response including the body was received.\n     */\n    HttpEventType[HttpEventType[\"Response\"] = 4] = \"Response\";\n    /**\n     * A custom event from an interceptor or a backend.\n     */\n    HttpEventType[HttpEventType[\"User\"] = 5] = \"User\";\n})(HttpEventType || (HttpEventType = {}));\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * @publicApi\n */\nclass HttpResponseBase {\n    /**\n     * Super-constructor for all responses.\n     *\n     * The single parameter accepted is an initialization hash. Any properties\n     * of the response passed there will override the default values.\n     */\n    constructor(init, defaultStatus = 200 /* Ok */, defaultStatusText = 'OK') {\n        // If the hash has values passed, use them to initialize the response.\n        // Otherwise use the default values.\n        this.headers = init.headers || new HttpHeaders();\n        this.status = init.status !== undefined ? init.status : defaultStatus;\n        this.statusText = init.statusText || defaultStatusText;\n        this.url = init.url || null;\n        // Cache the ok value to avoid defining a getter.\n        this.ok = this.status >= 200 && this.status < 300;\n    }\n}\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * @publicApi\n */\nclass HttpHeaderResponse extends HttpResponseBase {\n    /**\n     * Create a new `HttpHeaderResponse` with the given parameters.\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.ResponseHeader;\n    }\n    /**\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\n     * given parameter hash.\n     */\n    clone(update = {}) {\n        // Perform a straightforward initialization of the new HttpHeaderResponse,\n        // overriding the current parameters with new ones if given.\n        return new HttpHeaderResponse({\n            headers: update.headers || this.headers,\n            status: update.status !== undefined ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * @publicApi\n */\nclass HttpResponse extends HttpResponseBase {\n    /**\n     * Construct a new `HttpResponse`.\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.Response;\n        this.body = init.body !== undefined ? init.body : null;\n    }\n    clone(update = {}) {\n        return new HttpResponse({\n            body: (update.body !== undefined) ? update.body : this.body,\n            headers: update.headers || this.headers,\n            status: (update.status !== undefined) ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * @publicApi\n */\nclass HttpErrorResponse extends HttpResponseBase {\n    constructor(init) {\n        // Initialize with a default status of 0 / Unknown Error.\n        super(init, 0, 'Unknown Error');\n        this.name = 'HttpErrorResponse';\n        /**\n         * Errors are never okay, even when the status code is in the 2xx success range.\n         */\n        this.ok = false;\n        // If the response was successful, then this was a parse error. Otherwise, it was\n        // a protocol-level failure of some sort. Either the request failed in transit\n        // or the server returned an unsuccessful status code.\n        if (this.status >= 200 && this.status < 300) {\n            this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\n        }\n        else {\n            this.message = `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${init.statusText}`;\n        }\n        this.error = init.error || null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. This function clones the object and adds the body.\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n */\nfunction addBody(options, body) {\n    return {\n        body,\n        headers: options.headers,\n        context: options.context,\n        observe: options.observe,\n        params: options.params,\n        reportProgress: options.reportProgress,\n        responseType: options.responseType,\n        withCredentials: options.withCredentials,\n    };\n}\n/**\n * Performs HTTP requests.\n * This service is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies based on\n * the signature that is called (mainly the values of `observe` and `responseType`).\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n\n *\n * @usageNotes\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/toh-pt0) application.\n *\n * ### HTTP Request Example\n *\n * ```\n *  // GET heroes whose name contains search term\n * searchHeroes(term: string): observable<Hero[]>{\n *\n *  const params = new HttpParams({fromString: 'name=term'});\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\n * }\n * ```\n *\n * Alternatively, the parameter string can be used without invoking HttpParams\n * by directly joining to the URL.\n * ```\n * this.httpClient.request('GET', this.heroesUrl + '?' + 'name=term', {responseType:'json'});\n * ```\n *\n *\n * ### JSONP Example\n * ```\n * requestJsonp(url, callback = 'callback') {\n *  return this.httpClient.jsonp(this.heroesURL, callback);\n * }\n * ```\n *\n * ### PATCH Example\n * ```\n * // PATCH one of the heroes' name\n * patchHero (id: number, heroName: string): Observable<{}> {\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\n *    .pipe(catchError(this.handleError('patchHero')));\n * }\n * ```\n *\n * @see [HTTP Guide](guide/http)\n * @see [HTTP Request](api/common/http/HttpRequest)\n *\n * @publicApi\n */\nclass HttpClient {\n    constructor(handler) {\n        this.handler = handler;\n    }\n    /**\n     * Constructs an observable for a generic HTTP request that, when subscribed,\n     * fires the request through the chain of registered interceptors and on to the\n     * server.\n     *\n     * You can pass an `HttpRequest` directly as the only parameter. In this case,\n     * the call returns an observable of the raw `HttpEvent` stream.\n     *\n     * Alternatively you can pass an HTTP method as the first parameter,\n     * a URL string as the second, and an options hash containing the request body as the third.\n     * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\n     * type of returned observable.\n     *   * The `responseType` value determines how a successful response body is parsed.\n     *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\n     * object as a type parameter to the call.\n     *\n     * The `observe` value determines the return type, according to what you are interested in\n     * observing.\n     *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\n     * progress events by default.\n     *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\n     * where the `T` parameter depends on the `responseType` and any optionally provided type\n     * parameter.\n     *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\n     *\n     */\n    request(first, url, options = {}) {\n        let req;\n        // First, check whether the primary argument is an instance of `HttpRequest`.\n        if (first instanceof HttpRequest) {\n            // It is. The other arguments must be undefined (per the signatures) and can be\n            // ignored.\n            req = first;\n        }\n        else {\n            // It's a string, so it represents a URL. Construct a request based on it,\n            // and incorporate the remaining arguments (assuming `GET` unless a method is\n            // provided.\n            // Figure out the headers.\n            let headers = undefined;\n            if (options.headers instanceof HttpHeaders) {\n                headers = options.headers;\n            }\n            else {\n                headers = new HttpHeaders(options.headers);\n            }\n            // Sort out parameters.\n            let params = undefined;\n            if (!!options.params) {\n                if (options.params instanceof HttpParams) {\n                    params = options.params;\n                }\n                else {\n                    params = new HttpParams({ fromObject: options.params });\n                }\n            }\n            // Construct the request.\n            req = new HttpRequest(first, url, (options.body !== undefined ? options.body : null), {\n                headers,\n                context: options.context,\n                params,\n                reportProgress: options.reportProgress,\n                // By default, JSON is assumed to be returned for all calls.\n                responseType: options.responseType || 'json',\n                withCredentials: options.withCredentials,\n            });\n        }\n        // Start with an Observable.of() the initial request, and run the handler (which\n        // includes all interceptors) inside a concatMap(). This way, the handler runs\n        // inside an Observable chain, which causes interceptors to be re-run on every\n        // subscription (this also makes retries re-run the handler, including interceptors).\n        const events$ = of(req).pipe(concatMap((req) => this.handler.handle(req)));\n        // If coming via the API signature which accepts a previously constructed HttpRequest,\n        // the only option is to get the event stream. Otherwise, return the event stream if\n        // that is what was requested.\n        if (first instanceof HttpRequest || options.observe === 'events') {\n            return events$;\n        }\n        // The requested stream contains either the full response or the body. In either\n        // case, the first step is to filter the event stream to extract a stream of\n        // responses(s).\n        const res$ = events$.pipe(filter((event) => event instanceof HttpResponse));\n        // Decide which stream to return.\n        switch (options.observe || 'body') {\n            case 'body':\n                // The requested stream is the body. Map the response stream to the response\n                // body. This could be done more simply, but a misbehaving interceptor might\n                // transform the response body into a different format and ignore the requested\n                // responseType. Guard against this by validating that the response is of the\n                // requested type.\n                switch (req.responseType) {\n                    case 'arraybuffer':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is an ArrayBuffer.\n                            if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                                throw new Error('Response is not an ArrayBuffer.');\n                            }\n                            return res.body;\n                        }));\n                    case 'blob':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is a Blob.\n                            if (res.body !== null && !(res.body instanceof Blob)) {\n                                throw new Error('Response is not a Blob.');\n                            }\n                            return res.body;\n                        }));\n                    case 'text':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is a string.\n                            if (res.body !== null && typeof res.body !== 'string') {\n                                throw new Error('Response is not a string.');\n                            }\n                            return res.body;\n                        }));\n                    case 'json':\n                    default:\n                        // No validation needed for JSON responses, as they can be of any type.\n                        return res$.pipe(map((res) => res.body));\n                }\n            case 'response':\n                // The response stream was requested directly, so return it.\n                return res$;\n            default:\n                // Guard against new future observe types being added.\n                throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);\n        }\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `DELETE` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     */\n    delete(url, options = {}) {\n        return this.request('DELETE', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `GET` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     */\n    get(url, options = {}) {\n        return this.request('GET', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `HEAD` request to execute on the server. The `HEAD` method returns\n     * meta information about the resource without transferring the\n     * resource itself. See the individual overloads for\n     * details on the return type.\n     */\n    head(url, options = {}) {\n        return this.request('HEAD', url, options);\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes a request with the special method\n     * `JSONP` to be dispatched via the interceptor pipeline.\n     * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\n     * API endpoints that don't support newer,\n     * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\n     * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\n     * requests even if the API endpoint is not located on the same domain (origin) as the client-side\n     * application making the request.\n     * The endpoint API must support JSONP callback for JSONP requests to work.\n     * The resource API returns the JSON response wrapped in a callback function.\n     * You can pass the callback function name as one of the query parameters.\n     * Note that JSONP requests can only be used with `GET` requests.\n     *\n     * @param url The resource URL.\n     * @param callbackParam The callback function name.\n     *\n     */\n    jsonp(url, callbackParam) {\n        return this.request('JSONP', url, {\n            params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n            observe: 'body',\n            responseType: 'json',\n        });\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes the configured\n     * `OPTIONS` request to execute on the server. This method allows the client\n     * to determine the supported HTTP methods and other capabilities of an endpoint,\n     * without implying a resource action. See the individual overloads for\n     * details on the return type.\n     */\n    options(url, options = {}) {\n        return this.request('OPTIONS', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PATCH` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     */\n    patch(url, body, options = {}) {\n        return this.request('PATCH', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `POST` request to execute on the server. The server responds with the location of\n     * the replaced resource. See the individual overloads for\n     * details on the return type.\n     */\n    post(url, body, options = {}) {\n        return this.request('POST', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\n     * with a new set of values.\n     * See the individual overloads for details on the return type.\n     */\n    put(url, body, options = {}) {\n        return this.request('PUT', url, addBody(options, body));\n    }\n}\nHttpClient.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: HttpClient, deps: [{ token: HttpHandler }], target: i0.ɵɵFactoryTarget.Injectable });\nHttpClient.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: HttpClient });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: HttpClient, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: HttpHandler }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.\n *\n *\n */\nclass HttpInterceptorHandler {\n    constructor(next, interceptor) {\n        this.next = next;\n        this.interceptor = interceptor;\n    }\n    handle(req) {\n        return this.interceptor.intercept(req, this.next);\n    }\n}\n/**\n * A multi-provider token that represents the array of registered\n * `HttpInterceptor` objects.\n *\n * @publicApi\n */\nconst HTTP_INTERCEPTORS = new InjectionToken('HTTP_INTERCEPTORS');\nclass NoopInterceptor {\n    intercept(req, next) {\n        return next.handle(req);\n    }\n}\nNoopInterceptor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: NoopInterceptor, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nNoopInterceptor.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: NoopInterceptor });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: NoopInterceptor, decorators: [{\n            type: Injectable\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\nlet nextRequestId = 0;\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\nconst JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n */\nclass JsonpCallbackContext {\n}\n/**\n * Processes an `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n * @see `HttpHandler`\n * @see `HttpXhrBackend`\n *\n * @publicApi\n */\nclass JsonpClientBackend {\n    constructor(callbackMap, document) {\n        this.callbackMap = callbackMap;\n        this.document = document;\n        /**\n         * A resolved promise that can be used to schedule microtasks in the event handlers.\n         */\n        this.resolvedPromise = Promise.resolve();\n    }\n    /**\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n     */\n    nextCallback() {\n        return `ng_jsonp_callback_${nextRequestId++}`;\n    }\n    /**\n     * Processes a JSONP request and returns an event stream of the results.\n     * @param req The request object.\n     * @returns An observable of the response events.\n     *\n     */\n    handle(req) {\n        // Firstly, check both the method and response type. If either doesn't match\n        // then the request was improperly routed here and cannot be handled.\n        if (req.method !== 'JSONP') {\n            throw new Error(JSONP_ERR_WRONG_METHOD);\n        }\n        else if (req.responseType !== 'json') {\n            throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n        }\n        // Everything else happens inside the Observable boundary.\n        return new Observable((observer) => {\n            // The first step to make a request is to generate the callback name, and replace the\n            // callback placeholder in the URL with the name. Care has to be taken here to ensure\n            // a trailing &, if matched, gets inserted back into the URL in the correct place.\n            const callback = this.nextCallback();\n            const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);\n            // Construct the <script> tag and point it at the URL.\n            const node = this.document.createElement('script');\n            node.src = url;\n            // A JSONP request requires waiting for multiple callbacks. These variables\n            // are closed over and track state across those callbacks.\n            // The response object, if one has been received, or null otherwise.\n            let body = null;\n            // Whether the response callback has been called.\n            let finished = false;\n            // Whether the request has been cancelled (and thus any other callbacks)\n            // should be ignored.\n            let cancelled = false;\n            // Set the response callback in this.callbackMap (which will be the window\n            // object in the browser. The script being loaded via the <script> tag will\n            // eventually call this callback.\n            this.callbackMap[callback] = (data) => {\n                // Data has been received from the JSONP script. Firstly, delete this callback.\n                delete this.callbackMap[callback];\n                // Next, make sure the request wasn't cancelled in the meantime.\n                if (cancelled) {\n                    return;\n                }\n                // Set state to indicate data was received.\n                body = data;\n                finished = true;\n            };\n            // cleanup() is a utility closure that removes the <script> from the page and\n            // the response callback from the window. This logic is used in both the\n            // success, error, and cancellation paths, so it's extracted out for convenience.\n            const cleanup = () => {\n                // Remove the <script> tag if it's still on the page.\n                if (node.parentNode) {\n                    node.parentNode.removeChild(node);\n                }\n                // Remove the response callback from the callbackMap (window object in the\n                // browser).\n                delete this.callbackMap[callback];\n            };\n            // onLoad() is the success callback which runs after the response callback\n            // if the JSONP script loads successfully. The event itself is unimportant.\n            // If something went wrong, onLoad() may run without the response callback\n            // having been invoked.\n            const onLoad = (event) => {\n                // Do nothing if the request has been cancelled.\n                if (cancelled) {\n                    return;\n                }\n                // We wrap it in an extra Promise, to ensure the microtask\n                // is scheduled after the loaded endpoint has executed any potential microtask itself,\n                // which is not guaranteed in Internet Explorer and EdgeHTML. See issue #39496\n                this.resolvedPromise.then(() => {\n                    // Cleanup the page.\n                    cleanup();\n                    // Check whether the response callback has run.\n                    if (!finished) {\n                        // It hasn't, something went wrong with the request. Return an error via\n                        // the Observable error path. All JSONP errors have status 0.\n                        observer.error(new HttpErrorResponse({\n                            url,\n                            status: 0,\n                            statusText: 'JSONP Error',\n                            error: new Error(JSONP_ERR_NO_CALLBACK),\n                        }));\n                        return;\n                    }\n                    // Success. body either contains the response body or null if none was\n                    // returned.\n                    observer.next(new HttpResponse({\n                        body,\n                        status: 200 /* Ok */,\n                        statusText: 'OK',\n                        url,\n                    }));\n                    // Complete the stream, the response is over.\n                    observer.complete();\n                });\n            };\n            // onError() is the error callback, which runs if the script returned generates\n            // a Javascript error. It emits the error via the Observable error channel as\n            // a HttpErrorResponse.\n            const onError = (error) => {\n                // If the request was already cancelled, no need to emit anything.\n                if (cancelled) {\n                    return;\n                }\n                cleanup();\n                // Wrap the error in a HttpErrorResponse.\n                observer.error(new HttpErrorResponse({\n                    error,\n                    status: 0,\n                    statusText: 'JSONP Error',\n                    url,\n                }));\n            };\n            // Subscribe to both the success (load) and error events on the <script> tag,\n            // and add it to the page.\n            node.addEventListener('load', onLoad);\n            node.addEventListener('error', onError);\n            this.document.body.appendChild(node);\n            // The request has now been successfully sent.\n            observer.next({ type: HttpEventType.Sent });\n            // Cancellation handler.\n            return () => {\n                // Track the cancellation so event listeners won't do anything even if already scheduled.\n                cancelled = true;\n                // Remove the event listeners so they won't run if the events later fire.\n                node.removeEventListener('load', onLoad);\n                node.removeEventListener('error', onError);\n                // And finally, clean up the page.\n                cleanup();\n            };\n        });\n    }\n}\nJsonpClientBackend.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: JsonpClientBackend, deps: [{ token: JsonpCallbackContext }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nJsonpClientBackend.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: JsonpClientBackend });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: JsonpClientBackend, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: JsonpCallbackContext }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n/**\n * Identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * @see `HttpInterceptor`\n *\n * @publicApi\n */\nclass JsonpInterceptor {\n    constructor(jsonp) {\n        this.jsonp = jsonp;\n    }\n    /**\n     * Identifies and handles a given JSONP request.\n     * @param req The outgoing request object to handle.\n     * @param next The next interceptor in the chain, or the backend\n     * if no interceptors remain in the chain.\n     * @returns An observable of the event stream.\n     */\n    intercept(req, next) {\n        if (req.method === 'JSONP') {\n            return this.jsonp.handle(req);\n        }\n        // Fall through for normal HTTP requests.\n        return next.handle(req);\n    }\n}\nJsonpInterceptor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: JsonpInterceptor, deps: [{ token: JsonpClientBackend }], target: i0.ɵɵFactoryTarget.Injectable });\nJsonpInterceptor.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: JsonpInterceptor });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: JsonpInterceptor, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: JsonpClientBackend }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n */\nfunction getResponseUrl(xhr) {\n    if ('responseURL' in xhr && xhr.responseURL) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n/**\n * Uses `XMLHttpRequest` to send requests to a backend server.\n * @see `HttpHandler`\n * @see `JsonpClientBackend`\n *\n * @publicApi\n */\nclass HttpXhrBackend {\n    constructor(xhrFactory) {\n        this.xhrFactory = xhrFactory;\n    }\n    /**\n     * Processes a request and returns a stream of response events.\n     * @param req The request object.\n     * @returns An observable of the response events.\n     */\n    handle(req) {\n        // Quick check to give a better error message when a user attempts to use\n        // HttpClient.jsonp() without installing the HttpClientJsonpModule\n        if (req.method === 'JSONP') {\n            throw new Error(`Attempted to construct Jsonp request without HttpClientJsonpModule installed.`);\n        }\n        // Everything happens on Observable subscription.\n        return new Observable((observer) => {\n            // Start by setting up the XHR object with request method, URL, and withCredentials flag.\n            const xhr = this.xhrFactory.build();\n            xhr.open(req.method, req.urlWithParams);\n            if (!!req.withCredentials) {\n                xhr.withCredentials = true;\n            }\n            // Add all the requested headers.\n            req.headers.forEach((name, values) => xhr.setRequestHeader(name, values.join(',')));\n            // Add an Accept header if one isn't present already.\n            if (!req.headers.has('Accept')) {\n                xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n            }\n            // Auto-detect the Content-Type header if one isn't present already.\n            if (!req.headers.has('Content-Type')) {\n                const detectedType = req.detectContentTypeHeader();\n                // Sometimes Content-Type detection fails.\n                if (detectedType !== null) {\n                    xhr.setRequestHeader('Content-Type', detectedType);\n                }\n            }\n            // Set the responseType if one was requested.\n            if (req.responseType) {\n                const responseType = req.responseType.toLowerCase();\n                // JSON responses need to be processed as text. This is because if the server\n                // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n                // xhr.response will be null, and xhr.responseText cannot be accessed to\n                // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n                // is parsed by first requesting text and then applying JSON.parse.\n                xhr.responseType = ((responseType !== 'json') ? responseType : 'text');\n            }\n            // Serialize the request body if one is present. If not, this will be set to null.\n            const reqBody = req.serializeBody();\n            // If progress events are enabled, response headers will be delivered\n            // in two events - the HttpHeaderResponse event and the full HttpResponse\n            // event. However, since response headers don't change in between these\n            // two events, it doesn't make sense to parse them twice. So headerResponse\n            // caches the data extracted from the response whenever it's first parsed,\n            // to ensure parsing isn't duplicated.\n            let headerResponse = null;\n            // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n            // state, and memoizes it into headerResponse.\n            const partialFromXhr = () => {\n                if (headerResponse !== null) {\n                    return headerResponse;\n                }\n                // Read status and normalize an IE9 bug (https://bugs.jquery.com/ticket/1450).\n                const status = xhr.status === 1223 ? 204 /* NoContent */ : xhr.status;\n                const statusText = xhr.statusText || 'OK';\n                // Parse headers from XMLHttpRequest - this step is lazy.\n                const headers = new HttpHeaders(xhr.getAllResponseHeaders());\n                // Read the response URL from the XMLHttpResponse instance and fall back on the\n                // request URL.\n                const url = getResponseUrl(xhr) || req.url;\n                // Construct the HttpHeaderResponse and memoize it.\n                headerResponse = new HttpHeaderResponse({ headers, status, statusText, url });\n                return headerResponse;\n            };\n            // Next, a few closures are defined for the various events which XMLHttpRequest can\n            // emit. This allows them to be unregistered as event listeners later.\n            // First up is the load event, which represents a response being fully available.\n            const onLoad = () => {\n                // Read response state from the memoized partial data.\n                let { headers, status, statusText, url } = partialFromXhr();\n                // The body will be read out if present.\n                let body = null;\n                if (status !== 204 /* NoContent */) {\n                    // Use XMLHttpRequest.response if set, responseText otherwise.\n                    body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\n                }\n                // Normalize another potential bug (this one comes from CORS).\n                if (status === 0) {\n                    status = !!body ? 200 /* Ok */ : 0;\n                }\n                // ok determines whether the response will be transmitted on the event or\n                // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n                // but a successful status code can still result in an error if the user\n                // asked for JSON data and the body cannot be parsed as such.\n                let ok = status >= 200 && status < 300;\n                // Check whether the body needs to be parsed as JSON (in many cases the browser\n                // will have done that already).\n                if (req.responseType === 'json' && typeof body === 'string') {\n                    // Save the original body, before attempting XSSI prefix stripping.\n                    const originalBody = body;\n                    body = body.replace(XSSI_PREFIX, '');\n                    try {\n                        // Attempt the parse. If it fails, a parse error should be delivered to the user.\n                        body = body !== '' ? JSON.parse(body) : null;\n                    }\n                    catch (error) {\n                        // Since the JSON.parse failed, it's reasonable to assume this might not have been a\n                        // JSON response. Restore the original body (including any XSSI prefix) to deliver\n                        // a better error response.\n                        body = originalBody;\n                        // If this was an error request to begin with, leave it as a string, it probably\n                        // just isn't JSON. Otherwise, deliver the parsing error to the user.\n                        if (ok) {\n                            // Even though the response status was 2xx, this is still an error.\n                            ok = false;\n                            // The parse error contains the text of the body that failed to parse.\n                            body = { error, text: body };\n                        }\n                    }\n                }\n                if (ok) {\n                    // A successful response is delivered on the event stream.\n                    observer.next(new HttpResponse({\n                        body,\n                        headers,\n                        status,\n                        statusText,\n                        url: url || undefined,\n                    }));\n                    // The full body has been received and delivered, no further events\n                    // are possible. This request is complete.\n                    observer.complete();\n                }\n                else {\n                    // An unsuccessful request is delivered on the error channel.\n                    observer.error(new HttpErrorResponse({\n                        // The error in this case is the response body (error from the server).\n                        error: body,\n                        headers,\n                        status,\n                        statusText,\n                        url: url || undefined,\n                    }));\n                }\n            };\n            // The onError callback is called when something goes wrong at the network level.\n            // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n            // transmitted on the error channel.\n            const onError = (error) => {\n                const { url } = partialFromXhr();\n                const res = new HttpErrorResponse({\n                    error,\n                    status: xhr.status || 0,\n                    statusText: xhr.statusText || 'Unknown Error',\n                    url: url || undefined,\n                });\n                observer.error(res);\n            };\n            // The sentHeaders flag tracks whether the HttpResponseHeaders event\n            // has been sent on the stream. This is necessary to track if progress\n            // is enabled since the event will be sent on only the first download\n            // progerss event.\n            let sentHeaders = false;\n            // The download progress event handler, which is only registered if\n            // progress events are enabled.\n            const onDownProgress = (event) => {\n                // Send the HttpResponseHeaders event if it hasn't been sent already.\n                if (!sentHeaders) {\n                    observer.next(partialFromXhr());\n                    sentHeaders = true;\n                }\n                // Start building the download progress event to deliver on the response\n                // event stream.\n                let progressEvent = {\n                    type: HttpEventType.DownloadProgress,\n                    loaded: event.loaded,\n                };\n                // Set the total number of bytes in the event if it's available.\n                if (event.lengthComputable) {\n                    progressEvent.total = event.total;\n                }\n                // If the request was for text content and a partial response is\n                // available on XMLHttpRequest, include it in the progress event\n                // to allow for streaming reads.\n                if (req.responseType === 'text' && !!xhr.responseText) {\n                    progressEvent.partialText = xhr.responseText;\n                }\n                // Finally, fire the event.\n                observer.next(progressEvent);\n            };\n            // The upload progress event handler, which is only registered if\n            // progress events are enabled.\n            const onUpProgress = (event) => {\n                // Upload progress events are simpler. Begin building the progress\n                // event.\n                let progress = {\n                    type: HttpEventType.UploadProgress,\n                    loaded: event.loaded,\n                };\n                // If the total number of bytes being uploaded is available, include\n                // it.\n                if (event.lengthComputable) {\n                    progress.total = event.total;\n                }\n                // Send the event.\n                observer.next(progress);\n            };\n            // By default, register for load and error events.\n            xhr.addEventListener('load', onLoad);\n            xhr.addEventListener('error', onError);\n            xhr.addEventListener('timeout', onError);\n            xhr.addEventListener('abort', onError);\n            // Progress events are only enabled if requested.\n            if (req.reportProgress) {\n                // Download progress is always enabled if requested.\n                xhr.addEventListener('progress', onDownProgress);\n                // Upload progress depends on whether there is a body to upload.\n                if (reqBody !== null && xhr.upload) {\n                    xhr.upload.addEventListener('progress', onUpProgress);\n                }\n            }\n            // Fire the request, and notify the event stream that it was fired.\n            xhr.send(reqBody);\n            observer.next({ type: HttpEventType.Sent });\n            // This is the return from the Observable function, which is the\n            // request cancellation handler.\n            return () => {\n                // On a cancellation, remove all registered event listeners.\n                xhr.removeEventListener('error', onError);\n                xhr.removeEventListener('abort', onError);\n                xhr.removeEventListener('load', onLoad);\n                xhr.removeEventListener('timeout', onError);\n                if (req.reportProgress) {\n                    xhr.removeEventListener('progress', onDownProgress);\n                    if (reqBody !== null && xhr.upload) {\n                        xhr.upload.removeEventListener('progress', onUpProgress);\n                    }\n                }\n                // Finally, abort the in-flight request.\n                if (xhr.readyState !== xhr.DONE) {\n                    xhr.abort();\n                }\n            };\n        });\n    }\n}\nHttpXhrBackend.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: HttpXhrBackend, deps: [{ token: i1.XhrFactory }], target: i0.ɵɵFactoryTarget.Injectable });\nHttpXhrBackend.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: HttpXhrBackend });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: HttpXhrBackend, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1.XhrFactory }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst XSRF_COOKIE_NAME = new InjectionToken('XSRF_COOKIE_NAME');\nconst XSRF_HEADER_NAME = new InjectionToken('XSRF_HEADER_NAME');\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * @publicApi\n */\nclass HttpXsrfTokenExtractor {\n}\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\nclass HttpXsrfCookieExtractor {\n    constructor(doc, platform, cookieName) {\n        this.doc = doc;\n        this.platform = platform;\n        this.cookieName = cookieName;\n        this.lastCookieString = '';\n        this.lastToken = null;\n        /**\n         * @internal for testing\n         */\n        this.parseCount = 0;\n    }\n    getToken() {\n        if (this.platform === 'server') {\n            return null;\n        }\n        const cookieString = this.doc.cookie || '';\n        if (cookieString !== this.lastCookieString) {\n            this.parseCount++;\n            this.lastToken = ɵparseCookieValue(cookieString, this.cookieName);\n            this.lastCookieString = cookieString;\n        }\n        return this.lastToken;\n    }\n}\nHttpXsrfCookieExtractor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: HttpXsrfCookieExtractor, deps: [{ token: DOCUMENT }, { token: PLATFORM_ID }, { token: XSRF_COOKIE_NAME }], target: i0.ɵɵFactoryTarget.Injectable });\nHttpXsrfCookieExtractor.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: HttpXsrfCookieExtractor });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: HttpXsrfCookieExtractor, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [XSRF_COOKIE_NAME]\n                }] }]; } });\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\nclass HttpXsrfInterceptor {\n    constructor(tokenService, headerName) {\n        this.tokenService = tokenService;\n        this.headerName = headerName;\n    }\n    intercept(req, next) {\n        const lcUrl = req.url.toLowerCase();\n        // Skip both non-mutating requests and absolute URLs.\n        // Non-mutating requests don't require a token, and absolute URLs require special handling\n        // anyway as the cookie set\n        // on our origin is not the same as the token expected by another origin.\n        if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') ||\n            lcUrl.startsWith('https://')) {\n            return next.handle(req);\n        }\n        const token = this.tokenService.getToken();\n        // Be careful not to overwrite an existing header of the same name.\n        if (token !== null && !req.headers.has(this.headerName)) {\n            req = req.clone({ headers: req.headers.set(this.headerName, token) });\n        }\n        return next.handle(req);\n    }\n}\nHttpXsrfInterceptor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: HttpXsrfInterceptor, deps: [{ token: HttpXsrfTokenExtractor }, { token: XSRF_HEADER_NAME }], target: i0.ɵɵFactoryTarget.Injectable });\nHttpXsrfInterceptor.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: HttpXsrfInterceptor });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: HttpXsrfInterceptor, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: HttpXsrfTokenExtractor }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [XSRF_HEADER_NAME]\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An injectable `HttpHandler` that applies multiple interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * The interceptors are loaded lazily from the injector, to allow\n * interceptors to themselves inject classes depending indirectly\n * on `HttpInterceptingHandler` itself.\n * @see `HttpInterceptor`\n */\nclass HttpInterceptingHandler {\n    constructor(backend, injector) {\n        this.backend = backend;\n        this.injector = injector;\n        this.chain = null;\n    }\n    handle(req) {\n        if (this.chain === null) {\n            const interceptors = this.injector.get(HTTP_INTERCEPTORS, []);\n            this.chain = interceptors.reduceRight((next, interceptor) => new HttpInterceptorHandler(next, interceptor), this.backend);\n        }\n        return this.chain.handle(req);\n    }\n}\nHttpInterceptingHandler.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: HttpInterceptingHandler, deps: [{ token: HttpBackend }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });\nHttpInterceptingHandler.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: HttpInterceptingHandler });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: HttpInterceptingHandler, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: HttpBackend }, { type: i0.Injector }]; } });\n/**\n * Constructs an `HttpHandler` that applies interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * Use as a factory function within `HttpClientModule`.\n *\n *\n */\nfunction interceptingHandler(backend, interceptors = []) {\n    if (!interceptors) {\n        return backend;\n    }\n    return interceptors.reduceRight((next, interceptor) => new HttpInterceptorHandler(next, interceptor), backend);\n}\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n */\nfunction jsonpCallbackContext() {\n    if (typeof window === 'object') {\n        return window;\n    }\n    return {};\n}\n/**\n * Configures XSRF protection support for outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n * @publicApi\n */\nclass HttpClientXsrfModule {\n    /**\n     * Disable the default XSRF protection.\n     */\n    static disable() {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                { provide: HttpXsrfInterceptor, useClass: NoopInterceptor },\n            ],\n        };\n    }\n    /**\n     * Configure XSRF protection.\n     * @param options An object that can specify either or both\n     * cookie name or header name.\n     * - Cookie name default is `XSRF-TOKEN`.\n     * - Header name default is `X-XSRF-TOKEN`.\n     *\n     */\n    static withOptions(options = {}) {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                options.cookieName ? { provide: XSRF_COOKIE_NAME, useValue: options.cookieName } : [],\n                options.headerName ? { provide: XSRF_HEADER_NAME, useValue: options.headerName } : [],\n            ],\n        };\n    }\n}\nHttpClientXsrfModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: HttpClientXsrfModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nHttpClientXsrfModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: HttpClientXsrfModule });\nHttpClientXsrfModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: HttpClientXsrfModule, providers: [\n        HttpXsrfInterceptor,\n        { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n        { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\n        { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\n    ] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: HttpClientXsrfModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [\n                        HttpXsrfInterceptor,\n                        { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n                        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n                        { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\n                        { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\n                    ],\n                }]\n        }] });\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\nclass HttpClientModule {\n}\nHttpClientModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: HttpClientModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nHttpClientModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: HttpClientModule, imports: [HttpClientXsrfModule] });\nHttpClientModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: HttpClientModule, providers: [\n        HttpClient,\n        { provide: HttpHandler, useClass: HttpInterceptingHandler },\n        HttpXhrBackend,\n        { provide: HttpBackend, useExisting: HttpXhrBackend },\n    ], imports: [[\n            HttpClientXsrfModule.withOptions({\n                cookieName: 'XSRF-TOKEN',\n                headerName: 'X-XSRF-TOKEN',\n            }),\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: HttpClientModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    /**\n                     * Optional configuration for XSRF protection.\n                     */\n                    imports: [\n                        HttpClientXsrfModule.withOptions({\n                            cookieName: 'XSRF-TOKEN',\n                            headerName: 'X-XSRF-TOKEN',\n                        }),\n                    ],\n                    /**\n                     * Configures the [dependency injector](guide/glossary#injector) where it is imported\n                     * with supporting services for HTTP communications.\n                     */\n                    providers: [\n                        HttpClient,\n                        { provide: HttpHandler, useClass: HttpInterceptingHandler },\n                        HttpXhrBackend,\n                        { provide: HttpBackend, useExisting: HttpXhrBackend },\n                    ],\n                }]\n        }] });\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for JSONP.\n * Without this module, Jsonp requests reach the backend\n * with method JSONP, where they are rejected.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\nclass HttpClientJsonpModule {\n}\nHttpClientJsonpModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: HttpClientJsonpModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nHttpClientJsonpModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: HttpClientJsonpModule });\nHttpClientJsonpModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: HttpClientJsonpModule, providers: [\n        JsonpClientBackend,\n        { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n        { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\n    ] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.3\", ngImport: i0, type: HttpClientJsonpModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [\n                        JsonpClientBackend,\n                        { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n                        { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\n                    ],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n * @publicApi\n * @see `XhrFactory`\n * @deprecated\n * `XhrFactory` has moved, please import `XhrFactory` from `@angular/common` instead.\n */\nconst XhrFactory = XhrFactory$1;\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { HTTP_INTERCEPTORS, HttpBackend, HttpClient, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpContext, HttpContextToken, HttpErrorResponse, HttpEventType, HttpHandler, HttpHeaderResponse, HttpHeaders, HttpParams, HttpRequest, HttpResponse, HttpResponseBase, HttpUrlEncodingCodec, HttpXhrBackend, HttpXsrfTokenExtractor, JsonpClientBackend, JsonpInterceptor, XhrFactory, HttpInterceptingHandler as ɵHttpInterceptingHandler };\n"],"sourceRoot":"webpack:///","file":"987.df8effc3676cd79a.js"}