{"version":3,"file":"8282.775a41ee9cbd809f.js","mappings":"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","names":["EMPTY","Observable","subscriber","complete","createOperatorSubscriber","destination","onNext","onComplete","onError","onFinalize","OperatorSubscriber","_Subscriber","_inherits","_super","_createSuper","shouldUnsubscribe","_thisSuper","_thisSuper2","_thisSuper3","_this","_classCallCheck","this","call","_next","value","err","error","_get","_assertThisInitialized","_getPrototypeOf","prototype","_error","unsubscribe","_complete","_createClass","key","_a","closed","Subscriber","take","count","operate","source","seen","subscribe","next","takeUntil","notifier","innerFrom","noop","hasLift","isFunction","lift","init","liftedSource","TypeError","MatLegacySelect_span_4_Template","rf","ctx","i0","ctx_r2","placeholder","MatLegacySelect_span_5_span_1_Template","ctx_r5","triggerValue","MatLegacySelect_span_5_ng_content_2_Template","MatLegacySelect_span_5_Template","ctx_r3","customTrigger","MatLegacySelect_ng_template_8_Template","_r9","$event","ctx_r8","_panelDoneAnimatingStream","toState","ctx_r10","_handleKeydown","ctx_r4","undefined","_getPanelTheme","_transformOrigin","_triggerFontSize","panelClass","multiple","id","ariaLabel","_getPanelAriaLabelledby","_c0","_c1","matLegacySelectAnimations","transformPanelWrap","trigger","transition","query","animateChild","optional","transformPanel","state","style","transform","minWidth","opacity","animate","SELECT_PANEL_MAX_HEIGHT","MatLegacySelectChange","MatLegacySelectTrigger","ɵfac","t","ɵdir","type","selectors","features","provide","MAT_SELECT_TRIGGER","useExisting","MatLegacySelect","_MatSelectBase2","apply","arguments","_scrollTop","_offsetY","_positions","originX","originY","overlayX","overlayY","selectedIndex","scrollBuffer","maxScroll","itemHeight","_getItemHeight","Math","min","max","_this2","_viewportRuler","change","pipe","_destroy","panelOpen","_triggerRect","nativeElement","getBoundingClientRect","_changeDetectorRef","markForCheck","_this3","parseInt","getComputedStyle","fontSize","_calculateOverlayPosition","_ngZone","onStable","_overlayDir","overlayRef","overlayElement","concat","index","labelCount","_countGroupLabelsBeforeLegacyOption","options","optionGroups","panel","scrollTop","_getLegacyOptionScrollPosition","_calculateOverlayOffsetX","isOpen","offsetX","_this$_triggerRect","width","overlayRect","viewportSize","getViewportSize","isRtl","_isRtl","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","SELECT_PANEL_PADDING_X","disableOptionCentering","selected","_selectionModel","first","group","leftOverflow","left","rightOverflow","right","round","updatePosition","optionOffsetFromPanelTop","optionHeightAdjustment","height","maxOptionsDisplayed","floor","_getItemCount","topSpaceAvailable","top","bottomSpaceAvailable","bottom","panelHeightTop","abs","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","selectedOptionOffset","items","panelHeight","empty","toArray","indexOf","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","length","_MatSelectBase","ɵMatLegacySelect_BaseFactory","ɵcmp","contentQueries","dirIndex","_t","MatLegacyOption","MAT_LEGACY_OPTGROUP","hostAttrs","hostVars","hostBindings","_onFocus","_onBlur","tabIndex","required","toString","disabled","errorState","_getAriaActiveDescendant","inputs","disableRipple","exportAs","MatLegacyFormFieldControl","MAT_LEGACY_OPTION_PARENT_COMPONENT","ngContentSelectors","decls","vars","consts","template","toggle","close","_onAttached","_r0","_valueId","_overlayPanelClass","_scrollStrategy","_getOverlayMinWidth","dependencies","i1","i2","styles","encapsulation","data","animation","changeDetection","MatLegacySelectModule","ɵmod","ɵinj","providers","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","imports","CommonModule","OverlayModule","MatLegacyOptionModule","MatCommonModule","CdkScrollableModule","MatLegacyFormFieldModule","_arrayLikeToArray","arr","len","i","arr2","Array","self","ReferenceError","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","isArray","_unsupportedIterableToArray_js__WEBPACK_IMPORTED_MODULE_0__","Z","F","s","n","done","e","_e","f","normalCompletion","didErr","step","_e2","return","Derived","hasNativeReflectConstruct","isNativeReflectConstruct","result","Super","getPrototypeOf","NewTarget","constructor","Reflect","construct","_possibleConstructorReturn","esm_typeof","assertThisInitialized","get","bind","target","property","receiver","base","_superPropBase","object","Object","hasOwnProperty","desc","getOwnPropertyDescriptor","setPrototypeOf","__proto__","subClass","superClass","create","writable","configurable","defineProperty","_setPrototypeOf_js__WEBPACK_IMPORTED_MODULE_0__","_isNativeReflectConstruct","sham","Proxy","Boolean","valueOf","_iterableToArray","iter","from","_setPrototypeOf","p","_toConsumableArray","_arrayWithoutHoles","arrayLikeToArray","iterableToArray","unsupportedIterableToArray","_nonIterableSpread","_unsupportedIterableToArray","minLen","_arrayLikeToArray_js__WEBPACK_IMPORTED_MODULE_0__","slice","name","test"],"sourceRoot":"webpack:///","sources":["./node_modules/rxjs/dist/esm/internal/observable/empty.js","./node_modules/rxjs/dist/esm/internal/operators/OperatorSubscriber.js","./node_modules/rxjs/dist/esm/internal/operators/take.js","./node_modules/rxjs/dist/esm/internal/operators/takeUntil.js","./node_modules/rxjs/dist/esm/internal/util/lift.js","./node_modules/@angular/material/fesm2022/legacy-select.mjs","./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","./node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","./node_modules/@babel/runtime/helpers/esm/createSuper.js","./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","./node_modules/@babel/runtime/helpers/esm/get.js","./node_modules/@babel/runtime/helpers/esm/superPropBase.js","./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","./node_modules/@babel/runtime/helpers/esm/inherits.js","./node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js","./node_modules/@babel/runtime/helpers/esm/iterableToArray.js","./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js"],"sourcesContent":["import { Observable } from '../Observable';\nexport const EMPTY = new Observable((subscriber) => subscriber.complete());\nexport function empty(scheduler) {\n    return scheduler ? emptyScheduled(scheduler) : EMPTY;\n}\nfunction emptyScheduled(scheduler) {\n    return new Observable((subscriber) => scheduler.schedule(() => subscriber.complete()));\n}\n","import { Subscriber } from '../Subscriber';\nexport function createOperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {\n    return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);\n}\nexport class OperatorSubscriber extends Subscriber {\n    constructor(destination, onNext, onComplete, onError, onFinalize, shouldUnsubscribe) {\n        super(destination);\n        this.onFinalize = onFinalize;\n        this.shouldUnsubscribe = shouldUnsubscribe;\n        this._next = onNext\n            ? function (value) {\n                try {\n                    onNext(value);\n                }\n                catch (err) {\n                    destination.error(err);\n                }\n            }\n            : super._next;\n        this._error = onError\n            ? function (err) {\n                try {\n                    onError(err);\n                }\n                catch (err) {\n                    destination.error(err);\n                }\n                finally {\n                    this.unsubscribe();\n                }\n            }\n            : super._error;\n        this._complete = onComplete\n            ? function () {\n                try {\n                    onComplete();\n                }\n                catch (err) {\n                    destination.error(err);\n                }\n                finally {\n                    this.unsubscribe();\n                }\n            }\n            : super._complete;\n    }\n    unsubscribe() {\n        var _a;\n        if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {\n            const { closed } = this;\n            super.unsubscribe();\n            !closed && ((_a = this.onFinalize) === null || _a === void 0 ? void 0 : _a.call(this));\n        }\n    }\n}\n","import { EMPTY } from '../observable/empty';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function take(count) {\n    return count <= 0\n        ?\n            () => EMPTY\n        : operate((source, subscriber) => {\n            let seen = 0;\n            source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n                if (++seen <= count) {\n                    subscriber.next(value);\n                    if (count <= seen) {\n                        subscriber.complete();\n                    }\n                }\n            }));\n        });\n}\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\nimport { noop } from '../util/noop';\nexport function takeUntil(notifier) {\n    return operate((source, subscriber) => {\n        innerFrom(notifier).subscribe(createOperatorSubscriber(subscriber, () => subscriber.complete(), noop));\n        !subscriber.closed && source.subscribe(subscriber);\n    });\n}\n","import { isFunction } from './isFunction';\nexport function hasLift(source) {\n    return isFunction(source === null || source === void 0 ? void 0 : source.lift);\n}\nexport function operate(init) {\n    return (source) => {\n        if (hasLift(source)) {\n            return source.lift(function (liftedSource) {\n                try {\n                    return init(liftedSource, this);\n                }\n                catch (err) {\n                    this.error(err);\n                }\n            });\n        }\n        throw new TypeError('Unable to lift unknown Observable type');\n    };\n}\n","import * as i2 from '@angular/cdk/overlay';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Directive, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { _countGroupLabelsBeforeLegacyOption, _getLegacyOptionScrollPosition, MAT_LEGACY_OPTION_PARENT_COMPONENT, MatLegacyOption, MAT_LEGACY_OPTGROUP, MatLegacyOptionModule } from '@angular/material/legacy-core';\nimport { MatLegacyFormFieldControl, MatLegacyFormFieldModule } from '@angular/material/legacy-form-field';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { MAT_SELECT_TRIGGER, _MatSelectBase, MAT_SELECT_SCROLL_STRATEGY_PROVIDER } from '@angular/material/select';\nexport { MAT_SELECT_CONFIG as MAT_LEGACY_SELECT_CONFIG, MAT_SELECT_SCROLL_STRATEGY as MAT_LEGACY_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER as MAT_LEGACY_SELECT_SCROLL_STRATEGY_PROVIDER, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY as MAT_LEGACY_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_SELECT_TRIGGER as MAT_LEGACY_SELECT_TRIGGER } from '@angular/material/select';\nimport { takeUntil, take } from 'rxjs/operators';\nimport { trigger, transition, query, animateChild, state, style, animate } from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n * @deprecated Use `matSelectAnimations` from `@angular/material/select` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nconst matLegacySelectAnimations = {\n    /**\n     * This animation ensures the select's overlay panel animation (transformPanel) is called when\n     * closing the select.\n     * This is needed due to https://github.com/angular/angular/issues/23302\n     */\n    transformPanelWrap: trigger('transformPanelWrap', [\n        transition('* => void', query('@transformPanel', [animateChild()], { optional: true })),\n    ]),\n    /**\n     * This animation transforms the select's overlay panel on and off the page.\n     *\n     * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n     * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n     * side to ensure the option text correctly overlaps the trigger text.\n     *\n     * When the panel is removed from the DOM, it simply fades out linearly.\n     */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            transform: 'scaleY(0.8)',\n            minWidth: '100%',\n            opacity: 0,\n        })),\n        state('showing', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 32px)',\n            transform: 'scaleY(1)',\n        })),\n        state('showing-multiple', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 64px)',\n            transform: 'scaleY(1)',\n        })),\n        transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 }))),\n    ]),\n};\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n/**\n * The max height of the select's overlay panel.\n * @deprecated Use `SELECT_PANEL_MAX_HEIGHT` from `@angular/material/select` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nconst SELECT_PANEL_MAX_HEIGHT = 256;\n/**\n * The panel's padding on the x-axis.\n * @deprecated Use `SELECT_PANEL_PADDING_X` from `@angular/material/select` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nconst SELECT_PANEL_PADDING_X = 16;\n/**\n * The panel's x axis padding if it is indented (e.g. there is an option group).\n * @deprecated Use `SELECT_PANEL_INDENT_PADDING_X` from `@angular/material/select` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nconst SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/**\n * The height of the select items in `em` units.\n * @deprecated Use `SELECT_ITEM_HEIGHT_EM` from `@angular/material/select` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nconst SELECT_ITEM_HEIGHT_EM = 3;\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 16 = 40\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n *\n * @deprecated Use `SELECT_MULTIPLE_PANEL_PADDING_X` from `@angular/material/select` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nconst SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 16;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n * @deprecated Use `SELECT_PANEL_VIEWPORT_PADDING` from `@angular/material/select` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nconst SELECT_PANEL_VIEWPORT_PADDING = 8;\n/**\n * Change event object that is emitted when the select value has changed.\n * @deprecated Use `MatSelectChange` from `@angular/material/select` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacySelectChange {\n    constructor(\n    /** Reference to the select that emitted the change event. */\n    source, \n    /** Current value of the select that emitted the event. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n * @deprecated Use `MatSelectTrigger` from `@angular/material/select` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacySelectTrigger {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatLegacySelectTrigger, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: MatLegacySelectTrigger, selector: \"mat-select-trigger\", providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatLegacySelectTrigger }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatLegacySelectTrigger, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-select-trigger',\n                    providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatLegacySelectTrigger }],\n                }]\n        }] });\n/**\n * @deprecated Use `MatSelect` from `@angular/material/select` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacySelect extends _MatSelectBase {\n    constructor() {\n        super(...arguments);\n        /** The scroll position of the overlay panel, calculated to center the selected option. */\n        this._scrollTop = 0;\n        /** The cached font-size of the trigger element. */\n        this._triggerFontSize = 0;\n        /** The value of the select panel's transform-origin property. */\n        this._transformOrigin = 'top';\n        /**\n         * The y-offset of the overlay panel in relation to the trigger's top start corner.\n         * This must be adjusted to align the selected option text over the trigger text.\n         * when the panel opens. Will change based on the y-position of the selected option.\n         */\n        this._offsetY = 0;\n        this._positions = [\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'top',\n            },\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'bottom',\n            },\n        ];\n    }\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     */\n    _calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n        const halfOptionHeight = itemHeight / 2;\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n    ngOnInit() {\n        super.ngOnInit();\n        this._viewportRuler\n            .change()\n            .pipe(takeUntil(this._destroy))\n            .subscribe(() => {\n            if (this.panelOpen) {\n                this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n                this._changeDetectorRef.markForCheck();\n            }\n        });\n    }\n    open() {\n        if (super._canOpen()) {\n            super.open();\n            this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n            // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n            // `parseInt` ignores the trailing 'px' and converts this to a number.\n            this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n            this._calculateOverlayPosition();\n            // Set the font size on the panel element once it exists.\n            this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n                if (this._triggerFontSize &&\n                    this._overlayDir.overlayRef &&\n                    this._overlayDir.overlayRef.overlayElement) {\n                    this._overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n                }\n            });\n        }\n    }\n    /** Scrolls the active option into view. */\n    _scrollOptionIntoView(index) {\n        const labelCount = _countGroupLabelsBeforeLegacyOption(index, this.options, this.optionGroups);\n        const itemHeight = this._getItemHeight();\n        if (index === 0 && labelCount === 1) {\n            // If we've got one group label before the option and we're at the top option,\n            // scroll the list to the top. This is better UX than scrolling the list to the\n            // top of the option, because it allows the user to read the top group's label.\n            this.panel.nativeElement.scrollTop = 0;\n        }\n        else {\n            this.panel.nativeElement.scrollTop = _getLegacyOptionScrollPosition((index + labelCount) * itemHeight, itemHeight, this.panel.nativeElement.scrollTop, SELECT_PANEL_MAX_HEIGHT);\n        }\n    }\n    _positioningSettled() {\n        this._calculateOverlayOffsetX();\n        this.panel.nativeElement.scrollTop = this._scrollTop;\n    }\n    _panelDoneAnimating(isOpen) {\n        if (this.panelOpen) {\n            this._scrollTop = 0;\n        }\n        else {\n            this._overlayDir.offsetX = 0;\n            this._changeDetectorRef.markForCheck();\n        }\n        super._panelDoneAnimating(isOpen);\n    }\n    _getChangeEvent(value) {\n        return new MatLegacySelectChange(this, value);\n    }\n    _getOverlayMinWidth() {\n        return this._triggerRect?.width;\n    }\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    _calculateOverlayOffsetX() {\n        const overlayRect = this._overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const isRtl = this._isRtl();\n        const paddingWidth = this.multiple\n            ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X\n            : SELECT_PANEL_PADDING_X * 2;\n        let offsetX;\n        // Adjust the offset, depending on the option padding.\n        if (this.multiple) {\n            offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n        }\n        else if (this.disableOptionCentering) {\n            offsetX = SELECT_PANEL_PADDING_X;\n        }\n        else {\n            let selected = this._selectionModel.selected[0] || this.options.first;\n            offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n        }\n        // Invert the offset in LTR.\n        if (!isRtl) {\n            offsetX *= -1;\n        }\n        // Determine how much the select overflows on each side.\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width + (isRtl ? 0 : paddingWidth);\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this._overlayDir.offsetX = Math.round(offsetX);\n        this._overlayDir.overlayRef.updatePosition();\n    }\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     */\n    _calculateOverlayOffsetY(selectedIndex, scrollBuffer, maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n        let optionOffsetFromPanelTop;\n        // Disable offset if requested by user by returning 0 as value to offset\n        if (this.disableOptionCentering) {\n            return 0;\n        }\n        if (this._scrollTop === 0) {\n            optionOffsetFromPanelTop = selectedIndex * itemHeight;\n        }\n        else if (this._scrollTop === maxScroll) {\n            const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n            const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n            // The first item is partially out of the viewport. Therefore we need to calculate what\n            // portion of it is shown in the viewport and account for it in our offset.\n            let partialItemHeight = itemHeight - ((this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight);\n            // Because the panel height is longer than the height of the options alone,\n            // there is always extra padding at the top or bottom of the panel. When\n            // scrolled to the very bottom, this padding is at the top of the panel and\n            // must be added to the offset.\n            optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n        }\n        else {\n            // If the option was scrolled to the middle of the panel using a scroll buffer,\n            // its offset will be the scroll buffer minus the half height that was added to\n            // center it.\n            optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n        }\n        // The final offset is the option's offset from the top, adjusted for the height difference,\n        // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n        // The value is rounded to prevent some browsers from blurring the content.\n        return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n    }\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     */\n    _checkOverlayWithinViewport(maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        const bottomSpaceAvailable = viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n        const panelHeightTop = Math.abs(this._offsetY);\n        const totalPanelHeight = Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        }\n        else if (panelHeightTop > topSpaceAvailable) {\n            this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        }\n        else {\n            this._transformOrigin = this._getOriginBasedOnOption();\n        }\n    }\n    /** Adjusts the overlay panel up to fit in the viewport. */\n    _adjustPanelUp(panelHeightBottom, bottomSpaceAvailable) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this._scrollTop -= distanceBelowViewport;\n        this._offsetY -= distanceBelowViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this._scrollTop <= 0) {\n            this._scrollTop = 0;\n            this._offsetY = 0;\n            this._transformOrigin = `50% bottom 0px`;\n        }\n    }\n    /** Adjusts the overlay panel down to fit in the viewport. */\n    _adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this._scrollTop += distanceAboveViewport;\n        this._offsetY += distanceAboveViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this._scrollTop >= maxScroll) {\n            this._scrollTop = maxScroll;\n            this._offsetY = 0;\n            this._transformOrigin = `50% top 0px`;\n            return;\n        }\n    }\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n    _calculateOverlayPosition() {\n        const itemHeight = this._getItemHeight();\n        const items = this._getItemCount();\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const scrollContainerHeight = items * itemHeight;\n        // The farthest the panel can be scrolled before it hits the bottom\n        const maxScroll = scrollContainerHeight - panelHeight;\n        // If no value is selected we open the popup to the first item.\n        let selectedOptionOffset;\n        if (this.empty) {\n            selectedOptionOffset = 0;\n        }\n        else {\n            selectedOptionOffset = Math.max(this.options.toArray().indexOf(this._selectionModel.selected[0]), 0);\n        }\n        selectedOptionOffset += _countGroupLabelsBeforeLegacyOption(selectedOptionOffset, this.options, this.optionGroups);\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        const scrollBuffer = panelHeight / 2;\n        this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._checkOverlayWithinViewport(maxScroll);\n    }\n    /** Sets the transform origin point based on the selected option. */\n    _getOriginBasedOnOption() {\n        const itemHeight = this._getItemHeight();\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n        return `50% ${originY}px 0px`;\n    }\n    /** Calculates the height of the select's options. */\n    _getItemHeight() {\n        return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n    /** Calculates the amount of items in the select. This includes options and group labels. */\n    _getItemCount() {\n        return this.options.length + this.optionGroups.length;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatLegacySelect, deps: null, target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.0\", type: MatLegacySelect, selector: \"mat-select\", inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", tabIndex: \"tabIndex\" }, host: { attributes: { \"role\": \"combobox\", \"aria-autocomplete\": \"none\", \"aria-haspopup\": \"true\", \"ngSkipHydration\": \"\" }, listeners: { \"keydown\": \"_handleKeydown($event)\", \"focus\": \"_onFocus()\", \"blur\": \"_onBlur()\" }, properties: { \"attr.id\": \"id\", \"attr.tabindex\": \"tabIndex\", \"attr.aria-controls\": \"panelOpen ? id + \\\"-panel\\\" : null\", \"attr.aria-expanded\": \"panelOpen\", \"attr.aria-label\": \"ariaLabel || null\", \"attr.aria-required\": \"required.toString()\", \"attr.aria-disabled\": \"disabled.toString()\", \"attr.aria-invalid\": \"errorState\", \"attr.aria-activedescendant\": \"_getAriaActiveDescendant()\", \"class.mat-select-disabled\": \"disabled\", \"class.mat-select-invalid\": \"errorState\", \"class.mat-select-required\": \"required\", \"class.mat-select-empty\": \"empty\", \"class.mat-select-multiple\": \"multiple\" }, classAttribute: \"mat-select\" }, providers: [\n            { provide: MatLegacyFormFieldControl, useExisting: MatLegacySelect },\n            { provide: MAT_LEGACY_OPTION_PARENT_COMPONENT, useExisting: MatLegacySelect },\n        ], queries: [{ propertyName: \"customTrigger\", first: true, predicate: MAT_SELECT_TRIGGER, descendants: true }, { propertyName: \"options\", predicate: MatLegacyOption, descendants: true }, { propertyName: \"optionGroups\", predicate: MAT_LEGACY_OPTGROUP, descendants: true }], exportAs: [\"matSelect\"], usesInheritance: true, ngImport: i0, template: \"<!--\\n Note that the select trigger element specifies `aria-owns` pointing to the listbox overlay.\\n While aria-owns is not required for the ARIA 1.2 `role=\\\"combobox\\\"` interaction pattern,\\n it fixes an issue with VoiceOver when the select appears inside of an `aria-model=\\\"true\\\"`\\n element (e.g. a dialog). Without this `aria-owns`, the `aria-modal` on a dialog prevents\\n VoiceOver from \\\"seeing\\\" the select's listbox overlay for aria-activedescendant.\\n Using `aria-owns` re-parents the select overlay so that it works again.\\n See https://github.com/angular/components/issues/20694\\n-->\\n<div cdk-overlay-origin\\n     [attr.aria-owns]=\\\"panelOpen ? id + '-panel' : null\\\"\\n     class=\\\"mat-select-trigger\\\"\\n     (click)=\\\"toggle()\\\"\\n     #origin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-select-value\\\" [ngSwitch]=\\\"empty\\\" [attr.id]=\\\"_valueId\\\">\\n    <span class=\\\"mat-select-placeholder mat-select-min-line\\\" *ngSwitchCase=\\\"true\\\">{{placeholder}}</span>\\n    <span class=\\\"mat-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span class=\\\"mat-select-min-line\\\" *ngSwitchDefault>{{triggerValue}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-select-arrow-wrapper\\\"><div class=\\\"mat-select-arrow\\\"></div></div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"origin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayMinWidth]=\\\"_getOverlayMinWidth()\\\"\\n  [cdkConnectedOverlayOffsetY]=\\\"_offsetY\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div class=\\\"mat-select-panel-wrap\\\" [@transformPanelWrap]>\\n    <div\\n      #panel\\n      role=\\\"listbox\\\"\\n      tabindex=\\\"-1\\\"\\n      class=\\\"mat-select-panel {{ _getPanelTheme() }}\\\"\\n      [attr.id]=\\\"id + '-panel'\\\"\\n      [attr.aria-multiselectable]=\\\"multiple\\\"\\n      [attr.aria-label]=\\\"ariaLabel || null\\\"\\n      [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n      [ngClass]=\\\"panelClass\\\"\\n      [@transformPanel]=\\\"multiple ? 'showing-multiple' : 'showing'\\\"\\n      (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n      [style.transformOrigin]=\\\"_transformOrigin\\\"\\n      [style.font-size.px]=\\\"_triggerFontSize\\\"\\n      (keydown)=\\\"_handleKeydown($event)\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\", styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-flex;align-items:center;cursor:pointer;position:relative;box-sizing:border-box;width:100%}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;user-select:none;cursor:default}.mat-select-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{height:16px;flex-shrink:0;display:inline-flex;align-items:center}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid rgba(0,0,0,0);border-right:5px solid rgba(0,0,0,0);border-top:5px solid;margin:0 4px}.mat-form-field.mat-focused .mat-select-arrow{transform:translateX(0)}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px;outline:0}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:rgba(0,0,0,0);-webkit-text-fill-color:rgba(0,0,0,0);transition:none;display:block}.mat-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;visibility:hidden}\"], dependencies: [{ kind: \"directive\", type: i1.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i1.NgSwitch, selector: \"[ngSwitch]\", inputs: [\"ngSwitch\"] }, { kind: \"directive\", type: i1.NgSwitchCase, selector: \"[ngSwitchCase]\", inputs: [\"ngSwitchCase\"] }, { kind: \"directive\", type: i1.NgSwitchDefault, selector: \"[ngSwitchDefault]\" }, { kind: \"directive\", type: i2.CdkConnectedOverlay, selector: \"[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]\", inputs: [\"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayPositionStrategy\", \"cdkConnectedOverlayOffsetX\", \"cdkConnectedOverlayOffsetY\", \"cdkConnectedOverlayWidth\", \"cdkConnectedOverlayHeight\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayMinHeight\", \"cdkConnectedOverlayBackdropClass\", \"cdkConnectedOverlayPanelClass\", \"cdkConnectedOverlayViewportMargin\", \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayDisableClose\", \"cdkConnectedOverlayTransformOriginOn\", \"cdkConnectedOverlayHasBackdrop\", \"cdkConnectedOverlayLockPosition\", \"cdkConnectedOverlayFlexibleDimensions\", \"cdkConnectedOverlayGrowAfterOpen\", \"cdkConnectedOverlayPush\"], outputs: [\"backdropClick\", \"positionChange\", \"attach\", \"detach\", \"overlayKeydown\", \"overlayOutsideClick\"], exportAs: [\"cdkConnectedOverlay\"] }, { kind: \"directive\", type: i2.CdkOverlayOrigin, selector: \"[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]\", exportAs: [\"cdkOverlayOrigin\"] }], animations: [\n            matLegacySelectAnimations.transformPanelWrap,\n            matLegacySelectAnimations.transformPanel,\n        ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatLegacySelect, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-select', exportAs: 'matSelect', inputs: ['disabled', 'disableRipple', 'tabIndex'], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        'role': 'combobox',\n                        'aria-autocomplete': 'none',\n                        // TODO(crisbeto): the value for aria-haspopup should be `listbox`, but currently it's difficult\n                        // to sync into Google, because of an outdated automated a11y check which flags it as an invalid\n                        // value. At some point we should try to switch it back to being `listbox`.\n                        'aria-haspopup': 'true',\n                        'class': 'mat-select',\n                        '[attr.id]': 'id',\n                        '[attr.tabindex]': 'tabIndex',\n                        '[attr.aria-controls]': 'panelOpen ? id + \"-panel\" : null',\n                        '[attr.aria-expanded]': 'panelOpen',\n                        '[attr.aria-label]': 'ariaLabel || null',\n                        '[attr.aria-required]': 'required.toString()',\n                        '[attr.aria-disabled]': 'disabled.toString()',\n                        '[attr.aria-invalid]': 'errorState',\n                        '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n                        '[class.mat-select-disabled]': 'disabled',\n                        '[class.mat-select-invalid]': 'errorState',\n                        '[class.mat-select-required]': 'required',\n                        '[class.mat-select-empty]': 'empty',\n                        '[class.mat-select-multiple]': 'multiple',\n                        '(keydown)': '_handleKeydown($event)',\n                        '(focus)': '_onFocus()',\n                        '(blur)': '_onBlur()',\n                        'ngSkipHydration': '',\n                    }, animations: [\n                        matLegacySelectAnimations.transformPanelWrap,\n                        matLegacySelectAnimations.transformPanel,\n                    ], providers: [\n                        { provide: MatLegacyFormFieldControl, useExisting: MatLegacySelect },\n                        { provide: MAT_LEGACY_OPTION_PARENT_COMPONENT, useExisting: MatLegacySelect },\n                    ], template: \"<!--\\n Note that the select trigger element specifies `aria-owns` pointing to the listbox overlay.\\n While aria-owns is not required for the ARIA 1.2 `role=\\\"combobox\\\"` interaction pattern,\\n it fixes an issue with VoiceOver when the select appears inside of an `aria-model=\\\"true\\\"`\\n element (e.g. a dialog). Without this `aria-owns`, the `aria-modal` on a dialog prevents\\n VoiceOver from \\\"seeing\\\" the select's listbox overlay for aria-activedescendant.\\n Using `aria-owns` re-parents the select overlay so that it works again.\\n See https://github.com/angular/components/issues/20694\\n-->\\n<div cdk-overlay-origin\\n     [attr.aria-owns]=\\\"panelOpen ? id + '-panel' : null\\\"\\n     class=\\\"mat-select-trigger\\\"\\n     (click)=\\\"toggle()\\\"\\n     #origin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-select-value\\\" [ngSwitch]=\\\"empty\\\" [attr.id]=\\\"_valueId\\\">\\n    <span class=\\\"mat-select-placeholder mat-select-min-line\\\" *ngSwitchCase=\\\"true\\\">{{placeholder}}</span>\\n    <span class=\\\"mat-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span class=\\\"mat-select-min-line\\\" *ngSwitchDefault>{{triggerValue}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-select-arrow-wrapper\\\"><div class=\\\"mat-select-arrow\\\"></div></div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"origin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayMinWidth]=\\\"_getOverlayMinWidth()\\\"\\n  [cdkConnectedOverlayOffsetY]=\\\"_offsetY\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div class=\\\"mat-select-panel-wrap\\\" [@transformPanelWrap]>\\n    <div\\n      #panel\\n      role=\\\"listbox\\\"\\n      tabindex=\\\"-1\\\"\\n      class=\\\"mat-select-panel {{ _getPanelTheme() }}\\\"\\n      [attr.id]=\\\"id + '-panel'\\\"\\n      [attr.aria-multiselectable]=\\\"multiple\\\"\\n      [attr.aria-label]=\\\"ariaLabel || null\\\"\\n      [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n      [ngClass]=\\\"panelClass\\\"\\n      [@transformPanel]=\\\"multiple ? 'showing-multiple' : 'showing'\\\"\\n      (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n      [style.transformOrigin]=\\\"_transformOrigin\\\"\\n      [style.font-size.px]=\\\"_triggerFontSize\\\"\\n      (keydown)=\\\"_handleKeydown($event)\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\", styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-flex;align-items:center;cursor:pointer;position:relative;box-sizing:border-box;width:100%}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;user-select:none;cursor:default}.mat-select-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{height:16px;flex-shrink:0;display:inline-flex;align-items:center}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid rgba(0,0,0,0);border-right:5px solid rgba(0,0,0,0);border-top:5px solid;margin:0 4px}.mat-form-field.mat-focused .mat-select-arrow{transform:translateX(0)}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px;outline:0}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:rgba(0,0,0,0);-webkit-text-fill-color:rgba(0,0,0,0);transition:none;display:block}.mat-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;visibility:hidden}\"] }]\n        }], propDecorators: { options: [{\n                type: ContentChildren,\n                args: [MatLegacyOption, { descendants: true }]\n            }], optionGroups: [{\n                type: ContentChildren,\n                args: [MAT_LEGACY_OPTGROUP, { descendants: true }]\n            }], customTrigger: [{\n                type: ContentChild,\n                args: [MAT_SELECT_TRIGGER]\n            }] } });\n\n/**\n * @deprecated Use `MatSelectModule` from `@angular/material/select` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacySelectModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatLegacySelectModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.0\", ngImport: i0, type: MatLegacySelectModule, declarations: [MatLegacySelect, MatLegacySelectTrigger], imports: [CommonModule, OverlayModule, MatLegacyOptionModule, MatCommonModule], exports: [CdkScrollableModule,\n            MatLegacyFormFieldModule,\n            MatLegacySelect,\n            MatLegacySelectTrigger,\n            MatLegacyOptionModule,\n            MatCommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatLegacySelectModule, providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER], imports: [CommonModule, OverlayModule, MatLegacyOptionModule, MatCommonModule, CdkScrollableModule,\n            MatLegacyFormFieldModule,\n            MatLegacyOptionModule,\n            MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatLegacySelectModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, OverlayModule, MatLegacyOptionModule, MatCommonModule],\n                    exports: [\n                        CdkScrollableModule,\n                        MatLegacyFormFieldModule,\n                        MatLegacySelect,\n                        MatLegacySelectTrigger,\n                        MatLegacyOptionModule,\n                        MatCommonModule,\n                    ],\n                    declarations: [MatLegacySelect, MatLegacySelectTrigger],\n                    providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatLegacySelect, MatLegacySelectChange, MatLegacySelectModule, MatLegacySelectTrigger, matLegacySelectAnimations };\n","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import getPrototypeOf from \"./getPrototypeOf.js\";\nimport isNativeReflectConstruct from \"./isNativeReflectConstruct.js\";\nimport possibleConstructorReturn from \"./possibleConstructorReturn.js\";\nexport default function _createSuper(Derived) {\n  var hasNativeReflectConstruct = isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return possibleConstructorReturn(this, result);\n  };\n}","import _typeof from \"./typeof.js\";\nimport assertThisInitialized from \"./assertThisInitialized.js\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return assertThisInitialized(self);\n}","import superPropBase from \"./superPropBase.js\";\nexport default function _get() {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get.bind();\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n      if (desc.get) {\n        return desc.get.call(arguments.length < 3 ? target : receiver);\n      }\n      return desc.value;\n    };\n  }\n  return _get.apply(this, arguments);\n}","import getPrototypeOf from \"./getPrototypeOf.js\";\nexport default function _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = getPrototypeOf(object);\n    if (object === null) break;\n  }\n  return object;\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","export default function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}"],"x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]}