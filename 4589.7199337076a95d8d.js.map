{"version":3,"file":"4589.7199337076a95d8d.js","mappings":"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","names":["regexpEscape","s","replace","toNumberString","value","_a","_c","decimalMark","toString","regexpDecimalMark","n","trim","negative","match","getNumberRegexp","RegExp","exports","toNumber","NaN","Number","AttributeWidgetComponent_ng_template_1_Template","rf","ctx","AttributesBuilderComponent_div_2_Template","i0","i_r3","index","ctx_r0","attributes","discoverWidget","widget","appearance","AttributesBuilderComponent_div_3_Template","ATTRIBUTE_WIDGET","InjectionToken","WidgetsService","widgets","_classCallCheck","this","_createClass","key","find","w","name","ɵfac","t","ɵprov","token","factory","WidgetPluginManager","_BasePluginManager","_inherits","_super","_createSuper","pcm","moduleLoader","call","of","PluginDef","BasePluginManager","i1","i2","providedIn","AttributeWidgetDirective","viewContainerRef","ɵdir","type","selectors","AttributeWidgetComponent","componentFactoryResolver","controlContainer","_this","subscribe","componentFactory","resolveComponentFactory","component","widgetHost","clear","componentRef","createComponent","instance","attribute","i1$1","ɵcmp","viewQuery","_t","first","inputs","decls","vars","consts","template","control","dependencies","AttributesBuilderComponent","widgetsService","wpm","attributesForm","UntypedFormGroup","UntypedFormArray","_attributeValues","onTouched","get","set","attributeValues","applyValues","changes","_this2","previousValue","currentValue","attributesArray","length","removeAt","forEach","attr","push","UntypedFormControl","Validators","displayName","label","required","map","attr2","val","console","log","concat","setValue","emitEvent","fn","valueChanges","isDisabled","disable","enable","c","valid","invalidForm","message","getPlugin","_this3","controls","attrValue","av","undefined","updateValueAndValidity","features","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","NG_VALIDATORS","i3","TextWidgetComponent","i2$1","i3$1","MinMaxWidgetComponent","AttributeMatcherService","matchAttribute","computedValue","len","i","AttributePipe","attributeMatcher","getComputedValue","ɵpipe","pure","AttributeTypes","Text","Complex","Float","Array","Bool","Date","AttributeWidget","_Plugin","_super2","data","_this4","id","schema","Attribute","Plugin","options","a","AttributeValue","intValue","isArray","reduce","p","_store","_toConsumableArray","textFactory","title","minmaxFactory","AttributesModule","widgetPlugins","register","ɵmod","ɵinj","providers","useFactory","imports","CommonModule","ReactiveFormsModule","MaterialModule","HttpClientJsonpModule","ValueComputerService","_this5","computedAttributes","computeAttribute","resolveComputedValue","_objectSpread","compute","isNaN","AttributeSerializerService","valueComputer","obj","prop","attrValues","serialize","toJSON","ignoreAttributes","arguments","deserialize","_defineProperty","findIndex","b","setting","_this6","fg","convertToGroup","_toPropertyKey_js__WEBPACK_IMPORTED_MODULE_0__","Z","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","apply","_objectSpread2","target","source","_defineProperty_js__WEBPACK_IMPORTED_MODULE_0__","getOwnPropertyDescriptors","defineProperties"],"sourceRoot":"webpack:///","sources":["./node_modules/number-string/dist/app.js","./node_modules/@rollthecloudinc/attributes/fesm2022/rollthecloudinc-attributes.mjs","./node_modules/@babel/runtime/helpers/esm/defineProperty.js","./node_modules/@babel/runtime/helpers/esm/objectSpread2.js"],"sourcesContent":["\"use strict\";\nexports.__esModule = true;\nexports.toClosest = exports.toMoney = exports.toClean = exports.toNumber = exports.toNumberString = void 0;\n/**\n * Escape special RegExp characters in string\n */\nfunction regexpEscape(s) {\n    return s.replace(/[-[\\]/{}()*+?.\\\\^$]/g, \"\\\\$&\");\n}\n/**\n * Convert value to number string\n */\nfunction toNumberString(value, _a) {\n    var _b = _a === void 0 ? {} : _a, _c = _b.decimalMark, decimalMark = _c === void 0 ? \".\" : _c;\n    if (typeof value === \"number\") {\n        return value.toString();\n    }\n    if (typeof value !== \"string\") {\n        return \"NaN\";\n    }\n    var regexpDecimalMark = regexpEscape(decimalMark);\n    var n = value.trim();\n    var negative = n.match(/^\\(.*\\)$|^-/); //negative if matches '(...)' or '-...'\n    var getNumberRegexp = new RegExp(\"[^\\\\d\" + regexpDecimalMark + \"]|\" + regexpDecimalMark + \"(?=.*\" + regexpDecimalMark + \")|^\\\\D*\" + regexpDecimalMark + \"\\\\D*$\", \"g\");\n    n = n.replace(getNumberRegexp, \"\").replace(decimalMark, \".\"); //remove all except digits and last dot\n    if (n === \"\") {\n        n = \"NaN\";\n    }\n    else if (negative) {\n        n = \"-\" + n;\n    }\n    return n;\n}\nexports.toNumberString = toNumberString;\n/**\n * Convert value to number\n */\nfunction toNumber(value, _a) {\n    var _b = _a === void 0 ? {} : _a, _c = _b.decimalMark, decimalMark = _c === void 0 ? \".\" : _c;\n    var s = toNumberString(value, { decimalMark: decimalMark });\n    if (s === \"NaN\") {\n        return NaN;\n    }\n    return Number(s);\n}\nexports.toNumber = toNumber;\n/**\n * Like `toFixed` but removes trailing zeros\n */\nfunction toClean(value, _a) {\n    var _b = _a === void 0 ? {} : _a, _c = _b.decimalMark, decimalMark = _c === void 0 ? \".\" : _c, _d = _b.thousandSeperator, thousandSeperator = _d === void 0 ? null : _d, _e = _b.thousandSeparator, thousandSeparator = _e === void 0 ? \",\" : _e, _f = _b.maxPrecision, maxPrecision = _f === void 0 ? 100 : _f, _g = _b.minPrecision, minPrecision = _g === void 0 ? 0 : _g;\n    if (thousandSeperator) {\n        thousandSeparator = thousandSeperator;\n        console.error(\"`thousandSeperator` is deprecated use `thousandSeparator` instead.\");\n    }\n    value = toNumberString(value);\n    if (value === \"NaN\") {\n        return \"NaN\";\n    }\n    if (maxPrecision < 0) {\n        throw new Error(\"maxPrecision must be >= 0\");\n    }\n    if (minPrecision < 0) {\n        throw new Error(\"minPrecision must be >= 0\");\n    }\n    if (maxPrecision > 100) {\n        throw new Error(\"maxPrecision must be <= 100\");\n    }\n    if (minPrecision > 100) {\n        throw new Error(\"minPrecision must be <= 100\");\n    }\n    if (minPrecision > maxPrecision) {\n        throw new Error(\"minPrecision must be <= maxPrecision\");\n    }\n    var s = value;\n    // limit to maxPrecision\n    var dotIndex = s.lastIndexOf(\".\");\n    if (dotIndex > -1) {\n        var integer = (dotIndex === 0 ? \"0\" : s.slice(0, dotIndex));\n        var fraction = s.slice(dotIndex + 1, dotIndex + 1 + maxPrecision);\n        var remainder = s.slice(dotIndex + 1 + maxPrecision);\n        if (remainder.length > 0 && +remainder[0] > 4) {\n            // round up\n            var i = (BigInt(integer + fraction) + BigInt(1)).toString(10);\n            integer = i.slice(0, i.length - fraction.length);\n            fraction = i.slice(i.length - fraction.length);\n        }\n        s = integer + decimalMark + fraction;\n    }\n    else {\n        s += decimalMark;\n    }\n    // remove trailing 0s\n    var rmLen = 0;\n    for (var i = s.length - 1; i >= 0; i--) {\n        if (s[i] !== \"0\") {\n            break;\n        }\n        rmLen++;\n    }\n    s = s.slice(0, s.length - rmLen);\n    // limit to minPrecision\n    if (minPrecision > 0) {\n        var numZeros = void 0;\n        if (dotIndex > -1) {\n            numZeros = minPrecision - (s.length - dotIndex - 1);\n        }\n        else {\n            numZeros = minPrecision;\n        }\n        for (var i = 0; i < numZeros; i++) {\n            s += \"0\";\n        }\n    }\n    var regexpDecimalMark = regexpEscape(decimalMark);\n    var thousandSeparatorRegexp = new RegExp(\"\\\\d(?=(\\\\d{3})+\" + regexpDecimalMark + \")\", \"g\");\n    var trimRegexp = new RegExp(regexpDecimalMark + \"$\");\n    s = s.replace(thousandSeparatorRegexp, \"$&\" + thousandSeparator).replace(trimRegexp, \"\");\n    return s;\n}\nexports.toClean = toClean;\n/**\n * Convert string or number to currency string\n * modified from http://stackoverflow.com/a/149099/806777\\\n */\nfunction toMoney(value, _a) {\n    var _b = _a === void 0 ? {} : _a, _c = _b.decimalMark, decimalMark = _c === void 0 ? \".\" : _c, _d = _b.thousandSeperator, thousandSeperator = _d === void 0 ? null : _d, _e = _b.thousandSeparator, thousandSeparator = _e === void 0 ? \",\" : _e, _f = _b.maxPrecision, maxPrecision = _f === void 0 ? 2 : _f, _g = _b.minPrecision, minPrecision = _g === void 0 ? 2 : _g, _h = _b.symbol, symbol = _h === void 0 ? \"$\" : _h, _j = _b.symbolBehind, symbolBehind = _j === void 0 ? false : _j, _k = _b.useParens, useParens = _k === void 0 ? true : _k;\n    if (thousandSeperator) {\n        thousandSeparator = thousandSeperator;\n        console.error(\"`thousandSeperator` is deprecated use `thousandSeparator` instead.\");\n    }\n    var n = (typeof value === \"number\"\n        ? value\n        : toNumber(value, {\n            decimalMark: decimalMark\n        }));\n    var s = toNumberString(value, {\n        decimalMark: decimalMark\n    });\n    if (isNaN(n)) {\n        return \"NaN\";\n    }\n    if (n === Infinity) {\n        return \"Infinity\";\n    }\n    if (n === -Infinity) {\n        return (useParens ? \"(Infinity)\" : \"-Infinity\");\n    }\n    if (maxPrecision < 2 && typeof arguments[1].minPrecision === \"undefined\") {\n        minPrecision = maxPrecision;\n    }\n    if (minPrecision > 2 && typeof arguments[1].maxPrecision === \"undefined\") {\n        maxPrecision = minPrecision;\n    }\n    var negative = n < 0;\n    s = toClean(negative ? s.slice(1) : s, {\n        decimalMark: decimalMark,\n        thousandSeparator: thousandSeparator,\n        maxPrecision: maxPrecision,\n        minPrecision: minPrecision\n    });\n    s = (symbolBehind ? s + \" \" + symbol : symbol + s);\n    if (negative) {\n        s = (useParens ? \"(\" + s + \")\" : \"-\" + s);\n    }\n    return s;\n}\nexports.toMoney = toMoney;\n/**\n * Round number to closest multiple of number\n */\nfunction toClosest(value, roundTo) {\n    if (roundTo === void 0) { roundTo = 1; }\n    if (typeof value !== \"number\") {\n        value = toNumber(value);\n    }\n    if (isNaN(value)) {\n        return NaN;\n    }\n    if (value === Infinity || value === -Infinity) {\n        return value;\n    }\n    if (typeof roundTo !== \"number\") {\n        roundTo = toNumber(roundTo);\n    }\n    if (isNaN(roundTo)) {\n        throw Error(\"roundTo must be a number\");\n    }\n    if (roundTo === Infinity || roundTo === -Infinity) {\n        return roundTo;\n    }\n    var n = Math.round(value / roundTo) * roundTo;\n    var maxPrecision = 0;\n    while (!Number.isInteger(roundTo)) {\n        roundTo *= 10;\n        maxPrecision++;\n    }\n    n = +n.toFixed(maxPrecision);\n    return n;\n}\nexports.toClosest = toClosest;\n","import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Inject, Directive, Component, Input, ViewChild, forwardRef, Pipe, NgModule } from '@angular/core';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientJsonpModule } from '@angular/common/http';\nimport * as i1$1 from '@angular/forms';\nimport { UntypedFormGroup, UntypedFormArray, UntypedFormControl, Validators, NG_VALUE_ACCESSOR, NG_VALIDATORS, ReactiveFormsModule } from '@angular/forms';\nimport { MaterialModule } from '@rollthecloudinc/material';\nimport { of } from 'rxjs';\nimport * as i1 from '@rollthecloudinc/plugin';\nimport { BasePluginManager, PluginDef, Plugin } from '@rollthecloudinc/plugin';\nimport * as i2 from '@rollthecloudinc/utils';\nimport * as i2$1 from '@angular/material/legacy-form-field';\nimport * as i3$1 from '@angular/material/legacy-input';\nimport { toNumber } from 'number-string';\n\nconst ATTRIBUTE_WIDGET = new InjectionToken('AttributeWidget');\n\nclass WidgetsService {\n    constructor(widgets) {\n        this.widgets = widgets;\n    }\n    get(widget) {\n        return this.widgets.find(w => w.name === widget);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: WidgetsService, deps: [{ token: ATTRIBUTE_WIDGET }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: WidgetsService }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: WidgetsService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: Array, decorators: [{\n                    type: Inject,\n                    args: [ATTRIBUTE_WIDGET]\n                }] }]; } });\n\nclass WidgetPluginManager extends BasePluginManager {\n    constructor(pcm, moduleLoader) {\n        super(pcm, moduleLoader);\n    }\n    pluginDef() {\n        return of(new PluginDef({ name: 'widget' }));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: WidgetPluginManager, deps: [{ token: i1.PluginConfigurationManager }, { token: i2.ModuleLoaderService }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: WidgetPluginManager, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: WidgetPluginManager, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.PluginConfigurationManager }, { type: i2.ModuleLoaderService }]; } });\n\nclass AttributeWidgetDirective {\n    constructor(viewContainerRef) {\n        this.viewContainerRef = viewContainerRef;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: AttributeWidgetDirective, deps: [{ token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.5\", type: AttributeWidgetDirective, selector: \"[classifiedsUiWidgetHost]\", ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: AttributeWidgetDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[classifiedsUiWidgetHost]'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }]; } });\n\nclass AttributeWidgetComponent {\n    constructor(componentFactoryResolver, controlContainer) {\n        this.componentFactoryResolver = componentFactoryResolver;\n        this.controlContainer = controlContainer;\n        this.appearance = \"legacy\";\n    }\n    ngOnInit() {\n        this.widget.subscribe(widget => {\n            const componentFactory = this.componentFactoryResolver.resolveComponentFactory(widget.component);\n            const viewContainerRef = this.widgetHost.viewContainerRef;\n            viewContainerRef.clear();\n            const componentRef = viewContainerRef.createComponent(componentFactory);\n            componentRef.instance.attribute = this.attribute;\n            componentRef.instance.appearance = this.appearance;\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: AttributeWidgetComponent, deps: [{ token: i0.ComponentFactoryResolver }, { token: i1$1.ControlContainer }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.5\", type: AttributeWidgetComponent, selector: \"classifieds-ui-attribute-widget\", inputs: { widget: \"widget\", attribute: \"attribute\", appearance: \"appearance\" }, viewQueries: [{ propertyName: \"widgetHost\", first: true, predicate: AttributeWidgetDirective, descendants: true, static: true }], ngImport: i0, template: `<ng-container [formGroup]=\"controlContainer.control\"><ng-template classifiedsUiWidgetHost></ng-template></ng-container>`, isInline: true, styles: [\"\"], dependencies: [{ kind: \"directive\", type: i1$1.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { kind: \"directive\", type: i1$1.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { kind: \"directive\", type: AttributeWidgetDirective, selector: \"[classifiedsUiWidgetHost]\" }] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: AttributeWidgetComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'classifieds-ui-attribute-widget', template: `<ng-container [formGroup]=\"controlContainer.control\"><ng-template classifiedsUiWidgetHost></ng-template></ng-container>` }]\n        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i1$1.ControlContainer }]; }, propDecorators: { widget: [{\n                type: Input\n            }], attribute: [{\n                type: Input\n            }], appearance: [{\n                type: Input\n            }], widgetHost: [{\n                type: ViewChild,\n                args: [AttributeWidgetDirective, { static: true }]\n            }] } });\n\nclass AttributesBuilderComponent {\n    set attributeValues(attributeValues) {\n        this._attributeValues = attributeValues;\n        this.applyValues();\n    }\n    get attributeValues() {\n        return this._attributeValues;\n    }\n    get attributesArray() {\n        return this.attributesForm.get('attributes');\n    }\n    constructor(widgetsService, wpm) {\n        this.widgetsService = widgetsService;\n        this.wpm = wpm;\n        this.attributes = [];\n        this.appearance = 'legacy';\n        this.attributesForm = new UntypedFormGroup({\n            attributes: new UntypedFormArray([])\n        });\n        this._attributeValues = [];\n        this.onTouched = () => { };\n    }\n    ngOnChanges(changes) {\n        if (changes.attributes && (!changes.attributes.previousValue || changes.attributes.previousValue !== changes.attributes.currentValue)) {\n            while (this.attributesArray.length !== 0) {\n                this.attributesArray.removeAt(0);\n            }\n            // @todo: Supports 2 levels of nesting currently (no recursion).\n            this.attributes.forEach(attr => {\n                this.attributesArray.push(new UntypedFormGroup({\n                    name: new UntypedFormControl(attr.name, Validators.required),\n                    type: new UntypedFormControl(attr.type, Validators.required),\n                    displayName: new UntypedFormControl(attr.label, Validators.required),\n                    value: new UntypedFormControl('', attr.required ? Validators.required : []),\n                    attributes: new UntypedFormArray(!attr.attributes ? [] : attr.attributes.map(attr2 => new UntypedFormGroup({\n                        name: new UntypedFormControl(attr2.name, Validators.required),\n                        type: new UntypedFormControl(attr2.type, Validators.required),\n                        displayName: new UntypedFormControl(attr2.label, Validators.required),\n                        value: new UntypedFormControl('', attr2.required ? Validators.required : [])\n                    })))\n                }));\n            });\n            this.applyValues();\n        }\n    }\n    writeValue(val) {\n        if (val) {\n            console.log(`write value: ${val}`);\n            this.attributesArray.setValue(val, { emitEvent: false });\n        }\n    }\n    registerOnChange(fn) {\n        this.attributesArray.valueChanges.subscribe(fn);\n    }\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    setDisabledState(isDisabled) {\n        if (isDisabled) {\n            this.attributesArray.disable();\n        }\n        else {\n            this.attributesArray.enable();\n        }\n    }\n    validate(c) {\n        return this.attributesForm.valid ? null : { invalidForm: { valid: false, message: \"attributes are invalid\" } };\n    }\n    discoverWidget(widget) {\n        // return this.widgetsService.get(widget);\n        return this.wpm.getPlugin(widget);\n    }\n    applyValues() {\n        this.attributesArray.controls.forEach((c, index) => {\n            const attrValue = this.attributeValues ? this.attributeValues.find(av => av.name === c.get('name').value) : undefined;\n            if (attrValue !== undefined) {\n                c.get('value').setValue(attrValue.value);\n                c.updateValueAndValidity();\n            }\n            c.get('attributes').controls.forEach(c => {\n                const attrValue = this.attributeValues && this.attributeValues[index] !== undefined ? this.attributeValues[index].attributes.find(av => av.name === c.get('name').value) : undefined;\n                if (attrValue !== undefined) {\n                    c.get('value').setValue(attrValue.value);\n                    c.updateValueAndValidity();\n                }\n            });\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: AttributesBuilderComponent, deps: [{ token: WidgetsService }, { token: WidgetPluginManager }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.5\", type: AttributesBuilderComponent, selector: \"classifieds-ui-attributes-builder\", inputs: { attributes: \"attributes\", appearance: \"appearance\", attributeValues: \"attributeValues\" }, providers: [\n            WidgetsService,\n            {\n                provide: NG_VALUE_ACCESSOR,\n                useExisting: forwardRef(() => AttributesBuilderComponent),\n                multi: true\n            },\n            {\n                provide: NG_VALIDATORS,\n                useExisting: forwardRef(() => AttributesBuilderComponent),\n                multi: true\n            },\n        ], usesOnChanges: true, ngImport: i0, template: \"<ng-container [formGroup]=\\\"attributesForm\\\">\\n  <div formArrayName=\\\"attributes\\\" class=\\\"attribute-fields\\\">\\n    <div *ngFor=\\\"let attribute of attributesArray.controls; let i=index\\\" formGroupName=\\\"{{i}}\\\" class=\\\"attribute-field-container\\\">\\n      <classifieds-ui-attribute-widget [attribute]=\\\"attributes[i]\\\" [widget]=\\\"discoverWidget(attributes[i].widget)\\\" [appearance]=\\\"appearance\\\"></classifieds-ui-attribute-widget>\\n    </div>\\n  </div>\\n</ng-container>\\n<div *ngIf=\\\"attributes.length == 0\\\">\\n  <p>No attributes available for ad type. Click next to continue.</p>\\n</div>\\n\", styles: [\"\"], dependencies: [{ kind: \"directive\", type: i3.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i1$1.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { kind: \"directive\", type: i1$1.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { kind: \"directive\", type: i1$1.FormGroupName, selector: \"[formGroupName]\", inputs: [\"formGroupName\"] }, { kind: \"directive\", type: i1$1.FormArrayName, selector: \"[formArrayName]\", inputs: [\"formArrayName\"] }, { kind: \"component\", type: AttributeWidgetComponent, selector: \"classifieds-ui-attribute-widget\", inputs: [\"widget\", \"attribute\", \"appearance\"] }] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: AttributesBuilderComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'classifieds-ui-attributes-builder', providers: [\n                        WidgetsService,\n                        {\n                            provide: NG_VALUE_ACCESSOR,\n                            useExisting: forwardRef(() => AttributesBuilderComponent),\n                            multi: true\n                        },\n                        {\n                            provide: NG_VALIDATORS,\n                            useExisting: forwardRef(() => AttributesBuilderComponent),\n                            multi: true\n                        },\n                    ], template: \"<ng-container [formGroup]=\\\"attributesForm\\\">\\n  <div formArrayName=\\\"attributes\\\" class=\\\"attribute-fields\\\">\\n    <div *ngFor=\\\"let attribute of attributesArray.controls; let i=index\\\" formGroupName=\\\"{{i}}\\\" class=\\\"attribute-field-container\\\">\\n      <classifieds-ui-attribute-widget [attribute]=\\\"attributes[i]\\\" [widget]=\\\"discoverWidget(attributes[i].widget)\\\" [appearance]=\\\"appearance\\\"></classifieds-ui-attribute-widget>\\n    </div>\\n  </div>\\n</ng-container>\\n<div *ngIf=\\\"attributes.length == 0\\\">\\n  <p>No attributes available for ad type. Click next to continue.</p>\\n</div>\\n\" }]\n        }], ctorParameters: function () { return [{ type: WidgetsService }, { type: WidgetPluginManager }]; }, propDecorators: { attributes: [{\n                type: Input\n            }], appearance: [{\n                type: Input\n            }], attributeValues: [{\n                type: Input\n            }] } });\n\nclass TextWidgetComponent {\n    constructor(controlContainer) {\n        this.controlContainer = controlContainer;\n        this.appearance = \"legacy\";\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: TextWidgetComponent, deps: [{ token: i1$1.ControlContainer }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.5\", type: TextWidgetComponent, selector: \"classifieds-ui-text-widget\", inputs: { attribute: \"attribute\", appearance: \"appearance\" }, ngImport: i0, template: \"<ng-container [formGroup]=\\\"controlContainer.control\\\">\\n  <mat-form-field [appearance]=\\\"appearance\\\">\\n    <input matInput [placeholder]=\\\"attribute.label\\\" formControlName=\\\"value\\\">\\n  </mat-form-field>\\n</ng-container>\\n\", styles: [\"\"], dependencies: [{ kind: \"directive\", type: i1$1.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i1$1.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i1$1.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { kind: \"directive\", type: i1$1.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { kind: \"directive\", type: i1$1.FormControlName, selector: \"[formControlName]\", inputs: [\"formControlName\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"] }, { kind: \"component\", type: i2$1.MatLegacyFormField, selector: \"mat-form-field\", inputs: [\"color\", \"appearance\", \"hideRequiredMarker\", \"hintLabel\", \"floatLabel\"], exportAs: [\"matFormField\"] }, { kind: \"directive\", type: i3$1.MatLegacyInput, selector: \"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]\", exportAs: [\"matInput\"] }] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: TextWidgetComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'classifieds-ui-text-widget', template: \"<ng-container [formGroup]=\\\"controlContainer.control\\\">\\n  <mat-form-field [appearance]=\\\"appearance\\\">\\n    <input matInput [placeholder]=\\\"attribute.label\\\" formControlName=\\\"value\\\">\\n  </mat-form-field>\\n</ng-container>\\n\" }]\n        }], ctorParameters: function () { return [{ type: i1$1.ControlContainer }]; }, propDecorators: { attribute: [{\n                type: Input\n            }], appearance: [{\n                type: Input\n            }] } });\n\nclass MinMaxWidgetComponent {\n    constructor(controlContainer) {\n        this.controlContainer = controlContainer;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: MinMaxWidgetComponent, deps: [{ token: i1$1.ControlContainer }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.5\", type: MinMaxWidgetComponent, selector: \"classifieds-ui-min-max-widget\", inputs: { attribute: \"attribute\" }, ngImport: i0, template: \"<ng-container [formGroup]=\\\"controlContainer.control\\\">\\n  <label>{{ attribute.label }}</label>\\n  <div formArrayName=\\\"attributes\\\">\\n    <mat-form-field formGroupName=\\\"0\\\">\\n      <input matInput type=\\\"number\\\" [placeholder]=\\\"attribute.attributes[0].label\\\" formControlName=\\\"value\\\">\\n    </mat-form-field>\\n    <mat-form-field formGroupName=\\\"1\\\">\\n      <input matInput type=\\\"number\\\" [placeholder]=\\\"attribute.attributes[1].label\\\" formControlName=\\\"value\\\">\\n    </mat-form-field>\\n  </div>\\n</ng-container>\\n\", styles: [\"\"], dependencies: [{ kind: \"directive\", type: i1$1.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i1$1.NumberValueAccessor, selector: \"input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]\" }, { kind: \"directive\", type: i1$1.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i1$1.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { kind: \"directive\", type: i1$1.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { kind: \"directive\", type: i1$1.FormControlName, selector: \"[formControlName]\", inputs: [\"formControlName\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"] }, { kind: \"directive\", type: i1$1.FormGroupName, selector: \"[formGroupName]\", inputs: [\"formGroupName\"] }, { kind: \"directive\", type: i1$1.FormArrayName, selector: \"[formArrayName]\", inputs: [\"formArrayName\"] }, { kind: \"component\", type: i2$1.MatLegacyFormField, selector: \"mat-form-field\", inputs: [\"color\", \"appearance\", \"hideRequiredMarker\", \"hintLabel\", \"floatLabel\"], exportAs: [\"matFormField\"] }, { kind: \"directive\", type: i3$1.MatLegacyInput, selector: \"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]\", exportAs: [\"matInput\"] }] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: MinMaxWidgetComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'classifieds-ui-min-max-widget', template: \"<ng-container [formGroup]=\\\"controlContainer.control\\\">\\n  <label>{{ attribute.label }}</label>\\n  <div formArrayName=\\\"attributes\\\">\\n    <mat-form-field formGroupName=\\\"0\\\">\\n      <input matInput type=\\\"number\\\" [placeholder]=\\\"attribute.attributes[0].label\\\" formControlName=\\\"value\\\">\\n    </mat-form-field>\\n    <mat-form-field formGroupName=\\\"1\\\">\\n      <input matInput type=\\\"number\\\" [placeholder]=\\\"attribute.attributes[1].label\\\" formControlName=\\\"value\\\">\\n    </mat-form-field>\\n  </div>\\n</ng-container>\\n\" }]\n        }], ctorParameters: function () { return [{ type: i1$1.ControlContainer }]; }, propDecorators: { attribute: [{\n                type: Input\n            }] } });\n\nclass AttributeMatcherService {\n    getComputedValue(attr, attributes) {\n        const attribute = attributes && attributes.length > 0 && this.matchAttribute(attr, attributes);\n        if (attribute) {\n            return attribute.computedValue;\n        }\n        else {\n            return;\n        }\n    }\n    getValue(attr, attributes) {\n        const attribute = attributes && attributes.length > 0 && this.matchAttribute(attr, attributes);\n        if (attribute) {\n            return attribute.value;\n        }\n        else {\n            return;\n        }\n    }\n    matchAttribute(attr, attributes) {\n        const len = attributes.length;\n        for (let i = 0; i < len; i++) {\n            if (attributes[i].attributes && attributes[i].attributes.length > 0) {\n                const value = this.matchAttribute(attr, attributes[i].attributes);\n                if (value) {\n                    return attributes[i];\n                }\n                else {\n                    continue;\n                }\n            }\n            else if (attr === attributes[i].name) {\n                return attributes[i];\n            }\n            else {\n                continue;\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: AttributeMatcherService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: AttributeMatcherService, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: AttributeMatcherService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }] });\n\nclass AttributePipe {\n    constructor(attributeMatcher) {\n        this.attributeMatcher = attributeMatcher;\n    }\n    transform(attributes, attr) {\n        const computedValue = this.attributeMatcher.getComputedValue(attr, attributes);\n        if (computedValue) {\n            return computedValue;\n        }\n        else {\n            return '';\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: AttributePipe, deps: [{ token: AttributeMatcherService }], target: i0.ɵɵFactoryTarget.Pipe }); }\n    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"14.0.0\", version: \"16.0.5\", ngImport: i0, type: AttributePipe, name: \"attribute\" }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: AttributePipe, decorators: [{\n            type: Pipe,\n            args: [{\n                    name: 'attribute'\n                }]\n        }], ctorParameters: function () { return [{ type: AttributeMatcherService }]; } });\n\nvar AttributeTypes;\n(function (AttributeTypes) {\n    AttributeTypes[AttributeTypes[\"Number\"] = 0] = \"Number\";\n    AttributeTypes[AttributeTypes[\"Text\"] = 1] = \"Text\";\n    AttributeTypes[AttributeTypes[\"Complex\"] = 2] = \"Complex\";\n    AttributeTypes[AttributeTypes[\"Float\"] = 3] = \"Float\";\n    AttributeTypes[AttributeTypes[\"Array\"] = 4] = \"Array\";\n    AttributeTypes[AttributeTypes[\"Bool\"] = 5] = \"Bool\";\n    AttributeTypes[AttributeTypes[\"Date\"] = 6] = \"Date\";\n})(AttributeTypes || (AttributeTypes = {}));\nclass AttributeWidget extends Plugin {\n    constructor(data) {\n        super(data);\n        if (data) {\n            this.name = this.id;\n            this.schema = data.schema ? new Attribute(data.schema) : undefined;\n            this.component = data.component;\n        }\n    }\n}\nclass Attribute {\n    constructor(data) {\n        this.attributes = [];\n        if (data) {\n            this.name = data.name;\n            this.widget = data.widget !== undefined ? data.widget : 'text';\n            this.type = data.type;\n            this.label = data.label;\n            this.required = data.required;\n            this.options = data.options;\n            if (data.attributes) {\n                this.attributes = data.attributes.map(a => new Attribute(a));\n            }\n        }\n    }\n}\nclass AttributeValue {\n    constructor(data) {\n        this.attributes = [];\n        if (data) {\n            this.name = data.name;\n            this.displayName = data.displayName;\n            this.type = data.type;\n            this.value = data.value;\n            this.intValue = data.intValue;\n            this.computedValue = data.computedValue;\n            if (data.attributes) {\n                if (Array.isArray(data.attributes)) {\n                    this.attributes = data.attributes.reduce((p, a) => (a._store === undefined || a._store) ? [...p, new AttributeValue(a)] : p, []);\n                }\n                else if (data.attributes._store === undefined || data.attributes._store) {\n                    this.attributes = [data.attributes];\n                }\n            }\n            if (data.value && typeof (data.value) === 'object') {\n                this.value = undefined;\n                this.type = AttributeTypes.Complex;\n                data.value.attributes.reduce((p, a) => (a._store === undefined || a._store) ? [...p, new AttributeValue(a)] : p, []);\n            }\n            else {\n                this.value = data.value;\n            }\n        }\n    }\n}\n\n// import { YmmSelectorComponent } from './widgets/ymm-selector/ymm-selector.component';\n// import { CitySelectorComponent } from './widgets/city-selector/city-selector.component';\nconst textFactory = () => {\n    const schema = new Attribute({\n        name: '',\n        type: AttributeTypes.Text,\n        label: '',\n        required: false,\n        widget: 'text',\n        options: {},\n        attributes: []\n    });\n    return new AttributeWidget({ id: 'text', name: 'text', title: 'Text', component: TextWidgetComponent, schema });\n};\nconst minmaxFactory = () => {\n    return new AttributeWidget({ id: 'minmax', name: 'minmax', title: 'MinMax', component: MinMaxWidgetComponent, schema: undefined });\n};\n/*export const ymmFactory = () => {\n  const schema = new Attribute({\n    name: '',\n    type: AttributeTypes.Complex,\n    label: '',\n    required: false,\n    widget: 'ymm_selector',\n    options: {},\n    attributes: [\n      new Attribute({\n        name: 'year',\n        type: AttributeTypes.Number,\n        label: 'Year',\n        required: false,\n        widget: '',\n        options: {},\n        attributes: []\n      }),\n      new Attribute({\n        name: 'make',\n        type: AttributeTypes.Text,\n        label: 'Make',\n        required: false,\n        widget: '',\n        options: {},\n        attributes: []\n      }),\n      new Attribute({\n        name: 'model',\n        type: AttributeTypes.Text,\n        label: 'Model',\n        required: false,\n        widget: '',\n        options: {},\n        attributes: []\n      })\n    ]\n  });\n  return new AttributeWidget({ name: 'ymm_selector', component: YmmSelectorComponent, schema });\n};*/\n/*export const cityFactory = () => {\n  const schema = new Attribute({\n    name: '',\n    type: AttributeTypes.Complex,\n    label: '',\n    required: false,\n    widget: 'city_selector',\n    options: {},\n    attributes: []\n  });\n  return new AttributeWidget({ name: 'city_selector', component: CitySelectorComponent, schema });\n};*/\n\nclass AttributesModule {\n    constructor(widgetPlugins, wpm) {\n        widgetPlugins.forEach(p => wpm.register(p));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: AttributesModule, deps: [{ token: ATTRIBUTE_WIDGET }, { token: WidgetPluginManager }], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.5\", ngImport: i0, type: AttributesModule, declarations: [AttributesBuilderComponent,\n            AttributeWidgetComponent,\n            AttributeWidgetDirective,\n            TextWidgetComponent,\n            MinMaxWidgetComponent,\n            AttributePipe\n            /*, YmmSelectorComponent, CitySelectorComponent*/\n        ], imports: [CommonModule, ReactiveFormsModule, MaterialModule, /*HttpClientModule,*/ HttpClientJsonpModule /*, CitiesModule */], exports: [AttributesBuilderComponent, AttributePipe, AttributeWidgetComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: AttributesModule, providers: [\n            {\n                provide: ATTRIBUTE_WIDGET,\n                useFactory: textFactory,\n                multi: true\n            },\n            {\n                provide: ATTRIBUTE_WIDGET,\n                useFactory: minmaxFactory,\n                multi: true\n            },\n            /*{\n              provide: ATTRIBUTE_WIDGET,\n              useFactory: attrFactories.ymmFactory,\n              multi: true\n            },\n            {\n              provide: ATTRIBUTE_WIDGET,\n              useFactory: attrFactories.cityFactory,\n              multi: true\n            }*/\n        ], imports: [CommonModule, ReactiveFormsModule, MaterialModule, /*HttpClientModule,*/ HttpClientJsonpModule /*, CitiesModule */] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: AttributesModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, ReactiveFormsModule, MaterialModule, /*HttpClientModule,*/ HttpClientJsonpModule /*, CitiesModule */],\n                    declarations: [\n                        AttributesBuilderComponent,\n                        AttributeWidgetComponent,\n                        AttributeWidgetDirective,\n                        TextWidgetComponent,\n                        MinMaxWidgetComponent,\n                        AttributePipe\n                        /*, YmmSelectorComponent, CitySelectorComponent*/\n                    ],\n                    exports: [AttributesBuilderComponent, AttributePipe, AttributeWidgetComponent],\n                    providers: [\n                        {\n                            provide: ATTRIBUTE_WIDGET,\n                            useFactory: textFactory,\n                            multi: true\n                        },\n                        {\n                            provide: ATTRIBUTE_WIDGET,\n                            useFactory: minmaxFactory,\n                            multi: true\n                        },\n                        /*{\n                          provide: ATTRIBUTE_WIDGET,\n                          useFactory: attrFactories.ymmFactory,\n                          multi: true\n                        },\n                        {\n                          provide: ATTRIBUTE_WIDGET,\n                          useFactory: attrFactories.cityFactory,\n                          multi: true\n                        }*/\n                    ]\n                }]\n        }], ctorParameters: function () { return [{ type: Array, decorators: [{\n                    type: Inject,\n                    args: [ATTRIBUTE_WIDGET]\n                }] }, { type: WidgetPluginManager }]; } });\n\nclass ValueComputerService {\n    constructor() { }\n    compute(attributes) {\n        const computedAttributes = [];\n        attributes.forEach(a => computedAttributes.push(this.computeAttribute(a)));\n        return computedAttributes;\n    }\n    computeAttribute(attribute) {\n        const computedValue = this.resolveComputedValue(attribute.value, attribute.type);\n        if (attribute.attributes && attribute.attributes.length > 0) {\n            return new AttributeValue({ ...attribute, computedValue, attributes: this.compute(attribute.attributes) });\n        }\n        else {\n            return new AttributeValue({ ...attribute, computedValue });\n        }\n    }\n    /**\n     * @todo: Support below strings.\n     * beds: 1.5\n     * beds: 1 1/2\n     * price: $1,000\n     * price: 1,000\n     * price $1,000,000.00\n     * baths: one\n     */\n    resolveComputedValue(value, type) {\n        let computedValue;\n        if (type === AttributeTypes.Number) {\n            computedValue = toNumber(value.trim());\n            if (computedValue && isNaN(computedValue)) {\n                computedValue = undefined;\n            }\n        }\n        else {\n            computedValue = value.trim();\n        }\n        return computedValue === undefined ? computedValue : `${computedValue}`;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: ValueComputerService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: ValueComputerService, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: ValueComputerService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return []; } });\n\nclass AttributeSerializerService {\n    constructor(valueComputer) {\n        this.valueComputer = valueComputer;\n    }\n    serialize(obj, prop) {\n        const type = typeof (obj);\n        if (type !== 'object') {\n            return new AttributeValue({\n                name: prop,\n                type: type !== 'string' ? type !== 'boolean' ? AttributeTypes.Number : AttributeTypes.Bool : AttributeTypes.Text,\n                displayName: prop,\n                value: `${obj}`,\n                intValue: undefined,\n                computedValue: this.valueComputer.resolveComputedValue(`${obj}`, type !== 'string' ? type !== 'boolean' ? AttributeTypes.Number : AttributeTypes.Bool : AttributeTypes.Text),\n                attributes: []\n            });\n        }\n        else if (Array.isArray(obj) && (prop === 'attributes' || prop === 'settings')) {\n            return new AttributeValue({\n                name: prop,\n                type: AttributeTypes.Complex,\n                displayName: prop,\n                value: undefined,\n                intValue: undefined,\n                computedValue: undefined,\n                attributes: obj\n            });\n        }\n        else if (Array.isArray(obj)) {\n            const len = obj.length;\n            const attrValues = [];\n            for (let i = 0; i < len; i++) {\n                if (typeof (obj[i]) !== 'object') {\n                    // attrValues.push(this.serialize({ value: obj[i] }, `${i}`));\n                    attrValues.push(this.serialize(obj[i], `${i}`));\n                }\n                else {\n                    attrValues.push(this.serialize(obj[i], `${i}`));\n                }\n            }\n            return new AttributeValue({\n                name: prop,\n                type: AttributeTypes.Array,\n                displayName: prop,\n                value: undefined,\n                intValue: undefined,\n                computedValue: undefined,\n                attributes: attrValues\n            });\n        }\n        else if (obj instanceof Date) {\n            // store as string for now.\n            return new AttributeValue({\n                name: prop,\n                type: AttributeTypes.Date,\n                displayName: prop,\n                value: obj.toJSON(),\n                intValue: undefined,\n                computedValue: obj.toJSON(),\n                attributes: []\n            });\n        }\n        else {\n            const attrValues = [];\n            for (const p in obj) {\n                attrValues.push(this.serialize(obj[p], p));\n            }\n            return new AttributeValue({\n                name: prop,\n                type: AttributeTypes.Complex,\n                displayName: prop,\n                value: undefined,\n                intValue: undefined,\n                computedValue: undefined,\n                attributes: attrValues\n            });\n        }\n    }\n    deserializeAsObject(attrValues, ignoreAttributes = false) {\n        return this.deserialize(new AttributeValue({\n            name: 'root',\n            type: AttributeTypes.Complex,\n            displayName: 'root',\n            value: undefined,\n            computedValue: undefined,\n            intValue: 0,\n            attributes: attrValues\n        }), ignoreAttributes);\n    }\n    deserialize(attrValue, ignoreAttributes = false) {\n        let obj;\n        let len;\n        switch (attrValue.type) {\n            case AttributeTypes.Complex:\n                if (!ignoreAttributes && (attrValue.name === 'attributes' || attrValue.name === 'settings')) {\n                    obj = attrValue.attributes.map(a => new AttributeValue(a));\n                }\n                else {\n                    len = attrValue.attributes.length;\n                    for (let i = 0; i < len; i++) {\n                        obj = { ...obj, [attrValue.attributes[i].name]: this.deserialize(attrValue.attributes[i]) };\n                    }\n                }\n                break;\n            case AttributeTypes.Bool:\n                obj = attrValue.value !== undefined ? ['1', 'true', 'on'].findIndex(b => b === attrValue.value) > -1 : undefined;\n                break;\n            case AttributeTypes.Number:\n            case AttributeTypes.Float:\n                obj = attrValue.value !== undefined && attrValue.value !== '' && attrValue.value !== 'undefined' ? attrValue.value !== '0' ? toNumber(attrValue.value.trim()) : 0 : undefined;\n                break;\n            case AttributeTypes.Text:\n                obj = attrValue.value;\n                break;\n            case AttributeTypes.Array:\n                if (!ignoreAttributes && (attrValue.name === 'attributes' || attrValue.name === 'settings')) {\n                    obj = attrValue.attributes.map(a => new AttributeValue(a));\n                }\n                else {\n                    len = attrValue.attributes.length;\n                    obj = [];\n                    for (let i = 0; i < len; i++) {\n                        obj = [...obj, this.deserialize(attrValue.attributes[i])];\n                    }\n                }\n                break;\n            case AttributeTypes.Date:\n                obj = attrValue.value !== undefined && attrValue.value !== '' ? new Date(attrValue.value) : undefined;\n                break;\n            default:\n        }\n        return obj;\n    }\n    convertToGroup(setting) {\n        const fg = new UntypedFormGroup({\n            name: new UntypedFormControl(setting.name, Validators.required),\n            type: new UntypedFormControl(setting.type, Validators.required),\n            displayName: new UntypedFormControl(setting.displayName, Validators.required),\n            value: new UntypedFormControl(setting.value, Validators.required),\n            computedValue: new UntypedFormControl(setting.value, Validators.required),\n            attributes: new UntypedFormArray([])\n        });\n        if (setting.attributes && setting.attributes.length > 0) {\n            setting.attributes.forEach(s => {\n                fg.get('attributes').push(this.convertToGroup(s));\n            });\n        }\n        return fg;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: AttributeSerializerService, deps: [{ token: ValueComputerService }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: AttributeSerializerService, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.5\", ngImport: i0, type: AttributeSerializerService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: ValueComputerService }]; } });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ATTRIBUTE_WIDGET, Attribute, AttributeMatcherService, AttributePipe, AttributeSerializerService, AttributeTypes, AttributeValue, AttributeWidget, AttributeWidgetComponent, AttributesBuilderComponent, AttributesModule, ValueComputerService, WidgetPluginManager, WidgetsService };\n","import toPropertyKey from \"./toPropertyKey.js\";\nexport default function _defineProperty(obj, key, value) {\n  key = toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}","import defineProperty from \"./defineProperty.js\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}"],"x_google_ignoreList":[0,1,2,3]}